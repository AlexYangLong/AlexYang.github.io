<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AlexYang&#39;s World</title>
  
  <subtitle>AlexYang的博客世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://alexyanglong.github.io/"/>
  <updated>2018-08-02T08:49:25.469Z</updated>
  <id>http://alexyanglong.github.io/</id>
  
  <author>
    <name>AlexYang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django -- 使用Haystack+Whoosh配置全文搜索</title>
    <link href="http://alexyanglong.github.io/2018/08/02/Django----%E4%BD%BF%E7%94%A8Haystack+Whoosh%E9%85%8D%E7%BD%AE%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/"/>
    <id>http://alexyanglong.github.io/2018/08/02/Django----使用Haystack+Whoosh配置全文搜索/</id>
    <published>2018-08-01T16:00:00.000Z</published>
    <updated>2018-08-02T08:49:25.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-使用Haystack-Whoosh配置全文搜索"><a href="#Django-–-使用Haystack-Whoosh配置全文搜索" class="headerlink" title="Django – 使用Haystack+Whoosh配置全文搜索"></a>Django – 使用Haystack+Whoosh配置全文搜索</h1><p>在此之前我是使用的 ORM的filter来实现的搜索功能。但这个搜索功能实在过于简单，没有多大的实用性。对于一个搜索引擎来说，至少应该能够根据用户的搜索关键词对搜索结果进行排序以及高亮关键字。现在使用 django-haystack 实现这些特性。</p><h2 id="Django-Haystack-简介"><a href="#Django-Haystack-简介" class="headerlink" title="Django Haystack 简介"></a>Django Haystack 简介</h2><p>django-haystack 是一个专门提供搜索功能的 django 第三方应用，它还支持 Solr、Elasticsearch、Whoosh、Xapian 等多种搜索引擎，配合著名的中文自然语言处理库 jieba 分词，就可以提供一个效果不错的文字搜索系统。</p><h2 id="安装必要依赖"><a href="#安装必要依赖" class="headerlink" title="安装必要依赖"></a>安装必要依赖</h2><p>要使用 django haystack，首先必须安装它，并且安装一些必要的依赖，具体需要安装的依赖有：</p><ul><li>Whoosh。Whoosh 是一个由纯 Python 实现的全文搜索引擎，没有二进制文件等，比较小巧，配置简单方便。</li><li>jieba 中文分词。由于 Whoosh 自带的是英文分词，对中文的分词支持不是太好，所以使用 jieba 替换Whoosh 的分词组件。</li></ul><p>直接使用 pip 安装这些包即可（安装到你使用的虚拟环境下）：<code>pip install django-haystack whoosh jieba</code></p><h2 id="配置-Haystack"><a href="#配置-Haystack" class="headerlink" title="配置 Haystack"></a>配置 Haystack</h2><p>安装好 django haystack 后需要在项目的 settings.py 做一些简单的配置。</p><p>首先是把 django haystack 加入到 <code>INSTALLED_APPS</code> 选项里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="comment"># 其它 app...</span></span><br><span class="line">    <span class="string">'haystack'</span>,</span><br><span class="line">    <span class="string">'app'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后加入如下配置项：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置全文搜索</span></span><br><span class="line"><span class="comment"># 指定搜索引擎</span></span><br><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'haystack.backends.whoosh_cn_backend.WhooshEngine'</span>,</span><br><span class="line">        <span class="string">'PATH'</span>: os.path.join(BASE_DIR, <span class="string">'whoosh_index'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 指定如何对搜索结果分页，这里设置为每 10 项结果为一页，默认是 20 项为一页</span></span><br><span class="line">HAYSTACK_SEARCH_RESULTS_PER_PAGE = <span class="number">10</span></span><br><span class="line"><span class="comment"># 添加此项，当数据库改变时，会自动更新索引，非常方便</span></span><br><span class="line">HAYSTACK_SIGNAL_PROCESSOR = <span class="string">'haystack.signals.RealtimeSignalProcessor'</span></span><br></pre></td></tr></table></figure><p><code>HAYSTACK_CONNECTIONS</code> 的 <code>ENGINE</code> 指定了 django haystack 使用的搜索引擎，这里我们使用了 <code>blog.whoosh_cn_backend.WhooshEngine</code>，虽然目前这个引擎还不存在，但接下来会创建它。<code>PATH</code> 指定了索引文件需要存放的位置，我们设置为项目根目录 <code>BASE_DIR</code> 下的 whoosh_index 文件夹（在建立索引是会自动创建）。</p><p><code>HAYSTACK_SEARCH_RESULTS_PER_PAGE</code> 指定如何对搜索结果分页，这里设置为每 10 项结果为一页。</p><p><code>HAYSTACK_SIGNAL_PROCESSOR</code> 指定什么时候更新索引，这里我们使用 <code>haystack.signals.RealtimeSignalProcessor</code>，作用是每当有更新时就更新索引。</p><h2 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h2><p>接下来就要告诉 django haystack 使用那些数据建立索引以及如何存放索引。如果要对 app应用下的数据进行全文检索，做法是在 app应用下建立一个 search_indexes.py 文件，写上如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Test</span><br><span class="line"><span class="keyword">from</span> haystack <span class="keyword">import</span> indexes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestIndex</span><span class="params">(indexes.SearchIndex, indexes.Indexable)</span>:</span></span><br><span class="line">    text = indexes.CharField(document=<span class="keyword">True</span>, use_template=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Test</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_queryset</span><span class="params">(self, using=None)</span>:</span></span><br><span class="line">        <span class="string">"""Used when the entire index for model is updated."""</span></span><br><span class="line">        <span class="comment">#确定在建立索引时有些记录被索引，这里我们简单地返回所有记录</span></span><br><span class="line">        <span class="keyword">return</span> self.get_model().objects.all()</span><br></pre></td></tr></table></figure><p>这是 django haystack 的规定。要相对某个 app 下的数据进行全文检索，就要在该 app 下创建一个 search_indexes.py 文件，然后创建一个 XXIndex 类（XX 为含有被检索数据的模型，如这里的 Test），并且继承 <code>SearchIndex</code> 和 <code>Indexable</code>。</p><p>为什么要创建索引？索引就像是一本书的目录，可以为读者提供更快速的导航与查找。在这里也是同样的道理，当数据量非常大的时候，若要从这些数据里找出所有的满足搜索条件的几乎是不太可能的，将会给服务器带来极大的负担。所以我们需要为指定的数据添加一个索引（目录），在这里是为 Test创建一个索引，索引的实现细节是我们不需要关心的，我们只关心为哪些字段创建索引，如何指定。</p><p>每个索引里面必须有且只能有一个字段为 <code>document=True</code>，这代表 django haystack 和搜索引擎将使用此字段的内容作为索引进行检索(primary field)。注意，如果使用一个字段设置了<code>document=True</code>，则一般约定此字段名为<code>text</code>，这是在 <code>SearchIndex</code> 类里面一贯的命名，以防止后台混乱，当然名字你也可以随便改，不过不建议改。</p><p>并且，haystack 提供了use_template=True 在 text 字段中，这样就允许我们使用数据模板去建立搜索引擎索引的文件，说得通俗点就是索引里面需要存放一些什么东西，例如 Test的 title 字段，这样我们可以通过 title 内容来检索 Test数据了。举个例子，假如你搜索 Python ，那么就可以检索出 title 中含有 Python 的Test了，怎么样是不是很简单？数据模板的路径为 templates/search/indexes/youapp/\&lt;model_name&gt;_text.txt（例如 templates/search/indexes/app/test_text.txt），其内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; object.title &#125;&#125;</span><br><span class="line">&#123;&#123; object.content&#125;&#125;</span><br></pre></td></tr></table></figure><p>这个数据模板的作用是对 Test.title、Test.content这两个字段建立索引，当检索的时候会对这两个字段做全文检索匹配，然后将匹配的结果排序后作为搜索结果返回。</p><h2 id="配置-URL"><a href="#配置-URL" class="headerlink" title="配置 URL"></a>配置 URL</h2><p>接下来就是配置 URL，搜索的视图函数和 URL 模式 django haystack 都已经帮我们写好了，只需要项目的 urls.py 中包含它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 其它...</span></span><br><span class="line">    url(<span class="string">r'^search/'</span>, include(<span class="string">'haystack.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="修改搜索表单"><a href="#修改搜索表单" class="headerlink" title="修改搜索表单"></a>修改搜索表单</h2><p>修改一下搜索表单，让它提交数据到 django haystack 搜索视图对应的 URL：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"search"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">id</span>=<span class="string">"searchform"</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'haystack_search' %&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">placeholder</span>=<span class="string">"搜索"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ion-ios-search-strong"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要是把表单的 action 属性改为自己写的视图路径。</p><h2 id="创建搜索结果页面"><a href="#创建搜索结果页面" class="headerlink" title="创建搜索结果页面"></a>创建搜索结果页面</h2><p><code>haystack_search</code> 视图函数会将搜索结果传递给模板 search/search.html，因此创建这个模板文件，对搜索结果进行简单渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load highlight %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .keyword&#123;</span></span><br><span class="line"><span class="undefined">            color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"search"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">id</span>=<span class="string">"searchform"</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'haystack_search' %&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">placeholder</span>=<span class="string">"搜索"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ion-ios-search-strong"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% if query %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>结果<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &#123;% for result in page.object_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; result.object.get_absolute_url &#125;&#125;"</span>&gt;</span>&#123;&#123; result.object.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                &#123;% highlight  result.object.content with query css_class "keyword" %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;% empty %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>没有结果发现.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% if page.has_previous or page.has_next %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                &#123;% if page.has_previous %&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?q=&#123;&#123; query &#125;&#125;&amp;page=&#123;&#123; page.previous_page_number &#125;&#125;"</span>&gt;</span>&#123;% endif %&#125;« Previous&#123;% if page.has_previous %&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;% endif %&#125;</span><br><span class="line">                |</span><br><span class="line">                &#123;% if page.has_next %&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?q=&#123;&#123; query &#125;&#125;&amp;page=&#123;&#123; page.next_page_number &#125;&#125;"</span>&gt;</span>&#123;% endif %&#125;Next »&#123;% if page.has_next %&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        &#123;# Show some example queries to run, maybe query syntax, something else? #&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="高亮关键词"><a href="#高亮关键词" class="headerlink" title="高亮关键词"></a>高亮关键词</h2><p>注意到百度的搜索结果页面，含有用户搜索的关键词的地方都是被标红的，在 django haystack 中实现这个效果也非常简单，只需要使用 highlight  模板标签即可，其用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使用默认值  </span><br><span class="line">&#123;% highlight result.summary with query %&#125;  </span><br><span class="line"></span><br><span class="line"># 这里我们为 &#123;&#123; result.summary &#125;&#125; 里所有的 &#123;&#123; query &#125;&#125; 指定了一个&lt;div&gt;&lt;/div&gt;标签，并且将class设置为highlight_me_please，这样就可以自己通过CSS为&#123;&#123; query &#125;&#125;添加高亮效果了，怎么样，是不是很科学呢  </span><br><span class="line">&#123;% highlight result.summary with query html_tag &quot;div&quot; css_class &quot;highlight_me_please&quot; %&#125;  </span><br><span class="line"></span><br><span class="line"># 可以 max_length 限制最终&#123;&#123; result.summary &#125;&#125; 被高亮处理后的长度</span><br><span class="line">&#123;% highlight result.summary with query max_length 40 %&#125;</span><br></pre></td></tr></table></figure><p>在搜索的结果页面也是用高亮语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 就是说在 content 内容中的关键字使用名为 ‘keyword’ 的css样式包裹</span><br><span class="line">&#123;% highlight result.object.content with query css_class "keyword" %&#125;</span><br></pre></td></tr></table></figure><h2 id="修改搜索引擎为中文分词"><a href="#修改搜索引擎为中文分词" class="headerlink" title="修改搜索引擎为中文分词"></a>修改搜索引擎为中文分词</h2><p>使用 Whoosh 作为搜索引擎，但在 django haystack 中为 Whoosh 指定的分词器是英文分词器，可能会使得搜索结果不理想，我们把这个分词器替换成 jieba 中文分词器。这里需要在项目环境下的Lib\site-packages\haystack\backends的目录中新建一个文件 ChineseAnalyzer.py，其中代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> whoosh.analysis <span class="keyword">import</span> RegexAnalyzer</span><br><span class="line"><span class="keyword">from</span> whoosh.analysis <span class="keyword">import</span> Tokenizer, Token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChineseTokenizer</span><span class="params">(Tokenizer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, value, positions=False, chars=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                 keeporiginal=False, removestops=True,</span></span></span><br><span class="line"><span class="function"><span class="params">                 start_pos=<span class="number">0</span>, start_char=<span class="number">0</span>, mode=<span class="string">''</span>, **kwargs)</span>:</span></span><br><span class="line">        t = Token(positions, chars, removestops=removestops, mode=mode,</span><br><span class="line">                  **kwargs)</span><br><span class="line">        seglist = jieba.cut(value, cut_all=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> seglist:</span><br><span class="line">            t.original = t.text = w</span><br><span class="line">            t.boost = <span class="number">1.0</span></span><br><span class="line">            <span class="keyword">if</span> positions:</span><br><span class="line">                t.pos = start_pos + value.find(w)</span><br><span class="line">            <span class="keyword">if</span> chars:</span><br><span class="line">                t.startchar = start_char + value.find(w)</span><br><span class="line">                t.endchar = start_char + value.find(w) + len(w)</span><br><span class="line">            <span class="keyword">yield</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ChineseAnalyzer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ChineseTokenizer()</span><br></pre></td></tr></table></figure><p>再把 haystack/backends/whoosh_backends.py 文件复制一份到当前目录下，重命名为 whoosh_cn_backends.py（之前我们在 settings.py 中 的 <code>HAYSTACK_CONNECTIONS</code> 指定的就是这个文件），然后修改whoosh_cn_backends.py中的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 顶部引入刚才添加的中文分词</span></span><br><span class="line"><span class="keyword">from</span> .ChineseAnalyzer <span class="keyword">import</span> ChineseAnalyzer</span><br></pre></td></tr></table></figure><p>找到如下一行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schema_fields[field_class.index_fieldname] = TEXT(stored=<span class="keyword">True</span>, analyzer=StemmingAnalyzer(), field_boost=field_class.boost, sortable=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schema_fields[field_class.index_fieldname] = TEXT(stored=<span class="keyword">True</span>, analyzer=ChineseAnalyzer(), field_boost=field_class.boost, sortable=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h2 id="建立索引文件"><a href="#建立索引文件" class="headerlink" title="建立索引文件"></a>建立索引文件</h2><p>最后一步就是建立索引文件了，运行命令 <code>python manage.py rebuild_index</code> 就可以建立索引文件了。</p><p>效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="效果图.png" alt="效果图" title="">                </div>                <div class="image-caption">效果图</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-使用Haystack-Whoosh配置全文搜索&quot;&gt;&lt;a href=&quot;#Django-–-使用Haystack-Whoosh配置全文搜索&quot; class=&quot;headerlink&quot; title=&quot;Django – 使用Haystack+Whoosh配置
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
      <category term="Haystack" scheme="http://alexyanglong.github.io/tags/Haystack/"/>
    
      <category term="Whoosh" scheme="http://alexyanglong.github.io/tags/Whoosh/"/>
    
  </entry>
  
  <entry>
    <title>Flask -- 在CentOS 7上部署Flask项目</title>
    <link href="http://alexyanglong.github.io/2018/06/22/Flask----%E5%9C%A8CentOS-7%E4%B8%8A%E9%83%A8%E7%BD%B2Flask%E9%A1%B9%E7%9B%AE/"/>
    <id>http://alexyanglong.github.io/2018/06/22/Flask----在CentOS-7上部署Flask项目/</id>
    <published>2018-06-21T16:00:00.000Z</published>
    <updated>2018-06-26T00:58:29.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-–-在CentOS-7上部署Flask项目"><a href="#Flask-–-在CentOS-7上部署Flask项目" class="headerlink" title="Flask – 在CentOS 7上部署Flask项目"></a>Flask – 在CentOS 7上部署Flask项目</h1><p>在部署之前，要确保CentOS 7系统已经安装了MySQL 5.x数据库、Python 3.6.x和Nginx。</p><p>在CentOS 7的根目录 <code>/</code> 下创建一个<code>project</code> 目录，该目录用于存放所有要部署的项目。在<code>project</code> 下在创建<code>conf</code> （用户存放所有的配置文件）、 <code>env</code> （用户存放所有的虚拟环境）、 <code>src</code> （用于存放所有项目的源码）、 <code>logs</code>（用于存放所有的日志文件）。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="同步数据"><a href="#同步数据" class="headerlink" title="同步数据"></a>同步数据</h3><p>使用navicat 将Windows上的数据库同步到CentOS上。首先要确保CentOS上的MySQL可以支持远程连接。</p><h3 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 切换目录</span><br><span class="line">cd /project/env</span><br><span class="line"># 安装虚拟环境  参数：指定虚拟环境中Python的版本（-p 本地Python3的安装目录）</span><br><span class="line">virtualenv --no-site-packages -p /usr/local/python3.6 venv</span><br><span class="line"># 进入虚拟环境目录</span><br><span class="line">cd venv</span><br><span class="line"># 激活虚拟环境</span><br><span class="line">source bin/activate</span><br><span class="line"># 安装环境所需要的包 其中re_install.txt文件中记录的是需要安装包的名称以及对应的版本</span><br><span class="line">pip3 install -r re_install.txt</span><br></pre></td></tr></table></figure><h3 id="部署在测试环境中"><a href="#部署在测试环境中" class="headerlink" title="部署在测试环境中"></a>部署在测试环境中</h3><p>进入项目目录，使用<code>python manage.py runserver -p 8080 -h 0.0.0.0 -d</code> 运行项目。</p><h3 id="部署在正式环境中"><a href="#部署在正式环境中" class="headerlink" title="部署在正式环境中"></a>部署在正式环境中</h3><p>使用 uwsgi + Nginx + MySQL 来部署项目。</p><h4 id="配置nginx-conf文件"><a href="#配置nginx-conf文件" class="headerlink" title="配置nginx.conf文件"></a>配置nginx.conf文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /project/conf</span><br></pre></td></tr></table></figure><p>先编写自己项目的nginx.conf文件如下：</p><p>每一个项目对应有一个自己定义的nginx的配置文件，比如爱家项目，定义为aj_nginx.conf 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen       8080;  # 端口</span><br><span class="line">server_name xx.xx.xx.xx localhost;  # 公网ip、域名</span><br><span class="line"> </span><br><span class="line">access_log /app/logs/aj_access.log;  # 连接成功日志文件</span><br><span class="line">error_log /app/logs/aj_error.log;  # 错误日志</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">include uwsgi_params;  </span><br><span class="line">uwsgi_pass 127.0.0.1:8090;  # 和uwsgi通信的端口</span><br><span class="line"></span><br><span class="line">uwsgi_param UWSGI_CHDIR /app/src/ajzf;  # 项目目录路径</span><br><span class="line">uwsgi_param UWSGI_SCRIPT manage:app;   # 启动flask的文件:Flask的实例</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再修改总的nginx的配置文件，让总的nginx文件包含我们自定义的项目的axf_nginx.conf 文件。</p><p>总的nginx配置文件在：/etc/nginx/nginx.conf 中</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./flask_centos_nginx1.png" alt="django_centos_nginx1" title="">                </div>                <div class="image-caption">django_centos_nginx1</div>            </figure><p>以上步骤操作完成以后，需要重启nginx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br><span class="line"></span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><p>如果自定义的axf_nginx.conf文件没有错误的话，查看nginx的运行状态会有如下的结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./flask_centos_nginx2.png" alt="django_centos_nginx2" title="">                </div>                <div class="image-caption">django_centos_nginx2</div>            </figure><h4 id="配置uwsgi文件"><a href="#配置uwsgi文件" class="headerlink" title="配置uwsgi文件"></a>配置uwsgi文件</h4><p>先安装uwsgi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install uwsgi</span><br></pre></td></tr></table></figure><p>然后进行环境变量的配置， 建立软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/python3.6/bin/uwsgi /usr/bin/uwsgi</span><br></pre></td></tr></table></figure><p>在 /project/conf 文件夹下除了包含自定义的aj_nginx.conf文件，还有我们自定义的aj_uwsgi.ini 配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"> </span><br><span class="line">socket=127.0.0.1:8090</span><br><span class="line"></span><br><span class="line">chdir=/app/src/ajzf</span><br><span class="line"></span><br><span class="line">pythonpath=/usr/local/python3.6/bin/python3</span><br><span class="line"></span><br><span class="line">pythonhome=/app/env/venv</span><br><span class="line"></span><br><span class="line">callable=app</span><br><span class="line"></span><br><span class="line">logto=/app/logs/aj_uwsgi.log</span><br></pre></td></tr></table></figure><p>运行项目:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /project/conf</span><br><span class="line"></span><br><span class="line">uwsgi --ini aj_uwsgi.ini</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask-–-在CentOS-7上部署Flask项目&quot;&gt;&lt;a href=&quot;#Flask-–-在CentOS-7上部署Flask项目&quot; class=&quot;headerlink&quot; title=&quot;Flask – 在CentOS 7上部署Flask项目&quot;&gt;&lt;/a&gt;Flask
      
    
    </summary>
    
      <category term="Flask" scheme="http://alexyanglong.github.io/categories/Flask/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="Flask" scheme="http://alexyanglong.github.io/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask -- 模型的关联关系</title>
    <link href="http://alexyanglong.github.io/2018/06/08/Flask----%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB/"/>
    <id>http://alexyanglong.github.io/2018/06/08/Flask----模型的关联关系/</id>
    <published>2018-06-07T16:00:00.000Z</published>
    <updated>2018-06-25T11:30:30.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-–-模型的关联关系"><a href="#Flask-–-模型的关联关系" class="headerlink" title="Flask – 模型的关联关系"></a>Flask – 模型的关联关系</h1><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><p>学生模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">__tablename__ = <span class="string">'student'</span></span><br><span class="line"></span><br><span class="line">    s_id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>, autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    s_name = db.Column(db.String(<span class="number">20</span>), unique=<span class="keyword">True</span>)</span><br><span class="line">    s_age = db.Column(db.Integer, default=<span class="number">18</span>)</span><br><span class="line">    s_g = db.Column(db.Integer, db.ForeignKey(<span class="string">'grade.g_id'</span>), nullable=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>班级模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grade</span><span class="params">(db.Model)</span>:</span></span><br><span class="line"> __tablename__ = <span class="string">'grade'</span></span><br><span class="line"> </span><br><span class="line">    g_id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>, autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    g_name = db.Column(db.String(<span class="number">10</span>), unique=<span class="keyword">True</span>)</span><br><span class="line">    g_desc = db.Column(db.String(<span class="number">100</span>), nullable=<span class="keyword">True</span>)</span><br><span class="line">    g_time = db.Column(db.Date, default=datetime.now)</span><br><span class="line">    students = db.relationship(<span class="string">'Student'</span>, backref=<span class="string">'grade'</span>, lazy=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>官网解释有如下几个lazy的参数：</p><p>lazy 决定了 SQLAlchemy 什么时候从数据库中加载数据:，有如下四个值:</p><p><strong>select</strong>/True: (which is the default) means that SQLAlchemy will load the data as necessary in one go using a standard select statement.</p><p><strong>joined</strong>/False: tells SQLAlchemy to load the relationship in the same query as the parent using a JOIN statement.</p><p><strong>subquery</strong>: works like ‘joined’ but instead SQLAlchemy will use a subquery.</p><p><strong>dynamic</strong>: is special and useful if you have many items. Instead of loading the items SQLAlchemy will return another query object which you can further refine before loading the items. This is usually what you want if you expect more than a handful of items for this relationship</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select就是访问到属性的时候，就会全部加载该属性的数据。</span><br><span class="line">joined则是在对关联的两个表进行join操作，从而获取到所有相关的对象。</span><br><span class="line">dynamic则不一样，在访问属性的时候，并没有在内存中加载数据，而是返回一个query对象, 需要执行相应方法才可以获取对象，</span><br></pre></td></tr></table></figure><p>通过班级查询学生信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@grade.route('/selectstubygrade/&lt;int:id&gt;/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_stu_by_grade</span><span class="params">(id)</span>:</span></span><br><span class="line">    grade = Grade.query.get(id)</span><br><span class="line"><span class="comment"># 通过班级对象.定义的relationship变量去获取学生的信息</span></span><br><span class="line">    stus = grade.students</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'grade_student.html'</span>,</span><br><span class="line">                            stus=stus,</span><br><span class="line">                            grade=grade</span><br><span class="line">                            )</span><br></pre></td></tr></table></figure><p>通过学生信息查询班级信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@stu.route('/selectgradebystu/&lt;int:id&gt;/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_grade_by_stu</span><span class="params">(id)</span>:</span></span><br><span class="line">    stu = Student.query.get(id)</span><br><span class="line"> <span class="comment"># 通过学生对象.定义的backref参数去获取班级的信息</span></span><br><span class="line">    grade = stu.grade</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'student_grade.html'</span>,</span><br><span class="line">                            grade=grade,</span><br><span class="line">                            stu=stu)</span><br></pre></td></tr></table></figure><p>注意：表的外键由db.ForeignKey指定，传入的参数是表的字段。db.relationship它声明的属性不作为表字段，第一个参数是关联类的名字，backref是一个反向身份的代理,相当于在Student类中添加了grade的属性。例如，有Grade实例dept和Student实例grade。dept.students.count()将会返回学院学生人数；stu.grade.first()将会返回学生的学院信息的Grade类实例。一般来讲db.relationship()会放在一这一边。</p><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><p>创建中间表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sc = db.Table(<span class="string">'sc'</span>,</span><br><span class="line">    db.Column(<span class="string">'s_id'</span>, db.Integer, db.ForeignKey(<span class="string">'student.s_id'</span>), primary_key=<span class="keyword">True</span>),</span><br><span class="line">    db.Column(<span class="string">'c_id'</span>, db.Integer, db.ForeignKey(<span class="string">'courses.c_id'</span>), primary_key=<span class="keyword">True</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>创建课程表的模型，Course类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span><span class="params">(db.Model)</span>:</span></span><br><span class="line"> __tablename__ = <span class="string">'courses'</span></span><br><span class="line"> </span><br><span class="line">    c_id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>, autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    c_name = db.Column(db.String(<span class="number">20</span>), unique=<span class="keyword">True</span>)</span><br><span class="line">    students = db.relationship(<span class="string">'Student'</span>,</span><br><span class="line">                               secondary=sc,</span><br><span class="line">                               backref=<span class="string">'cou'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.c_name = name</span><br></pre></td></tr></table></figure><p>sc表由<strong>db.Table声明</strong>，我们不需要关心这张表，因为这张表将会由SQLAlchemy接管，它唯一的作用是作为students表和courses表关联表，所以必须在db.relationship()中指出<strong>sencondary关联表参数</strong>。lazy是指查询时的惰性求值的方式，这里有详细的参数说明，而db.backref是声明反向身份代理，其中的lazy参数是指明反向查询的惰性求值方式。</p><h3 id="添加学生和课程之间的关系"><a href="#添加学生和课程之间的关系" class="headerlink" title="添加学生和课程之间的关系"></a>添加学生和课程之间的关系</h3><p>通过页面中传递学生的id和课程的id，分别获取学生的对象和课程的对象，在使用关联关系append去添加学生对象，并且add以后再commit后，就可以在中间表sc中查看到新增的关联关系了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">userid = request.form.get(<span class="string">'userid'</span>)</span><br><span class="line">courseid = request.form.get(<span class="string">'courseid'</span>)</span><br><span class="line"></span><br><span class="line">stu = Student.query.get(userid)</span><br><span class="line">cou = Course.query.get(courseid)</span><br><span class="line"></span><br><span class="line">cou.students.append(stu)</span><br><span class="line">db.session.add(cou)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><h3 id="删除学生和课程之间的关系"><a href="#删除学生和课程之间的关系" class="headerlink" title="删除学生和课程之间的关系"></a>删除学生和课程之间的关系</h3><p>通过页面获取传递的学生的id和课程的id，分别获取学生对象和课程对象，在使用关联关系remove去删除学生对象，并commit将事务提交到数据库中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stu = Student.query.get(s_id)</span><br><span class="line">cou = Course.query.get(c_id)</span><br><span class="line"></span><br><span class="line">cou.students.remove(stu)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><h3 id="通过课程查询学生的信息"><a href="#通过课程查询学生的信息" class="headerlink" title="通过课程查询学生的信息"></a>通过课程查询学生的信息</h3><p>以下定义在课程course的模型中，所以通过课程查询学生的信息，语法为课程的对象.students。如果知道学生的信息反过来找课程的信息，则使用backref的反向关联去查询，语法为学生的对象.cou(反向)</p><p>students = db.relationship(‘Student’,secondary=sc,backref=’cou’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cou = Course.query.get(<span class="number">2</span>)</span><br><span class="line">stus = cou.students</span><br></pre></td></tr></table></figure><h3 id="通过学生去查询课程的信息"><a href="#通过学生去查询课程的信息" class="headerlink" title="通过学生去查询课程的信息"></a>通过学生去查询课程的信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stu = Student.query.get(id)</span><br><span class="line">cous = stu.cou</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask-–-模型的关联关系&quot;&gt;&lt;a href=&quot;#Flask-–-模型的关联关系&quot; class=&quot;headerlink&quot; title=&quot;Flask – 模型的关联关系&quot;&gt;&lt;/a&gt;Flask – 模型的关联关系&lt;/h1&gt;&lt;h2 id=&quot;一对多&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Flask" scheme="http://alexyanglong.github.io/categories/Flask/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Flask" scheme="http://alexyanglong.github.io/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask -- 模型的使用</title>
    <link href="http://alexyanglong.github.io/2018/06/07/Flask----%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://alexyanglong.github.io/2018/06/07/Flask----模型的使用/</id>
    <published>2018-06-06T16:00:00.000Z</published>
    <updated>2018-06-25T11:35:43.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-–-模型的使用"><a href="#Flask-–-模型的使用" class="headerlink" title="Flask – 模型的使用"></a>Flask – 模型的使用</h1><h2 id="Flask模型"><a href="#Flask模型" class="headerlink" title="Flask模型"></a>Flask模型</h2><p>Flask默认并没有提供任何数据库操作的API</p><p>我们可以选择任何适合自己项目的数据库来使用</p><p>Flask中可以自己的选择数据，用原生语句实现功能，也可以选择ORM（SQLAlchemy，MongoEngine）</p><p>SQLAlchemy是一个很强大的关系型数据库框架，支持多种数据库后台。SQLAlchemy提供了高层ORM，也提供了使用数据库原生SQL的低层功能。</p><p>ORM：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">将对对象的操作转换为原生SQL</span><br><span class="line">优点</span><br><span class="line">易用性，可以有效减少重复SQL</span><br><span class="line">性能损耗少</span><br><span class="line">设计灵活，可以轻松实现复杂查询</span><br><span class="line">移植性好</span><br></pre></td></tr></table></figure><p>针对于Flask的支持，<a href="http://flask-sqlalchemy.pocoo.org/2.3/" target="_blank" rel="noopener">官网地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br></pre></td></tr></table></figure><p>安装驱动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><h2 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h2><p>使用SQLALchemy的对象去创建字段</p><p>其中<code>__tablename__</code>指定创建的数据库的名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建models.py文件，其中定义模型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"student"</span></span><br><span class="line">    </span><br><span class="line">    s_id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>, autoincrement=<span class="keyword">True</span>)</span><br><span class="line">    s_name = db.Column(db.String(<span class="number">16</span>), unique=<span class="keyword">True</span>)</span><br><span class="line">    s_age = db.Column(db.Integer, default=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>其中：</p><p>Integer表示创建的s_id字段的类型为整形，</p><p>primary_key表示是否为主键</p><p>String表示该字段为字符串</p><p>unique表示该字段唯一</p><p>default表示默认值</p><p>autoincrement表示是否自增</p><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><p>在视图函数中我们引入models.py中定义的db</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> App.models <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route("/createdb/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_db</span><span class="params">()</span>:</span></span><br><span class="line">    db.create_all()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"创建成功"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route('/dropdb/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_db</span><span class="params">()</span>:</span></span><br><span class="line">    db.drop_all()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'删除成功'</span></span><br></pre></td></tr></table></figure><p>其中： db.create_all()表示创建定义模型中对应到数据库中的表</p><p>db.drop_all()表示删除数据库中的所有的表</p><h2 id="初始化SQLALchemy"><a href="#初始化SQLALchemy" class="headerlink" title="初始化SQLALchemy"></a>初始化SQLALchemy</h2><p>在定义的<code>__init__.py</code>文件中使用SQLALchemy去整合一个或多个Flask的应用</p><p>有两种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种：</span></span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLALchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种：</span></span><br><span class="line"><span class="keyword">from</span> App.models <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">()</span>:</span></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    db.init_app(app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><h2 id="配置数据库的访问地址"><a href="#配置数据库的访问地址" class="headerlink" title="配置数据库的访问地址"></a>配置数据库的访问地址</h2><p><a href="http://www.pythondoc.com/flask-sqlalchemy/config.html" target="_blank" rel="noopener">官网配置参数</a></p><p>数据库连接的格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dialect+driver://username:password@host:port/database</span><br><span class="line"><span class="comment"># dialect数据库实现</span></span><br><span class="line"><span class="comment"># driver数据库的驱动</span></span><br></pre></td></tr></table></figure><p>例子： 访问mysql数据库，驱动为pymysql，用户为root，密码为123456，数据库的地址为本地，端口为3306，数据库名称HelloFlask</p><p>设置如下： <code>mysql+pymysql://root:123456@localhost:3306/HelloFlask</code></p><p>在初始化<code>__init__.py</code>文件中如下配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class="keyword">False</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">"mysql+pymysql://root:123456@localhost:3306/HelloFlask"</span></span><br></pre></td></tr></table></figure><h2 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名.query.xxx</span><br></pre></td></tr></table></figure><p>获取查询集：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">all()</span><br><span class="line">filter(类名.属性名==xxx)</span><br><span class="line">filter_by(属性名=xxx)</span><br></pre></td></tr></table></figure><p>数据操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 在事务中处理，数据插入</span><br><span class="line"></span><br><span class="line">db.session.add(object)</span><br><span class="line"></span><br><span class="line">db.session.add_all(list[object])</span><br><span class="line"></span><br><span class="line">db.session.delete(object)</span><br><span class="line"></span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line"># 修改和删除基于查询</span><br></pre></td></tr></table></figure><h3 id="向学生表中添加数据"><a href="#向学生表中添加数据" class="headerlink" title="向学生表中添加数据"></a>向学生表中添加数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blue.route('/createstu/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_stu</span><span class="params">()</span>:</span></span><br><span class="line">    s = Student()</span><br><span class="line">    s.s_name = <span class="string">'小花%d'</span> % random.randrange(<span class="number">100</span>)</span><br><span class="line">    s.s_age = <span class="string">'%d'</span> % random.randrange(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    db.session.add(s)</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'添加成功'</span></span><br></pre></td></tr></table></figure><p>提交事务，使用commit提交我们的添加数据的操作</p><h4 id="批量增加"><a href="#批量增加" class="headerlink" title="批量增加"></a>批量增加</h4><p>第一种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blue.route('/createstus/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_users</span><span class="params">()</span>:</span></span><br><span class="line">    stus = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line"><span class="comment"># 实例化Student的对象</span></span><br><span class="line">        s = Student()</span><br><span class="line"><span class="comment"># 对象的属性赋值</span></span><br><span class="line">        s.s_name = <span class="string">'张三%s'</span> % random.randrange(<span class="number">10000</span>)</span><br><span class="line">        s.s_age = <span class="string">'%d'</span> % random.randrange(<span class="number">100</span>)</span><br><span class="line">        stus.append(s)</span><br><span class="line"><span class="comment"># 添加需要创建的数据</span></span><br><span class="line">    db.session.add_all(stus)</span><br><span class="line"><span class="comment"># 提交事务到数据库</span></span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'创建成功'</span></span><br></pre></td></tr></table></figure><p>注：在创建单条数据的时候使用db.session.add()，在创建多条数据的时候使用db.session.add_all()</p><p>第二种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blue.route('/createstus/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_users</span><span class="params">()</span>:</span></span><br><span class="line">    stus = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line"><span class="comment"># 使用类的初始化去创建Student对象</span></span><br><span class="line">        s = Student(<span class="string">'张三%s'</span> % random.randrange(<span class="number">10000</span>),</span><br><span class="line">                    <span class="string">'%d'</span> % random.randrange(<span class="number">100</span>))</span><br><span class="line">        stus.append(s)</span><br><span class="line"></span><br><span class="line">    db.session.add_all(stus)</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'创建成功'</span></span><br></pre></td></tr></table></figure><h3 id="获取所有学生信息"><a href="#获取所有学生信息" class="headerlink" title="获取所有学生信息"></a>获取所有学生信息</h3><p>将学生的全部信息获取到，并且返回给页面，在页面中使用for循环去解析即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blue.route("/getstudents/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_students</span><span class="params">()</span>:</span></span><br><span class="line">    students = Student.query.all()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"StudentList.html"</span>, students=students)</span><br></pre></td></tr></table></figure><h3 id="获取s-id-1的学生的信息"><a href="#获取s-id-1的学生的信息" class="headerlink" title="获取s_id=1的学生的信息"></a>获取s_id=1的学生的信息</h3><p>写法1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter(Student.s_id == <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter_by(s_id=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>注意：filter中可以接多个过滤条件</p><p>写法3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">'select * from student where s_id=1'</span></span><br><span class="line">students = db.session.execute(sql)</span><br></pre></td></tr></table></figure><h3 id="修改学生的信息"><a href="#修改学生的信息" class="headerlink" title="修改学生的信息"></a>修改学生的信息</h3><p>写法1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter_by(s_id=<span class="number">3</span>).first()</span><br><span class="line">students.s_name = <span class="string">'哈哈'</span></span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student.query.filter_by(s_id=<span class="number">3</span>).update(&#123;<span class="string">'s_name'</span>:<span class="string">'娃哈哈'</span>&#125;)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><h3 id="删除一个学生的信息"><a href="#删除一个学生的信息" class="headerlink" title="删除一个学生的信息"></a>删除一个学生的信息</h3><p>写法1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter_by(s_id=<span class="number">2</span>).first()</span><br><span class="line">db.session.delete(students)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter_by(s_id=<span class="number">1</span>).all()</span><br><span class="line">db.session.delete(students[<span class="number">0</span>])</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p>注意：filter_by后的结果是一个list的结果集</p><p><strong>重点注意：在增删改中如果不commit的话，数据库中的数据并不会更新，只会修改本地缓存中的数据，所以一定需要db.session.commit()</strong></p><h3 id="查询操作深入"><a href="#查询操作深入" class="headerlink" title="查询操作深入"></a>查询操作深入</h3><h4 id="使用运算符"><a href="#使用运算符" class="headerlink" title="使用运算符"></a>使用运算符</h4><p>获取查询集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filter(类名.属性名.运算符(‘xxx’))</span><br><span class="line"></span><br><span class="line">filter(类名.属性 数学运算符  值)</span><br></pre></td></tr></table></figure><p>运算符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">contains： 包含</span><br><span class="line">startswith：以什么开始</span><br><span class="line">endswith：以什么结束</span><br><span class="line">in_：在范围内</span><br><span class="line">like：模糊</span><br><span class="line">__gt__: 大于</span><br><span class="line">__ge__：大于等于</span><br><span class="line">__lt__：小于</span><br><span class="line">__le__：小于等于</span><br></pre></td></tr></table></figure><p>筛选：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">offset()</span><br><span class="line">limit()</span><br><span class="line">order_by()</span><br><span class="line">get()</span><br><span class="line">first()</span><br><span class="line">paginate()</span><br></pre></td></tr></table></figure><p>逻辑运算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">与</span><br><span class="line">and_</span><br><span class="line">filter(and_(条件),条件…)</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">or_</span><br><span class="line">filter(or_(条件),条件…)</span><br><span class="line"></span><br><span class="line">非</span><br><span class="line">not_</span><br><span class="line">filter(not_(条件),条件…)</span><br></pre></td></tr></table></figure><p>例子1：</p><ol><li><p>查询学生的id为3，4，5，6，16的的学生信息，使用<strong>in_逻辑运算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blue.route('/getstubyids/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stu_by_ids</span><span class="params">()</span>:</span></span><br><span class="line"> students = Student.query.filter(Student.s_id.in_([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">16</span>]))</span><br><span class="line"> <span class="keyword">return</span> render_template(<span class="string">'StudentList.html'</span>, students=students)</span><br></pre></td></tr></table></figure></li><li><p>查询学生的年龄小于18岁的学生的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.query.filter(Student.s_age &lt; <span class="number">18</span>)</span><br></pre></td></tr></table></figure></li><li><p>查询学生的年龄小于18岁的学生的信息，<strong><strong>lt</strong>小于</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter(Student.s_age.__lt__(<span class="number">15</span>))</span><br></pre></td></tr></table></figure></li><li><p>查询学生的年龄小于等于18岁的学生的信息，<strong><strong>le</strong>小于等于</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter(Student.s_age.__le__(<span class="number">15</span>))</span><br></pre></td></tr></table></figure></li><li><p>查询学生的姓名以什么开始或者以什么结尾的学生的信息<strong>startswith和endswith</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">students = Student.query.filter(Student.s_name.startswith(<span class="string">'张'</span>))</span><br><span class="line">students = Student.query.filter(Student.s_name.endswith(<span class="string">'2'</span>))</span><br></pre></td></tr></table></figure></li><li><p>查询id=4的学生的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student.query.get(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 获取的结果是学生的对象</span></span><br></pre></td></tr></table></figure></li><li><p>模糊搜索like</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %：代表一个或者多个</span></span><br><span class="line"><span class="comment"># _：代表一个</span></span><br><span class="line"> </span><br><span class="line">Student.query.filter(Student.s_name.like(<span class="string">'%张%'</span>))</span><br></pre></td></tr></table></figure></li><li><p>分页，查询第二页的数据4条</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个参数是那一页，第二个参数是一页的条数，第三个参数是是否输出错误信息</span></span><br><span class="line">students = Student.query.paginate(<span class="number">2</span>, <span class="number">4</span>, <span class="keyword">False</span>).items</span><br></pre></td></tr></table></figure></li></ol><p>例子2：</p><p>跳过offset几个信息，截取limit结果的几个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照id降序排列</span></span><br><span class="line">stus = Student.query.order_by(<span class="string">'-s_id'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照id降序获取三个</span></span><br><span class="line">stus = Student.query.order_by(<span class="string">'-s_id'</span>).limit(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取年龄最大的一个</span></span><br><span class="line">stus = Student.query.order_by(<span class="string">'-s_age'</span>).first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过3个数据，查询5个信息</span></span><br><span class="line">stus = Student.query.order_by(<span class="string">'-s_age'</span>).offset(<span class="number">3</span>).limit(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过3个数据</span></span><br><span class="line">stus = Student.query.order_by(<span class="string">'-s_age'</span>).offset(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取id等于24的学生</span></span><br><span class="line">stus = Student.query.filter(Student.s_id==<span class="number">24</span>)</span><br><span class="line">stus = Student.query.get(<span class="number">24</span>)</span><br></pre></td></tr></table></figure><p>例子3：</p><p>查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> <span class="keyword">and</span>, <span class="keyword">or</span>, not_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询多个条件</span></span><br><span class="line">stus = Student.query.filter(Student.s_age==<span class="number">18</span>, Student.s_name==<span class="string">'雅典娜'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># and_ 并且条件</span></span><br><span class="line">stus = Student.query.filter(and_(Student.s_age==<span class="number">18</span>, Student.s_name==<span class="string">'雅典娜'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># or_ 或者条件</span></span><br><span class="line">stus = Student.query.filter(or_(Student.s_age==<span class="number">18</span>, Student.s_name==<span class="string">'火神'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># not_ 非</span></span><br><span class="line">stus = Student.query.filter(not_(Student.s_age==<span class="number">18</span>), Student.s_name==<span class="string">'火神'</span>)</span><br></pre></td></tr></table></figure><p>分页：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./flask_sqlalchemy_paginate.png" alt="flask_sqlalchemy_paginate" title="">                </div>                <div class="image-caption">flask_sqlalchemy_paginate</div>            </figure><p>后端数据处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询第几页的数据</span></span><br><span class="line">page = int(request.args.get(<span class="string">'page'</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每一页的条数多少，默认为10条</span></span><br><span class="line">per_page = int(request.args.get(<span class="string">'per_page'</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询当前第几个的多少条数据</span></span><br><span class="line">paginate = Student.query.order_by(<span class="string">'-s_id'</span>).paginate(page, per_page, error_out=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">stus = paginate.items</span><br></pre></td></tr></table></figure><p>前端数据展示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;学生信息&lt;/h2&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> stu <span class="keyword">in</span> stus %&#125;</span><br><span class="line">    id：&#123;&#123; stu.s_id &#125;&#125;</span><br><span class="line">    姓名：&#123;&#123; stu.s_name &#125;&#125;</span><br><span class="line">    年龄：&#123;&#123; stu.s_age &#125;&#125;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">总页数: &#123;&#123; paginate.pages &#125;&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">一共&#123;&#123; paginate.total &#125;&#125;条数据</span><br><span class="line">&lt;br&gt;</span><br><span class="line">当前页数：&#123;&#123; paginate.page &#125;&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> paginate.has_prev %&#125;</span><br><span class="line">    &lt;a href="/stupage/?page=&#123;&#123; paginate.prev_num &#125;&#125;"&gt;上一页&lt;/a&gt;：&#123;&#123; paginate.prev_num &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> paginate.has_next %&#125;</span><br><span class="line">    &lt;a href="/stupage/?page=&#123;&#123; paginate.next_num &#125;&#125;"&gt;下一页&lt;/a&gt;：&#123;&#123; paginate.next_num &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line">页码：&#123;% <span class="keyword">for</span> i <span class="keyword">in</span>  paginate.iter_pages() %&#125;</span><br><span class="line">        &lt;a href="/stupage/?page=&#123;&#123; i &#125;&#125;"&gt;&#123;&#123; i &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask-–-模型的使用&quot;&gt;&lt;a href=&quot;#Flask-–-模型的使用&quot; class=&quot;headerlink&quot; title=&quot;Flask – 模型的使用&quot;&gt;&lt;/a&gt;Flask – 模型的使用&lt;/h1&gt;&lt;h2 id=&quot;Flask模型&quot;&gt;&lt;a href=&quot;#Fl
      
    
    </summary>
    
      <category term="Flask" scheme="http://alexyanglong.github.io/categories/Flask/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Flask" scheme="http://alexyanglong.github.io/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask -- 模板的使用</title>
    <link href="http://alexyanglong.github.io/2018/06/06/Flask%20--%20%E6%A8%A1%E6%9D%BF%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://alexyanglong.github.io/2018/06/06/Flask -- 模板的使用/</id>
    <published>2018-06-05T16:00:00.000Z</published>
    <updated>2018-06-25T11:48:38.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-–-模板的使用"><a href="#Flask-–-模板的使用" class="headerlink" title="Flask – 模板的使用"></a>Flask – 模板的使用</h1><h2 id="jinja2模板介绍"><a href="#jinja2模板介绍" class="headerlink" title="jinja2模板介绍"></a>jinja2模板介绍</h2><p>Flask中使用jinja2模板引擎</p><p>jinja2是由Flask作者开发，模仿Django的模板引擎</p><p>优点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">速度快，被广泛使用</span><br><span class="line">HTML设计和后端python分离</span><br><span class="line">非常灵活，快速和安全</span><br><span class="line">提供了控制，继承等高级功能</span><br></pre></td></tr></table></figure><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>模板语法主要分为两种：变量和标签</p><p>模板中的变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; var &#125;&#125;</span><br><span class="line"></span><br><span class="line">视图传递给模板的数据</span><br><span class="line">前面定义出来的数据</span><br><span class="line">变量不存在，默认忽略</span><br></pre></td></tr></table></figure><p>模板中的标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tag %&#125;</span><br><span class="line"></span><br><span class="line">控制逻辑</span><br><span class="line">使用外部表达式</span><br><span class="line">创建变量</span><br><span class="line">宏定义</span><br></pre></td></tr></table></figure><h3 id="结构标签"><a href="#结构标签" class="headerlink" title="结构标签"></a>结构标签</h3><p>block</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block xxx %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">块操作</span><br><span class="line">父模板挖坑，子模板填坑</span><br></pre></td></tr></table></figure><p>extends</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;xxx.html&apos; %&#125;</span><br><span class="line"></span><br><span class="line">继承以后保留块中的内容</span><br><span class="line">&#123;&#123; super() &#125;&#125;</span><br></pre></td></tr></table></figure><p>挖坑继承体现的化整为零的操作</p><p>macro</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro hello(name) %&#125;</span><br><span class="line">&#123;&#123; name &#125;&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line">宏定义，可以在模板中定义函数，在其他地方调用</span><br></pre></td></tr></table></figure><p>宏定义可导入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% from &apos;xxx&apos; import xxx %&#125;</span><br></pre></td></tr></table></figure><p>例子1：</p><p>在index.html中定义macro标签，定义一个方法，然后去调用方法，结果是展示商品的id和商品名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro show_goods(id, name) %&#125;</span><br><span class="line">    商品id：&#123;&#123; id &#125;&#125;</span><br><span class="line">    商品名称：&#123;&#123; name &#125;&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; show_goods(&apos;1&apos;, &apos;娃哈哈&apos;) &#125;&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&#123;&#123; show_goods(&apos;2&apos;, &apos;雪碧&apos;) &#125;&#125;</span><br></pre></td></tr></table></figure><p>例子2：</p><p>在index.html页面中定义一个say()方法，然后解析该方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro say() %&#125;</span><br><span class="line">    &lt;h3&gt;今天天气气温回升&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;适合去游泳&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;适合去郊游&lt;/h3&gt;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; say() &#125;&#125;</span><br></pre></td></tr></table></figure><p>例子3：</p><p>定义一个function.html中定义一个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro create_user(name) %&#125;</span><br><span class="line">    创建了一个用户:&#123;&#123; name &#125;&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><p>在index.html中引入function.html中定义的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% from &apos;functions.html&apos; import create_user %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; create_user(&apos;小花&apos;) &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for item in cols %&#125;</span><br><span class="line">aa</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">bb</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>也可以获取循环信息loop</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">loop.first</span><br><span class="line">loop.last</span><br><span class="line">loop.index</span><br><span class="line">loop.revindex</span><br></pre></td></tr></table></figure><p>例子:</p><p>在视图中定义一个视图函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@stu.route(&apos;/scores/&apos;)</span><br><span class="line">def scores():</span><br><span class="line">    scores_list = [21,34,32,67,89,43,22,13]</span><br><span class="line"></span><br><span class="line">    content_h2 = &apos;&lt;h2&gt;今天你们真帅&lt;/h2&gt;&apos;</span><br><span class="line">    content_h3 = &apos;   &lt;h3&gt;今天你们真帅&lt;/h3&gt;   &apos;</span><br><span class="line"></span><br><span class="line">    return render_template(&apos;scores.html&apos;,</span><br><span class="line">                           scores=scores_list,</span><br><span class="line">                           content_h2=content_h2,</span><br><span class="line">                           content_h3=content_h3)</span><br></pre></td></tr></table></figure><p>(该视图函数，在下面讲解的过滤器中任然使用其返回的content_h2等参数)</p><p>首先: 在页面中进行解析scores的列表。题目要求：第一个成绩展示为红色，最后一个成绩展示为绿色，其他的不变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">   &#123;% for score in scores %&#125;</span><br><span class="line">        &#123;% if loop.first %&#125;</span><br><span class="line">            &lt;li style=&quot;color:red;&quot;&gt;&#123;&#123; loop.revindex &#125;&#125;:&#123;&#123; loop.index &#125;&#125;:&#123;&#123; score &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% elif loop.last %&#125;</span><br><span class="line">            &lt;li style=&quot;color:green;&quot;&gt;&#123;&#123; loop.revindex &#125;&#125;:&#123;&#123; loop.index &#125;&#125;:&#123;&#123; score &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            &lt;li&gt; &#123;&#123; loop.revindex &#125;&#125;:&#123;&#123; loop.index &#125;&#125;:&#123;&#123; score &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 变量|过滤器|过滤器... &#125;&#125;</span><br></pre></td></tr></table></figure><p>capitalize 单词首字母大写</p><p>lower 单词变为小写</p><p>upper 单词变为大写</p><p>title</p><p>trim 去掉字符串的前后的空格</p><p>reverse 单词反转</p><p>format</p><p>striptags 渲染之前，将值中标签去掉</p><p>safe 讲样式渲染到页面中</p><p>default</p><p>last 最后一个字母</p><p>first</p><p>length</p><p>sum</p><p>sort</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123; content_h2 &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123; content_h2|safe &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123; content_h2|striptags &#125;&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;li&gt;&#123;&#123; content_h3 &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123; content_h3|length &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123; content_h3|trim|safe &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123; content_h3|trim|length &#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="定义模板"><a href="#定义模板" class="headerlink" title="定义模板"></a>定义模板</h2><h3 id="定义基础模板base-html"><a href="#定义基础模板base-html" class="headerlink" title="定义基础模板base.html"></a>定义基础模板base.html</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;</span><br><span class="line">        &#123;% block title %&#125;</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    &lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://code.jquery.com/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &#123;% block extCSS %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&#123;% block header %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content%&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block footer%&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block extJS %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="定义基础模板base-main-html"><a href="#定义基础模板base-main-html" class="headerlink" title="定义基础模板base_main.html"></a>定义基础模板base_main.html</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;base.html&apos; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block extCSS %&#125;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;css/main.css&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h2 id="静态文件信息配置"><a href="#静态文件信息配置" class="headerlink" title="静态文件信息配置"></a>静态文件信息配置</h2><p><strong>django</strong>：</p><p>第一种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;% static &apos;css/index.css&apos; %&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><p>第二种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/css/index.css&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>flask</strong>：</p><p>第一种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/css/index.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>第二种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;css/index.css&apos;) &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask-–-模板的使用&quot;&gt;&lt;a href=&quot;#Flask-–-模板的使用&quot; class=&quot;headerlink&quot; title=&quot;Flask – 模板的使用&quot;&gt;&lt;/a&gt;Flask – 模板的使用&lt;/h1&gt;&lt;h2 id=&quot;jinja2模板介绍&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Flask" scheme="http://alexyanglong.github.io/categories/Flask/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Flask" scheme="http://alexyanglong.github.io/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask -- 蓝图的使用</title>
    <link href="http://alexyanglong.github.io/2018/06/05/Flask%20--%20%E8%93%9D%E5%9B%BE%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://alexyanglong.github.io/2018/06/05/Flask -- 蓝图的使用/</id>
    <published>2018-06-04T16:00:00.000Z</published>
    <updated>2018-06-25T09:42:16.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-–-蓝图的使用"><a href="#Flask-–-蓝图的使用" class="headerlink" title="Flask – 蓝图的使用"></a>Flask – 蓝图的使用</h1><h2 id="什么是蓝图"><a href="#什么是蓝图" class="headerlink" title="什么是蓝图"></a>什么是蓝图</h2><p>在Flask项目中可以用Blueprint(蓝图)实现模块化的应用，使用蓝图可以让应用层次更清晰，开发者更容易去维护和开发项目。蓝图将作用于相同的URL前缀的请求地址，将具有相同前缀的请求都放在一个模块中，这样查找问题，一看路由就很快的可以找到对应的视图，并解决问题了。</p><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask_blueprint</span><br></pre></td></tr></table></figure><h3 id="实例化蓝图应用"><a href="#实例化蓝图应用" class="headerlink" title="实例化蓝图应用"></a>实例化蓝图应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blue = Blueprint(&apos;first&apos;，__name__)</span><br></pre></td></tr></table></figure><p>注意：Blueprint中传入了两个参数，第一个是蓝图的名称，第二个是蓝图所在的包或模块，<strong>name</strong>代表当前模块名或者包名</p><h3 id="注册蓝图"><a href="#注册蓝图" class="headerlink" title="注册蓝图"></a>注册蓝图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.register_blueprint(blue, url_prefix=&apos;/first&apos;)</span><br></pre></td></tr></table></figure><p>注意：第一个参数即我们定义初始化定义的蓝图对象，第二个参数url_prefix表示该蓝图下，所有的url请求必须以/first开始。这样对一个模块的url可以很好的进行统一管理。</p><h3 id="使用蓝图"><a href="#使用蓝图" class="headerlink" title="使用蓝图"></a>使用蓝图</h3><p>修改视图上的装饰器，修改为@blue.router(‘/’)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@blue.route(&apos;/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def hello():</span><br><span class="line">    # 视图函数</span><br><span class="line">    return &apos;Hello World&apos;</span><br></pre></td></tr></table></figure><p>注意：该方法对应的url为 127.0.0.1:5000/first/</p><h3 id="url-for反向解析"><a href="#url-for反向解析" class="headerlink" title="url_for反向解析"></a>url_for反向解析</h3><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(&apos;蓝图中定义的第一个参数.函数名&apos;, 参数名=value)</span><br></pre></td></tr></table></figure><p>定义跳转：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import url_for, redirect</span><br><span class="line"></span><br><span class="line">@blue.route(&apos;/redirect/&apos;)</span><br><span class="line">def make_redirect():</span><br><span class="line">    # 第一种方法</span><br><span class="line">    # return redirect(&apos;/hello/index/&apos;)</span><br><span class="line">    # 第二种方法，使用url_for() 反向解析</span><br><span class="line">    return redirect(url_for(&apos;first.index&apos;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask-–-蓝图的使用&quot;&gt;&lt;a href=&quot;#Flask-–-蓝图的使用&quot; class=&quot;headerlink&quot; title=&quot;Flask – 蓝图的使用&quot;&gt;&lt;/a&gt;Flask – 蓝图的使用&lt;/h1&gt;&lt;h2 id=&quot;什么是蓝图&quot;&gt;&lt;a href=&quot;#什么是蓝
      
    
    </summary>
    
      <category term="Flask" scheme="http://alexyanglong.github.io/categories/Flask/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Flask" scheme="http://alexyanglong.github.io/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask -- 第一个Flask项目</title>
    <link href="http://alexyanglong.github.io/2018/06/04/Flask%20--%20%E7%AC%AC%E4%B8%80%E4%B8%AAFlask%E9%A1%B9%E7%9B%AE/"/>
    <id>http://alexyanglong.github.io/2018/06/04/Flask -- 第一个Flask项目/</id>
    <published>2018-06-03T16:00:00.000Z</published>
    <updated>2018-06-25T09:35:43.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-–-第一个Flask项目"><a href="#Flask-–-第一个Flask项目" class="headerlink" title="Flask – 第一个Flask项目"></a>Flask – 第一个Flask项目</h1><h2 id="Flask简介"><a href="#Flask简介" class="headerlink" title="Flask简介"></a>Flask简介</h2><p>Flask是一个基于Python实现的web开发的’微‘框架。</p><p>Flask和Django一样，也是一个基于MVC设计模式的Web框架。</p><p>flask流行的主要原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a）有非常齐全的官方文档，上手非常方便</span><br><span class="line">b) 有非常好的拓展机制和第三方的拓展环境，工作中常见的软件都有对应的拓展，自己动手实现拓展也很容易</span><br><span class="line">c) 微型框架的形式给了开发者更大的选择空间</span><br></pre></td></tr></table></figure><h2 id="安装flask"><a href="#安装flask" class="headerlink" title="安装flask"></a>安装flask</h2><p>打开黑屏终端，执行命令。</p><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --no-site-packages falskenv</span><br><span class="line"></span><br><span class="line"># 激活windows下虚拟环境</span><br><span class="line">cd Scripts</span><br><span class="line">activate</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><h2 id="基于flask的最小的应用"><a href="#基于flask的最小的应用" class="headerlink" title="基于flask的最小的应用"></a>基于flask的最小的应用</h2><p>创建项目目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir hello_flask</span><br></pre></td></tr></table></figure><p>进入项目目录，创建hello.py文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def hello_world():</span><br><span class="line">return &apos;Hello World&apos;</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>在黑屏终端中运行：<code>python hello.py</code></p><p>hello.py文件说明：</p><p>a) 初始化应用程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure><p>Flask类构造函数唯一需要的参数就是应用程序的主模块或包。对于大多数应用程序，Python的<strong>name</strong>变量就是那个正确的、你需要传递的值。Flask使用这个参数来确定应用程序的根目录，这样以后可以相对这个路径来找到资源文件。</p><p>b) 路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/&apos;)</span><br></pre></td></tr></table></figure><p>客户端例如web浏览器发送 请求 给web服务，进而将它们发送给Flask应用程序实例。应用程序实例需要知道对于各个URL请求需要运行哪些代码，所以它给Python函数建立了一个URLs映射。这些在URL和函数之间建立联系的操作被称之为 路由 。</p><p>在Flask应程序中定义路由的最便捷的方式是通过显示定义在应用程序实例之上的app.route装饰器，注册被装饰的函数来作为一个 <strong>路由</strong>。</p><p>c) 视图函数：</p><p>在上一个示例给应用程序的根URL注册hello_world()函数作为事件的处理程序。如果这个应用程序被部署在服务器上并绑定了 <a href="http://www.example.com/" target="_blank" rel="noopener">www.example.com</a> 域名，然后在你的浏览器地址栏中输入 <a href="http://www.example.com/" target="_blank" rel="noopener">http://www.example.com</a> 将触发hello_world()来运行服务。客户端接收到的这个函数的返回值被称为 响应 。如果客户端是web浏览器，响应则是显示给用户的文档。</p><p>类似于hello_world()的函数被称作 <strong>视图函数</strong> 。</p><p>d) 动态名称组件路由：</p><p>Flask在路由装饰器中使用特殊的语法支持这些类型的URLs。下面的示例定义了一个拥有动态名称组件的路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/hello/&lt;name&gt;&apos;)</span><br><span class="line">def hello_world(name):</span><br><span class="line">return &apos;Hello World %s&apos; % name</span><br></pre></td></tr></table></figure><p>用尖括号括起来的部分是动态的部分，所以任何URLs匹配到静态部分都将映射到这个路由。当视图函数被调用，Flask发送动态组件作为一个参数。在前面的示例的视图函数中，这个参数是用于生成一个个性的问候作为响应。</p><p>在路由中动态组件默认为字符串，但是可以定义为其他类型。例如，路由/user/int:id只匹配有一个整数在id动态段的URLs。Flask路由支持int、float</p><p>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/hello/&lt;int:id&gt;&apos;)</span><br><span class="line">def gello_stu_id(id):</span><br><span class="line">  return &apos;Hello World id: %s&apos; % id</span><br></pre></td></tr></table></figure><p>e) 启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>注意：<code>__name__ == &#39;__main__&#39;</code>在此处使用是用于确保web服务已经启动当脚本被立即执行。当脚本被另一个脚本导入，它被看做父脚本将启动不同的服务，所以app.run()调用会被跳过。</p><p>一旦服务启动，它将进入循环等待请求并为之服务。这个循环持续到应用程序停止，例如通过按下Ctrl+C。</p><p>有几个选项参数可以给app.run()配置web服务的操作模式。在开发期间，可以很方便的开启debug模式，将激活 debugger 和 reloader 。这样做是通过传递debug为True来实现的。</p><p>run()中参数有如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">debug 是否开启调试模式，开启后修改python的代码会自动重启</span><br><span class="line">port 启动指定服务器的端口号</span><br><span class="line">host主机，默认是127.0.0.1</span><br></pre></td></tr></table></figure><h2 id="修改启动方式，使用命令行参数启动服务"><a href="#修改启动方式，使用命令行参数启动服务" class="headerlink" title="修改启动方式，使用命令行参数启动服务"></a>修改启动方式，使用命令行参数启动服务</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-script</span><br></pre></td></tr></table></figure><p>调整代码 manager = Manager(app=‘自定义的flask对象’)</p><p>启动的地方 manager.run()</p><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hellow.py runserver -h 地址 -p 端口 -d -r</span><br></pre></td></tr></table></figure><p>其中：-h表示地址。-p表示端口。-d表示debug模式。-r表示自动重启</p><h3 id="route规则"><a href="#route规则" class="headerlink" title="route规则"></a>route规则</h3><p>写法：converter:variable_name</p><p>converter类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string 字符串</span><br><span class="line">int 整形</span><br><span class="line">float 浮点型</span><br><span class="line">path 接受路径，接收的时候是str，/也当做字符串的一个字符</span><br><span class="line">uuid 只接受uuid字符串</span><br><span class="line">any 可以同时指定多种路径，进行限定</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/helloint/&lt;int:id&gt;/&apos;)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/getfloat/&lt;float:price&gt;/&apos;)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/getstr/&lt;string:name&gt;/&apos;，methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/getpath/&lt;path:url_path&gt;/&apos;)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/getbyuuid/&lt;uuid:uu&gt;/&apos;，methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br></pre></td></tr></table></figure><p>实现对应的视图函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@blue.route(&apos;/hello/&lt;name&gt;/&apos;)</span><br><span class="line">def hello_man(name):</span><br><span class="line">    print(type(name))</span><br><span class="line">    return &apos;hello name:%s type:%s&apos; % (name, type(name))</span><br><span class="line"></span><br><span class="line">@blue.route(&apos;/helloint/&lt;int:id&gt;/&apos;)</span><br><span class="line">def hello_int(id):</span><br><span class="line">    print(id)</span><br><span class="line">    print(type(id))</span><br><span class="line">    return &apos;hello int: %s&apos; % (id)</span><br><span class="line"></span><br><span class="line">@blue.route(&apos;/index/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&apos;hello.html&apos;)</span><br><span class="line"></span><br><span class="line">@blue.route(&apos;/getfloat/&lt;float:price&gt;/&apos;)</span><br><span class="line">def hello_float(price):</span><br><span class="line">    return &apos;float: %s&apos; % price</span><br><span class="line"></span><br><span class="line">@blue.route(&apos;/getstr/&lt;string:name&gt;/&apos;)</span><br><span class="line">def hello_name(name):</span><br><span class="line">    return &apos;hello name: %s&apos; % name</span><br><span class="line"></span><br><span class="line">@blue.route(&apos;/getpath/&lt;path:url_path&gt;/&apos;)</span><br><span class="line">def hello_path(url_path):</span><br><span class="line">    return &apos;path: %s&apos; % url_path</span><br><span class="line"></span><br><span class="line">@blue.route(&apos;/getuuid/&apos;)</span><br><span class="line">def gello_get_uuid():</span><br><span class="line">    a = uuid.uuid4()</span><br><span class="line">    return str(a)</span><br><span class="line"></span><br><span class="line">@blue.route(&apos;/getbyuuid/&lt;uuid:uu&gt;/&apos;)</span><br><span class="line">def hello_uuid(uu):</span><br><span class="line">    return &apos;uu:%s&apos; % uu</span><br></pre></td></tr></table></figure><h3 id="methods请求方法"><a href="#methods请求方法" class="headerlink" title="methods请求方法"></a>methods请求方法</h3><p>常用的请求类型有如下几种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET : 获取</span><br><span class="line">POST : 创建</span><br><span class="line">PUT : 修改(全部属性都修改)</span><br><span class="line">DELETE : 删除</span><br><span class="line">PATCH : 修改(修改部分属性)</span><br></pre></td></tr></table></figure><p>定义url的请求类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@blue.route(&apos;/getrequest/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flask-–-第一个Flask项目&quot;&gt;&lt;a href=&quot;#Flask-–-第一个Flask项目&quot; class=&quot;headerlink&quot; title=&quot;Flask – 第一个Flask项目&quot;&gt;&lt;/a&gt;Flask – 第一个Flask项目&lt;/h1&gt;&lt;h2 id=&quot;F
      
    
    </summary>
    
      <category term="Flask" scheme="http://alexyanglong.github.io/categories/Flask/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Flask" scheme="http://alexyanglong.github.io/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Django -- 在CentOS 7上部署Django项目</title>
    <link href="http://alexyanglong.github.io/2018/05/31/Django----%E5%9C%A8CentOS-7%E4%B8%8A%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/"/>
    <id>http://alexyanglong.github.io/2018/05/31/Django----在CentOS-7上部署Django项目/</id>
    <published>2018-05-30T16:00:00.000Z</published>
    <updated>2018-06-26T00:54:02.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-在CentOS-7上部署Django项目"><a href="#Django-–-在CentOS-7上部署Django项目" class="headerlink" title="Django – 在CentOS 7上部署Django项目"></a>Django – 在CentOS 7上部署Django项目</h1><p>在部署之前，要确保CentOS 7系统已经安装了MySQL 5.x数据库、Python 3.6.x和Nginx。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>在CentOS 7的根目录 <code>/</code> 下创建一个<code>project</code> 目录，该目录用于存放所有要部署的项目。在<code>project</code> 下在创建<code>conf</code> （用户存放所有的配置文件）、 <code>env</code> （用户存放所有的虚拟环境）、 <code>src</code> （用于存放所有项目的源码）、 <code>logs</code>（用于存放所有的日志文件）。</p><h3 id="同步数据"><a href="#同步数据" class="headerlink" title="同步数据"></a>同步数据</h3><p>使用navicat 将Windows上的数据库同步到CentOS上。首先要确保CentOS上的MySQL可以支持远程连接。</p><h3 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 切换目录</span><br><span class="line">cd /project/env</span><br><span class="line"># 安装虚拟环境  参数：指定虚拟环境中Python的版本（-p 本地Python3的安装目录）</span><br><span class="line">virtualenv --no-site-packages -p /usr/local/python3.6 axfvenv</span><br><span class="line"># 进入虚拟环境目录</span><br><span class="line">cd venv</span><br><span class="line"># 激活虚拟环境</span><br><span class="line">source bin/activate</span><br><span class="line"># 安装环境所需要的包 其中re_install.txt文件中记录的是需要安装包的名称以及对应的版本</span><br><span class="line">pip3 install -r re_install.txt</span><br></pre></td></tr></table></figure><p>Django的项目中，在工程目录下settings.py文件中有一个DEBUG=True参数，如果DEBUG=False则会出现js，css，img无法加载的情况出现。</p><p>原因如下：</p><p>Django框架仅在开发模式下提供静态文件服务。当开启DEBUG模式时，Django内置的服务器是提供静态文件的服务的，所以css等文件访问都没有问题，但是关闭DEBUG模式后，Django便不提供静态文件服务了。</p><h3 id="部署在测试环境中"><a href="#部署在测试环境中" class="headerlink" title="部署在测试环境中"></a>部署在测试环境中</h3><p>在测试环境中一般都直接使用python manage.py runserver的方式去运行项目。其中就涉及到DEBUG=False的修改，静态目录的修改等，具体修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改settings.py配置文件中的DEBUG=False模式，修改ALLOEWD_HOST=[&apos;*&apos;]</span><br></pre></td></tr></table></figure><p>修改项目目录下的urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 引入包</span><br><span class="line">from django.views.static import serve</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...,</span><br><span class="line"></span><br><span class="line"># 增加以下的url路由</span><br><span class="line">    url(r&apos;^static/(?P&lt;path&gt;.*)$&apos;, serve, &#123;&quot;document_root&quot;: settings.STATICFILES_DIRS[0]&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>进入项目目录，使用<code>python manage.py runserver</code> 运行项目。</p><h3 id="部署在正式环境中"><a href="#部署在正式环境中" class="headerlink" title="部署在正式环境中"></a>部署在正式环境中</h3><p>使用 uwsgi + Nginx + MySQL 来部署项目。</p><h4 id="配置nginx-conf文件"><a href="#配置nginx-conf文件" class="headerlink" title="配置nginx.conf文件"></a>配置nginx.conf文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /project/conf</span><br></pre></td></tr></table></figure><p>先编写自己项目的nginx.conf文件如下：</p><p>每一个项目对应有一个自己定义的nginx的配置文件，比如爱鲜蜂项目，定义为axf_nginx.conf 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen       80;  # 端口</span><br><span class="line">     server_name xx.xx.xx.xx localhost;  # 公网ip、域名</span><br><span class="line"></span><br><span class="line">     access_log /project/logs/axf_access.log;  # 连接成功日志文件</span><br><span class="line">     error_log /project/logs/axf_error.log;  # 错误日志</span><br><span class="line"></span><br><span class="line">     location / &#123;</span><br><span class="line">         include uwsgi_params;</span><br><span class="line">         uwsgi_pass 127.0.0.1:8090;  # 和uwsgi通信的端口</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     location /static/ &#123;</span><br><span class="line">         alias /project/src/axf/static/;  # 静态文件</span><br><span class="line">         expires 30d;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>再修改总的nginx的配置文件，让总的nginx文件包含我们自定义的项目的axf_nginx.conf 文件。</p><p>总的nginx配置文件在：/etc/nginx/nginx.conf 中</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_centos_nginx1.png" alt="django_centos_nginx1" title="">                </div>                <div class="image-caption">django_centos_nginx1</div>            </figure><p>以上步骤操作完成以后，需要重启nginx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br><span class="line"></span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><p>如果自定义的axf_nginx.conf文件没有错误的话，查看nginx的运行状态会有如下的结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_centos_nginx2.png" alt="django_centos_nginx2" title="">                </div>                <div class="image-caption">django_centos_nginx2</div>            </figure><h4 id="配置uwsgi文件"><a href="#配置uwsgi文件" class="headerlink" title="配置uwsgi文件"></a>配置uwsgi文件</h4><p>先安装uwsgi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install uwsgi</span><br></pre></td></tr></table></figure><p>然后进行环境变量的配置， 建立软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/python3.6/bin/uwsgi /usr/bin/uwsgi</span><br></pre></td></tr></table></figure><p>在 /project/conf 文件夹下除了包含自定义的axf_nginx.conf文件，还有我们自定义的axf_uwsgi.ini 配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">projectname = axf</span><br><span class="line">base = /project/src</span><br><span class="line"></span><br><span class="line"># 守护进程</span><br><span class="line">master = true</span><br><span class="line"></span><br><span class="line"># 进程个数</span><br><span class="line">processes = 4</span><br><span class="line"></span><br><span class="line"># 虚拟环境</span><br><span class="line">pythonhome = /project/env/axfvenv</span><br><span class="line"></span><br><span class="line"># 项目地址</span><br><span class="line">chdir = %(base)/%(projectname)</span><br><span class="line"></span><br><span class="line"># 指定python版本</span><br><span class="line">pythonpath = /usr/local/python3/bin/python3</span><br><span class="line"></span><br><span class="line"># 指定uwsgi文件</span><br><span class="line">module = %(projectname).wsgi</span><br><span class="line"></span><br><span class="line"># 和nginx通信地址:端口</span><br><span class="line">socket = 127.0.0.1:8090</span><br><span class="line"></span><br><span class="line"># 日志文件地址</span><br><span class="line">logto = /project/logs/axf_uwsgi.log</span><br></pre></td></tr></table></figure><p>运行项目:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /project/conf</span><br><span class="line"></span><br><span class="line">uwsgi --ini axf_uwsgi.ini</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-在CentOS-7上部署Django项目&quot;&gt;&lt;a href=&quot;#Django-–-在CentOS-7上部署Django项目&quot; class=&quot;headerlink&quot; title=&quot;Django – 在CentOS 7上部署Django项目&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django -- 日志</title>
    <link href="http://alexyanglong.github.io/2018/05/29/Django----%E6%97%A5%E5%BF%97/"/>
    <id>http://alexyanglong.github.io/2018/05/29/Django----日志/</id>
    <published>2018-05-28T16:00:00.000Z</published>
    <updated>2018-07-16T07:10:28.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-日志"><a href="#Django-–-日志" class="headerlink" title="Django – 日志"></a>Django – 日志</h1><p>在django中对日志记录提供了很好的支持，日志文件在开发环境中以及在线上环境或者在测试环境中都可以很好的反应程序的执行情况，以及出现bug的时候，准确的定位bug的位置，请求方法，错误原因等。所以说日志对于程序猿来说是一个开发者必备的必须了解且精通的东西。</p><h2 id="日志logging模块"><a href="#日志logging模块" class="headerlink" title="日志logging模块"></a>日志logging模块</h2><p>logging模块可以收集记录错误，警告等调试信息，在程序中可以捕获这些信息，并且甚至可以将错误的重要信息等都可以通过邮件发送给开发者</p><h3 id="logging的组成"><a href="#logging的组成" class="headerlink" title="logging的组成"></a>logging的组成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Loggers</span><br><span class="line"></span><br><span class="line">Handlers</span><br><span class="line"></span><br><span class="line">Filters</span><br><span class="line"></span><br><span class="line">Formatters</span><br></pre></td></tr></table></figure><h3 id="Loggers"><a href="#Loggers" class="headerlink" title="Loggers"></a>Loggers</h3><p>Logger 为日志系统的入口。每个logger 是一个具名的容器，可以向它写入需要处理的消息。</p><p>每个logger 都有一个日志级别。日志级别表示该logger 将要处理的消息的严重性。</p><p>Python 定义以下几种日志级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEBUG：用于调试目的的底层系统信息</span><br><span class="line"></span><br><span class="line">INFO：普通的系统信息</span><br><span class="line"></span><br><span class="line">WARNING：表示出现一个较小的问题。</span><br><span class="line"></span><br><span class="line">ERROR：表示出现一个较大的问题。</span><br><span class="line"></span><br><span class="line">CRITICAL：表示出现一个致命的问题。</span><br></pre></td></tr></table></figure><p>日志级别等级CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET</p><h3 id="Handlers"><a href="#Handlers" class="headerlink" title="Handlers"></a>Handlers</h3><p>Handler 决定如何处理logger 中的每条消息。它表示一个特定的日志行为。</p><p>与logger 一样，handler 也有一个日志级别。如果消息的日志级别小于handler 的级别，handler 将忽略该消息。</p><p>Logger 可以有多个handler，而每个handler 可以有不同的日志级别。</p><h3 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h3><p>Filter 用于对从logger 传递给handler 的日志记录进行额外的控制。</p><h3 id="Formatters"><a href="#Formatters" class="headerlink" title="Formatters"></a>Formatters</h3><p>日志记录需要转换成文本。</p><p>Formatter 表示文本的格式。Fomatter 通常由包含日志记录属性的Python 格式字符串组成；</p><p>你也可以编写自定义的fomatter 来实现自己的格式。</p><p>如下展示了formatters格式: </p><p><img src="./django_logging_model.png" alt="django_logging_model"></p><h2 id="配置logging模块"><a href="#配置logging模块" class="headerlink" title="配置logging模块"></a>配置logging模块</h2><p>在settings.py文件中配置</p><h3 id="创建日志所在目录"><a href="#创建日志所在目录" class="headerlink" title="创建日志所在目录"></a>创建日志所在目录</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_log_path.png" alt="django_log_path" title="">                </div>                <div class="image-caption">django_log_path</div>            </figure><h3 id="定义LOGGING的格式"><a href="#定义LOGGING的格式" class="headerlink" title="定义LOGGING的格式"></a>定义LOGGING的格式</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_logging_format.png" alt="django_logging_format" title="">                </div>                <div class="image-caption">django_logging_format</div>            </figure><h3 id="定义handler的格式"><a href="#定义handler的格式" class="headerlink" title="定义handler的格式"></a>定义handler的格式</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_logging_handler.png" alt="django_logging_handler" title="">                </div>                <div class="image-caption">django_logging_handler</div>            </figure><h3 id="定义loggers的格式"><a href="#定义loggers的格式" class="headerlink" title="定义loggers的格式"></a>定义loggers的格式</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_logging_logger.png" alt="django_logging_logger" title="">                </div>                <div class="image-caption">django_logging_logger</div>            </figure><p>注意：loggers的level的级别一定要大于handlers的级别，否则handlers会忽略掉该信息的。</p><h2 id="使用logging打印日志"><a href="#使用logging打印日志" class="headerlink" title="使用logging打印日志"></a>使用logging打印日志</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_logger_using.png" alt="django_logger_using" title="">                </div>                <div class="image-caption">django_logger_using</div>            </figure><h3 id="查看log文件中日志打印的记录"><a href="#查看log文件中日志打印的记录" class="headerlink" title="查看log文件中日志打印的记录"></a>查看log文件中日志打印的记录</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_logging_log.png" alt="django_logging_log" title="">                </div>                <div class="image-caption">django_logging_log</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-日志&quot;&gt;&lt;a href=&quot;#Django-–-日志&quot; class=&quot;headerlink&quot; title=&quot;Django – 日志&quot;&gt;&lt;/a&gt;Django – 日志&lt;/h1&gt;&lt;p&gt;在django中对日志记录提供了很好的支持，日志文件在开发环境中以及
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django -- 分页、中间件、验证码、文件上传</title>
    <link href="http://alexyanglong.github.io/2018/05/29/Django%20--%20%E5%88%86%E9%A1%B5%E3%80%81%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%81%E9%AA%8C%E8%AF%81%E7%A0%81%E3%80%81%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://alexyanglong.github.io/2018/05/29/Django -- 分页、中间件、验证码、文件上传/</id>
    <published>2018-05-28T16:00:00.000Z</published>
    <updated>2018-06-25T08:21:01.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-分页、中间件、验证码、文件上传"><a href="#Django-–-分页、中间件、验证码、文件上传" class="headerlink" title="Django – 分页、中间件、验证码、文件上传"></a>Django – 分页、中间件、验证码、文件上传</h1><h2 id="中间件Middleware"><a href="#中间件Middleware" class="headerlink" title="中间件Middleware"></a>中间件Middleware</h2><p>中间件：</p><p>a) 是一个轻量级的，底层的插件，可以介入Django的请求和响应的过程（面向切面编程)</p><p>b) 中间件的本质就是一个python类</p><p>c) 面向切面编程(Aspect Oriented Programming)简称AOP，AOP的主要实现目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获取逻辑过程中各部分之间低耦合的隔离效果</p><h3 id="中间件的处理函数"><a href="#中间件的处理函数" class="headerlink" title="中间件的处理函数"></a>中间件的处理函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__init__：没有参数，在服务器响应的第一个请求的时候自动调用，用户确定时候启动该中间件</span><br><span class="line"></span><br><span class="line">process_request(self, request): 在执行视图前被调用，每个请求上都会被调用，不主动进行返回或返回HttpResponse对象</span><br><span class="line"></span><br><span class="line">process_view(self, request, view_func,view_args, view_kwargs):调用视图之前执行，每个请求都会调用，不主动进行返回或返回HttpResponse对象</span><br><span class="line"></span><br><span class="line">process_template_response(self, request, response)：在视图刚好执行完后进行调用，每个请求都会调用，不主动进行返回或返回HttpResponse对象</span><br><span class="line"></span><br><span class="line">process_response(self, request, response):所有响应返回浏览器之前调用，每个请求都会调用，不主动进行返回或返回HttpResponse对象</span><br><span class="line"></span><br><span class="line">process_exception(self, request, exception):当视图抛出异常时调用，不主动进行返回或返回HttpResponse对象</span><br></pre></td></tr></table></figure><h3 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_middleware1.png" alt="django_middleware1" title="">                </div>                <div class="image-caption">django_middleware1</div>            </figure><h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><ol><li><p>在工程目录下创建middleware目录</p></li><li><p>目录中创建一个python文件</p></li><li><p>在根据功能需求，创建切入需求类，重写切入点方法</p></li><li><p>编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthUserMiddleWare</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line"> print(‘xxxx’)</span><br></pre></td></tr></table></figure></li><li><p>启动中间件，在settings中进行配置，MIDDLEWARE中添加middleware.文件名.类名    </p><p><img src="./django_middleware2.png" alt="django_middleware2"></p></li></ol><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h3 id="分页库Paginator的基本语法"><a href="#分页库Paginator的基本语法" class="headerlink" title="分页库Paginator的基本语法"></a>分页库Paginator的基本语法</h3><p>django提供了分页的工具，存在于django.core中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Paginator： 数据分页工具</span><br><span class="line">Page：具体的某一页</span><br></pre></td></tr></table></figure><p>Paginator：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象创建： Paginator(数据集，每一页数据的条数)</span><br></pre></td></tr></table></figure><p>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">count  计算和</span><br><span class="line">num_pages: 页面总和</span><br><span class="line">page_range: 页码列表，从1开始</span><br></pre></td></tr></table></figure><p>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page(页码)：获取的一个page对象，页码不存在则抛出invalidPage的异常</span><br></pre></td></tr></table></figure><p>常见错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">invalidPage：page()传递无效页码</span><br><span class="line">PageNotAnInteger：Page()传递的不是整数</span><br><span class="line">Empty:page()传递的值有效，但是没有数据</span><br></pre></td></tr></table></figure></p><h3 id="page对象"><a href="#page对象" class="headerlink" title="page对象"></a>page对象</h3><p>page：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象获取，通过Paginator的page()方法获得</span><br></pre></td></tr></table></figure><p>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object_list: 当前页面上所有的数据对象</span><br><span class="line">number： 当前页的页码值</span><br><span class="line">paginator: 当前page关联的Paginator对象</span><br></pre></td></tr></table></figure><p>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">has_next()   判断是否有下一页</span><br><span class="line">has_previous():  判断是否有上一页</span><br><span class="line">has_other_pages():  判断是否有上一页或下一页</span><br><span class="line">next_page_number();  返回下一页的页码</span><br><span class="line">previous_page_number(): 返回上一页的页码</span><br><span class="line">len(): 返回当前也的数据的个数</span><br></pre></td></tr></table></figure></p><h3 id="Paginator对象和Page对象的关系"><a href="#Paginator对象和Page对象的关系" class="headerlink" title="Paginator对象和Page对象的关系"></a>Paginator对象和Page对象的关系</h3><p>如下有学生表，学生表中有25条数据，通过分页，每一个6条数据，去实现分页的功能:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_paginator1.png" alt="django_paginator1" title="">                </div>                <div class="image-caption">django_paginator1</div>            </figure><p>代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_paginator2.png" alt="django_paginator1" title="">                </div>                <div class="image-caption">django_paginator1</div>            </figure><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><p>在用户登录，注册以及一些敏感操作的时候，我们为了防止服务器被暴力请求，或爬虫爬取，我们可以使用验证码进行过滤，减轻服务器的压力。</p><p>验证码需要使用绘图Pillow</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pip install Pillow</span><br></pre></td></tr></table></figure><p>核心：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image.ImageDraw.ImageFont</span><br></pre></td></tr></table></figure><p>绘制流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">background = (10,20,30)  RGB颜色</span><br><span class="line"></span><br><span class="line">初始化画布 </span><br><span class="line"></span><br><span class="line">image = Image.new(‘RGB’,(100,50), background)</span><br><span class="line"></span><br><span class="line">获取画布中画笔对象</span><br><span class="line"></span><br><span class="line">draw = ImageDraw.Draw(image, ‘RGB’)</span><br><span class="line"></span><br><span class="line">绘制验证码，随机四个</span><br><span class="line"></span><br><span class="line">导入字体文件path表示路径</span><br><span class="line"></span><br><span class="line">font = ImageFont.truetype(‘path’, size)</span><br><span class="line"></span><br><span class="line">fontcolor = (20,40,60)</span><br><span class="line"></span><br><span class="line">draw.text((x,y), ‘R’, font.fontcolor)  x,y是文字左上角坐标</span><br></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>以上传图片为例，同样也需要安装Pillow库。</p><h3 id="在Model中定义保存图片的字段"><a href="#在Model中定义保存图片的字段" class="headerlink" title="在Model中定义保存图片的字段"></a>在Model中定义保存图片的字段</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, null=<span class="keyword">False</span>)</span><br><span class="line">    gender = models.BooleanField(default=<span class="keyword">True</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    avatar = models.ImageField(upload_to=<span class="string">'upload'</span>)  <span class="comment"># 头像</span></span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>注意：在指定字段为ImageField类型的时候，要指定upload_to参数，表示上传的图片的保存路径。</p><h3 id="配置上传图片的保存路径"><a href="#配置上传图片的保存路径" class="headerlink" title="配置上传图片的保存路径"></a>配置上传图片的保存路径</h3><p>先在根目录下创建media目录。</p><p>在工程目录下的settings.py中配置media_url和media_root路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'/media/'</span>)</span><br></pre></td></tr></table></figure><p>在工程目录下的urls.py文件中配置media的目录为静态目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入static包</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.staticfiles.urls <span class="keyword">import</span> static</span><br><span class="line"><span class="comment"># 导入settings</span></span><br><span class="line"><span class="keyword">from</span> test_p <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    ...,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置media</span></span><br><span class="line">urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><h3 id="实现保存图片"><a href="#实现保存图片" class="headerlink" title="实现保存图片"></a>实现保存图片</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_upload_file1.png" alt="django_paginator1" title="">                </div>                <div class="image-caption">django_paginator1</div>            </figure><p>注意：上传的时候，需要指定form表单的enctype=‘multipart/form-data’</p><h3 id="页面中解析上传的图片信息"><a href="#页面中解析上传的图片信息" class="headerlink" title="页面中解析上传的图片信息"></a>页面中解析上传的图片信息</h3><p>在数据库中用于保存图片的字段s_content的字段中存的是media下的upload/xxx.jpg地址，所以在页面解析的时候，需要加上media的目录，这样才能解析到图片在服务器中的路径。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_upload_file2.png" alt="django_paginator1" title="">                </div>                <div class="image-caption">django_paginator1</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-分页、中间件、验证码、文件上传&quot;&gt;&lt;a href=&quot;#Django-–-分页、中间件、验证码、文件上传&quot; class=&quot;headerlink&quot; title=&quot;Django – 分页、中间件、验证码、文件上传&quot;&gt;&lt;/a&gt;Django – 分页、中间
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django -- 视图</title>
    <link href="http://alexyanglong.github.io/2018/05/28/Django----%E8%A7%86%E5%9B%BE/"/>
    <id>http://alexyanglong.github.io/2018/05/28/Django----视图/</id>
    <published>2018-05-27T16:00:00.000Z</published>
    <updated>2018-06-25T09:08:56.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-视图"><a href="#Django-–-视图" class="headerlink" title="Django – 视图"></a>Django – 视图</h1><p>MVT模式中的V，V代表视图，在Django中的视图主要用来接受web请求，并做出响应。视图的本质就是一个python中的函数 视图的响应分为：以json数据形式返回、以网页的形式返回、重定向到另一个网页、错误视图页面（404,500等）。视图响应的过程：浏览器输入 → django获取信息并去掉ip：端口，身下路径 → urls路由匹配 → 视图响应 → 回馈到浏览器。</p><h2 id="url配置"><a href="#url配置" class="headerlink" title="url配置"></a>url配置</h2><h3 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">settings中制定根级url配置文件，对应的属性ROOT_URLCONF</span><br></pre></td></tr></table></figure><h3 id="urlpatterns"><a href="#urlpatterns" class="headerlink" title="urlpatterns"></a>urlpatterns</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个url实例的对象，全在根配置搞定</span><br><span class="line">    内部由url组成（正则匹配路径）</span><br><span class="line">    url(r&apos;^learn/&apos;, views.learn)</span><br></pre></td></tr></table></figure><h3 id="导入其他的url配置"><a href="#导入其他的url配置" class="headerlink" title="导入其他的url配置"></a>导入其他的url配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在应用中创建urls.py 文件，编写配置规则，在工程urls.py中进行</span><br><span class="line">导入包含</span><br><span class="line">    From django.conf.urls import include</span><br><span class="line">    urlpatterns = [url(r&apos;^xxx/&apos;, include(&apos;app.urls&apos;))]</span><br><span class="line">注意：</span><br><span class="line">    url配置正则注意事项：</span><br><span class="line">        正则匹配时从上到下进行遍历，匹配到就不会继续向后查找了</span><br><span class="line">        匹配的正则前方不需要加反斜杠</span><br><span class="line">        正则钱需要加（r）表示字符串不转义</span><br></pre></td></tr></table></figure><h2 id="获取url路径的参数"><a href="#获取url路径的参数" class="headerlink" title="获取url路径的参数"></a>获取url路径的参数</h2><h3 id="url传递一个参数"><a href="#url传递一个参数" class="headerlink" title="url传递一个参数"></a>url传递一个参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">果需要从url中获取一个值，需要对正则加小括号</span><br><span class="line">url(r&apos;^grade/(\d+)$&apos;, views.getStudent)</span><br><span class="line">注意，url匹配中添加了()取参，在请求调用的函数中必须接收 eg: def getStudent(request, classid)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_views1.png" alt="django_views1" title="">                </div>                <div class="image-caption">django_views1</div>            </figure><h3 id="url传递多个参数"><a href="#url传递多个参数" class="headerlink" title="url传递多个参数"></a>url传递多个参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果需要获取url路径中的多个参数，那就添加多个括号，默认按照顺序匹配路径名字，参数顺序必须固定</span><br><span class="line">定义url中传递三个参数的地址：</span><br><span class="line">    url(r&apos;^news/(\d&#123;4&#125;)/(\d)+/(\d+)$&apos;, views.getNews)</span><br><span class="line">    实现方法：匹配年月日 def getNews(requests, year, month, day)</span><br></pre></td></tr></table></figure><p>例子：查找计算机技术书籍下的脚本语言中的python的书籍信息 </p><p><img src="./django_views2.png" alt="django_views2"></p><h3 id="使用关键词获取参数"><a href="#使用关键词获取参数" class="headerlink" title="使用关键词获取参数"></a>使用关键词获取参数</h3><p>参数也可以使用关键字参数形式,参数顺序可以任意 <code>url(r&#39;news/(?P\d{4})/(?P\d+)/(?P\d+)$&#39;, views.getNews)</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_views3.png" alt="django_views3" title="">                </div>                <div class="image-caption">django_views3</div>            </figure><h2 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h2><h3 id="在模板中进行反解析"><a href="#在模板中进行反解析" class="headerlink" title="在模板中进行反解析"></a>在模板中进行反解析</h3><p>使用关键字参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% &apos;url&apos; &apos;namespace:name&apos; key=value key1=value1 %&#125;</span><br></pre></td></tr></table></figure><h4 id="定义url"><a href="#定义url" class="headerlink" title="定义url"></a>定义url</h4><p>在根urls中 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^apps/&apos;, include(&apos;App.urls&apos;, namespace=&apos;app&apos;))</span><br></pre></td></tr></table></figure><p>在子urls中 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^hello/(\d+)&apos;, views.hello, name=&apos;sayhello&apos;)</span><br></pre></td></tr></table></figure><p>在模板中使用: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&apos;&#123;% url &apos;app:sayhello&apos; grade_id%&#125;&apos;&gt;</span><br></pre></td></tr></table></figure><p>其中grade_id是参数，其中参数可以使用位置参数，也可以使用关键词参数，和配置urls一样</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_views4.png" alt="django_views4" title="">                </div>                <div class="image-caption">django_views4</div>            </figure><h3 id="在views中使用反向解析"><a href="#在views中使用反向解析" class="headerlink" title="在views中使用反向解析"></a>在views中使用反向解析</h3><p>使用反向解析优点 如果在视图中，模板中使用硬编码连接，在url配置发生改变时，需要变更的代码会非常多，这样导致我们的代码结构不是很容易维护，使用反向解析可以提高我们代码的扩展性和可维护性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpResponseRedirect(reverse(namespace:name, kwargs = &#123;key1 : value1, key2 : value2&#125;))</span><br><span class="line"># kwargs 是字典</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_views5.png" alt="django_views5" title="">                </div>                <div class="image-caption">django_views5</div>            </figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="错误视图"><a href="#错误视图" class="headerlink" title="错误视图"></a>错误视图</h3><p>位置：通常在应用下的views.py中定义 错误视图： 404视图（页面没有被找到 page not found） 400视图（客户端操作错误 bad request） 403视图（权限错误 403 forbidden ） 500视图（服务器内部错误 server error）</p><h3 id="自定义错误视图"><a href="#自定义错误视图" class="headerlink" title="自定义错误视图"></a>自定义错误视图</h3><p>####修改debug模式</p><p>在工程的settings中修改debug模式： 注意： 需要在debug=False的情况下才可以 没有关闭debug的情况下会在界面中直接显示错误的信息 </p><p><img src="./django_views6.png" alt="django_views6"></p><h4 id="在templates文件中定义自己的错误样式"><a href="#在templates文件中定义自己的错误样式" class="headerlink" title="在templates文件中定义自己的错误样式"></a>在templates文件中定义自己的错误样式</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_views7.png" alt="django_views7" title="">                </div>                <div class="image-caption">django_views7</div>            </figure><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><h3 id="HttpRequest定义"><a href="#HttpRequest定义" class="headerlink" title="HttpRequest定义"></a>HttpRequest定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">服务器在接收到http请求后，会根据报文创建HttpRequest对象</span><br><span class="line">视图中第一个参数就是HttpRequest对象</span><br><span class="line">Django框架会进行自己的包装，之后传递给视图</span><br><span class="line">属性：</span><br><span class="line">    path        请求的完整路径</span><br><span class="line">    method   请求的方法，通常get，post</span><br><span class="line">    Encoding 编码方式，常用utf-8</span><br><span class="line">    Get          类似字典的参数，包含了get的所有参数</span><br><span class="line">    post       类似字典的参数，包含了post的所有参数</span><br><span class="line">    Files         类似字典的参数，包含了上传的文件</span><br><span class="line">    Cookies    字典，包含了所有的COOKIES</span><br><span class="line">    Session    类似字典，表示会话</span><br><span class="line">    方法： is_ajax()   判断是否是ajax()，通常在移动端和js中</span><br></pre></td></tr></table></figure><h3 id="响应QueryDict类型"><a href="#响应QueryDict类型" class="headerlink" title="响应QueryDict类型"></a>响应QueryDict类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1）类似字典的结构数据，与字典的区别，可以存在相同的键</span><br><span class="line">2）GET和POST都是QueryDict对象</span><br><span class="line">3）QueryDict中数据获取方式</span><br><span class="line">    dict[&apos;name&apos;] 或者dict.get(&apos;name&apos;)</span><br><span class="line">    获取指定key对应的所有值</span><br><span class="line">    dict.getlist(&apos;name&apos;)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_views8.png" alt="django_views8" title="">                </div>                <div class="image-caption">django_views8</div>            </figure><p>如下，获取重复提交数据的方法： </p><p><img src="./django_views9.png" alt="django_views9"></p><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1）可以直接返回一个HttpResponse对象：</span><br><span class="line">    服务器返回给客户端的数据，HttpResponse由程序员自己创建</span><br><span class="line">    不使用模板，直接HttpResponse()</span><br><span class="line">2）可以返回模板</span><br><span class="line">调用模板，进行渲染，直接使用render一步到位</span><br><span class="line">返回表达式：</span><br><span class="line">    render(request, template_name, context)</span><br><span class="line">        request  请求体对象</span><br><span class="line">        template_name  模板路径</span><br><span class="line">        context  字典参数，用来填坑</span><br><span class="line"></span><br><span class="line">3）属性</span><br><span class="line">    Content   返回的内容</span><br><span class="line">    Charset   编码格式</span><br><span class="line">    status_code  响应状态码（200,4xx,5xx）</span><br><span class="line">        4xx 客户端的错误</span><br><span class="line">        5xx 服务端的错误</span><br><span class="line">    content_type   MIME类型，定义传输类型的，比如有xml，html，png等等，比如content_type=&apos;image/jpg&apos;</span><br><span class="line">4）方法</span><br><span class="line">    init    初始化内容</span><br><span class="line">    write(xxx) 直接写到文本</span><br><span class="line">    flush 冲刷缓冲区</span><br><span class="line">    set_cookie(key, value=&apos;&apos;, max_age=None, exprise=None)</span><br><span class="line">    delete_cookie(key)   删除cookie，上面是设置</span><br><span class="line">4）重定向</span><br><span class="line">    HttpResponseRedirect响应重定向：可以实现服务器内部的跳转</span><br><span class="line">    Return HttpResponseRedirect(&apos;/xxx/xxx&apos;)</span><br><span class="line">    使用的时候推荐使用反向解析</span><br><span class="line">    JsonResponse</span><br><span class="line">    使用json数据的请求，通常用在异步请求上jsonResponse(dict)</span><br><span class="line">    content_type是application/json</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-视图&quot;&gt;&lt;a href=&quot;#Django-–-视图&quot; class=&quot;headerlink&quot; title=&quot;Django – 视图&quot;&gt;&lt;/a&gt;Django – 视图&lt;/h1&gt;&lt;p&gt;MVT模式中的V，V代表视图，在Django中的视图主要用来接受we
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django -- 模板</title>
    <link href="http://alexyanglong.github.io/2018/05/27/Django----%E6%A8%A1%E6%9D%BF/"/>
    <id>http://alexyanglong.github.io/2018/05/27/Django----模板/</id>
    <published>2018-05-26T16:00:00.000Z</published>
    <updated>2018-07-09T09:42:13.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-模板"><a href="#Django-–-模板" class="headerlink" title="Django – 模板"></a>Django – 模板</h1><p>在Django框架中，模板是可以帮助开发者快速生成呈现给用户页面的工具。模板的设计方式实现了MVT中V T的解耦，V T有着N：M的关系，一个V可以调用任意T，一个T可以供任意V使用 模板处理分为两个过程：加载、渲染。</p><h2 id="加载静态配置文件"><a href="#加载静态配置文件" class="headerlink" title="加载静态配置文件"></a>加载静态配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在settings.py中最底下有一个叫做static的文件夹，主要用来加载一些模板中用到的资源，提供给全局使用</span><br><span class="line">这个静态文件主要用来配置css，html，图片，文字文件等</span><br><span class="line"></span><br><span class="line">STATIC_URL = &apos;/static/&apos;</span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, &apos;static&apos;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">只后在模板中，首先加载静态文件，之后调用静态，就不用写绝对全路径了</span><br></pre></td></tr></table></figure><h2 id="使用静态配置文件"><a href="#使用静态配置文件" class="headerlink" title="使用静态配置文件"></a>使用静态配置文件</h2><p>a) 加载渲染静态配置文件 模板中声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125; 或者 &#123;% load staticfiles %&#125;</span><br></pre></td></tr></table></figure><p>在引用资源的时候使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% static &apos;xxx&apos; %&#125; xxx就是相当于staticfiles_dirs的一个位置</span><br></pre></td></tr></table></figure><p>b) 直接定义静态配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;/static/images/mvc.png&quot;&gt;</span><br></pre></td></tr></table></figure><p>其中: 展示static文件夹下有一个images文件夹，下面有一个mvc.png的图片</p><h2 id="模板摘要"><a href="#模板摘要" class="headerlink" title="模板摘要"></a>模板摘要</h2><h3 id="模板主要有两个部分"><a href="#模板主要有两个部分" class="headerlink" title="模板主要有两个部分"></a>模板主要有两个部分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTML静态代码</span><br><span class="line">动态插入的代码段（挖坑，填坑）也就是block</span><br></pre></td></tr></table></figure><h3 id="动态填充"><a href="#动态填充" class="headerlink" title="动态填充"></a>动态填充</h3><p>模板中的动态代码断除了做基本的静态填充，还可以实现一些基本的运算，转换和逻辑 如下:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_temp_if.png" alt="django_temp_if" title="">                </div>                <div class="image-caption">django_temp_if</div>            </figure></p><p>模板中的变量： 视图传递给模板的数据 标准标识符规则 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; var &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果变量不存在，则插入空字符串</p><h3 id="模板重的点语法"><a href="#模板重的点语法" class="headerlink" title="模板重的点语法"></a>模板重的点语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象.属性或者方法</span><br><span class="line">索引  （student.0.name）</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_temp_dian.png" alt="django_temp_dian" title="">                </div>                <div class="image-caption">django_temp_dian</div>            </figure><h3 id="模板中的小弊端"><a href="#模板中的小弊端" class="headerlink" title="模板中的小弊端"></a>模板中的小弊端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">调用对象的方法，不能传递参数</span><br></pre></td></tr></table></figure><h3 id="模板的标签"><a href="#模板的标签" class="headerlink" title="模板的标签"></a>模板的标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法 &#123;% tag %&#125;</span><br><span class="line">作用 a）加载外部传入的变量</span><br><span class="line">     b）在输出中创建文本</span><br><span class="line">     c）控制循环或逻辑</span><br></pre></td></tr></table></figure><h2 id="if表达式"><a href="#if表达式" class="headerlink" title="if表达式"></a>if表达式</h2><p>格式1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if 表达式 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;%  endif %&#125;</span><br></pre></td></tr></table></figure><p>格式2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if表达式 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"></span><br><span class="line">&#123;%  endif %&#125;</span><br></pre></td></tr></table></figure><p>格式3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if表达式 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% elif 表达式 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;%  endif %&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_temp_if.png" alt="django_temp_if" title="">                </div>                <div class="image-caption">django_temp_if</div>            </figure><h2 id="for表达式"><a href="#for表达式" class="headerlink" title="for表达式"></a>for表达式</h2><p>格式1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for 变量 in 列表 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% empty %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_temp_for.png" alt="django_temp_for" title="">                </div>                <div class="image-caption">django_temp_for</div>            </figure><p>注意：当列表为空或者不存在时，执行empty之后的语句</p><p><strong>注意一下用法</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; forloop.counter &#125;&#125; 表示当前是第几次循环，从1开始</span><br><span class="line">&#123;&#123; forloop.counter0 &#125;&#125; 表示当前从第几次循环，从0开始</span><br><span class="line">&#123;&#123;forloop.revcounter&#125;&#125;表示当前是第几次循环，倒着数数，到1停</span><br><span class="line">&#123;&#123;forloop.revcounter0&#125;&#125;表示当前是第几次循环，倒着数数，到0停</span><br><span class="line">&#123;&#123;forloop.first&#125;&#125;是否是第一个      布尔值</span><br><span class="line">&#123;&#123;forloop.last&#125;&#125;是否是最后一个      布尔值</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="注释可见，可运行"><a href="#注释可见，可运行" class="headerlink" title="注释可见，可运行"></a>注释可见，可运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注释内容 --&gt;</span><br></pre></td></tr></table></figure><h3 id="单行注释注释不可见，不可运行"><a href="#单行注释注释不可见，不可运行" class="headerlink" title="单行注释注释不可见，不可运行"></a>单行注释注释不可见，不可运行</h3><p>单行注释(页面源码中不会显示注释内容)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 被注释掉的内容 #&#125;</span><br></pre></td></tr></table></figure><h3 id="多行注释注释不可见，不可运行"><a href="#多行注释注释不可见，不可运行" class="headerlink" title="多行注释注释不可见，不可运行"></a>多行注释注释不可见，不可运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% comment %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endcomment %&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_temp_zhushi.png" alt="django_temp_zhushi" title="">                </div>                <div class="image-caption">django_temp_zhushi</div>            </figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>引入过滤器定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;var|过滤器&#125;&#125;</span><br></pre></td></tr></table></figure><p>作用：在变量显示前修改 过滤器有很多，比如add / lower / upper</p><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; p.page | add:5 &#125;&#125;</span><br><span class="line">没有减法的过滤器，但是加法里面可以加负数</span><br><span class="line">&#123;&#123; p.page | add: -5 &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="修改大小写"><a href="#修改大小写" class="headerlink" title="修改大小写"></a>修改大小写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lower / upper : &#123;&#123; p.pname | lower &#125;&#125; 变为小写或者大写</span><br></pre></td></tr></table></figure><h3 id="传参数"><a href="#传参数" class="headerlink" title="传参数"></a>传参数</h3><p>过滤器可以传递参数，参数需要使用引号引起来。比如join：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; student | join &apos;=&apos; &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果值为空则设置默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">默认值：default，格式&#123;&#123; var | default value &#125;&#125;</span><br><span class="line">如果变量没有被提供或者为False，空，会使用默认值</span><br></pre></td></tr></table></figure><h3 id="定制日期格式"><a href="#定制日期格式" class="headerlink" title="定制日期格式"></a>定制日期格式</h3><p>根据制定格式转换日期为字符串，处理时间的就是针对date进行的转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; dateVal | date: &apos;y-m-d h:m:s&apos; &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果过滤器，定义为小写的y，则返回的数据为两位的年。如果写的是大写的Y，则返回的是四位的年<br>定义小写的m，则返回数字的月份，如果定义大写的M，则返回英文<br>定义小写的h，则返回12小时制度的时，如果定义的是大写的H，则返回24小时制度的时</p><h3 id="是否转义"><a href="#是否转义" class="headerlink" title="是否转义"></a>是否转义</h3><p>HTML转义: 将接收到的数据当成普通字符串处理还是当成HTML代码来渲染的一个问题 渲染成html：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; code | safe &#125;&#125; </span><br><span class="line">还可以使用autoscape渲染: &#123;&#123; autoscape off &#125;&#125; &#123;&#123; endautoscape &#125;&#125; </span><br><span class="line">不渲染的话: &#123;&#123; autoscape on &#125;&#125; &#123;&#123; endautoscape &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="乘"><a href="#乘" class="headerlink" title="乘"></a>乘</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% widthratio 数 分母 分子 %&#125;</span><br></pre></td></tr></table></figure><p>如下例子： 求数学成绩的10倍的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% widthratio 10 1 stu.stu_shuxue %&#125;</span><br></pre></td></tr></table></figure><h3 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; num|divisibleby:2 &#125;&#125;</span><br></pre></td></tr></table></figure><p>注意：该语句的意思是，判断num值是否能被2整除，如果能的话返回True，不能的话返回False</p><h3 id="ifeuqal判断相等"><a href="#ifeuqal判断相等" class="headerlink" title="ifeuqal判断相等"></a>ifeuqal判断相等</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ifequal value1 value2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endifqueal %&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_temp_ifequal.png" alt="django_temp_ifequal" title="">                </div>                <div class="image-caption">django_temp_ifequal</div>            </figure><h2 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h2><p>Url 反向解析 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% url &apos;namespace:name&apos; p1 p2 %&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_url_fan.png" alt="django_url_fan" title="">                </div>                <div class="image-caption">django_url_fan</div>            </figure><h2 id="跨站请求CSRF-Cross-Site-Request-Forgery"><a href="#跨站请求CSRF-Cross-Site-Request-Forgery" class="headerlink" title="跨站请求CSRF(Cross Site Request Forgery)"></a>跨站请求CSRF(Cross Site Request Forgery)</h2><p>某些而已网站包含链接，表单，按钮，js利用登录用户在浏览器重的认证信息，进行非法操作，攻击服务，破坏数据<br>理解如下图：</p><p> <img src="./django_csrf.png" alt="django_csrf"></p><ol><li><p>在表单中添加 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% csrf_token %&#125;</span><br></pre></td></tr></table></figure></li><li><p>在settings中的中间件MIDDLEWARE中配置打开 ‘django.middleware.csrf.CsrfViewMiddleware’</p></li></ol><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><h3 id="block挖坑"><a href="#block挖坑" class="headerlink" title="block挖坑"></a>block挖坑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">关键字 block挖坑</span><br><span class="line">&#123;% block xxx %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extends 继承，写在开头位置</span><br><span class="line">&#123;% extends &apos;父模板路径&apos;%&#125;</span><br></pre></td></tr></table></figure><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include 加载模型进行渲染</span><br><span class="line">&#123;% include &apos;模板文件&apos;%&#125;</span><br></pre></td></tr></table></figure><h2 id="模板继承实战"><a href="#模板继承实战" class="headerlink" title="模板继承实战"></a>模板继承实战</h2><h3 id="定义基础模板base-html"><a href="#定义基础模板base-html" class="headerlink" title="定义基础模板base.html"></a>定义基础模板base.html</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            &#123;% block title %&#125;</span><br><span class="line">            &#123;% endblock %&#125;</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">        &#123;% block extCSS %&#125;</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">        &#123;% block extJS %&#125;</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &#123;% block indexbody %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &#123;% block content %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% block footer %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="定义继承base-html的base-main-html模板"><a href="#定义继承base-html的base-main-html模板" class="headerlink" title="定义继承base.html的base_main.html模板"></a>定义继承base.html的base_main.html模板</h3><p>该base_main.html模板主要用于加载一些公共的js或者css，其余模板继承该模板后，可以直接加载定义好的公共的js或者css</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;base.html&apos; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block extJS %&#125;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/static/js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="定义首页index-html"><a href="#定义首页index-html" class="headerlink" title="定义首页index.html"></a>定义首页index.html</h3><p>在首页index.html中使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block extJS %&#125;</span><br><span class="line">&#123;&#123; block.super &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>去加载之前在base_main.html中定义好了的js文件，将它继承过来，那么在index.html中就会加载两个js文件了。实现了将公共的js文件或者css文件单独提炼出去，不需要再每个页面中重复的去写加载js的重复代码了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;base_main.html&apos; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">首页&#123;&#123; user.username &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block extCSS %&#125;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/public.css&quot; /&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block extJS %&#125;</span><br><span class="line">&#123;&#123; block.super &#125;&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/static/js/public.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block indexbody %&#125;</span><br><span class="line">&lt;frameset rows=&quot;100,*&quot; cols=&quot;*&quot; scrolling=&quot;No&quot; framespacing=&quot;0&quot;</span><br><span class="line">frameborder=&quot;no&quot; border=&quot;0&quot;&gt;</span><br><span class="line">&lt;frame src=&quot;&#123;% url &apos;app:head&apos; %&#125;&quot; name=&quot;headmenu&quot; id=&quot;mainFrame&quot; title=&quot;mainFrame&quot;&gt;&lt;!-- 引用头部 --&gt;</span><br><span class="line">&lt;!-- 引用左边和主体部分 --&gt;</span><br><span class="line">&lt;frameset rows=&quot;100*&quot; cols=&quot;220,*&quot; scrolling=&quot;No&quot;</span><br><span class="line">framespacing=&quot;0&quot; frameborder=&quot;no&quot; border=&quot;0&quot;&gt;</span><br><span class="line">&lt;frame src=&quot;&#123;% url &apos;app:left&apos; %&#125;&quot; name=&quot;leftmenu&quot; id=&quot;mainFrame&quot; title=&quot;mainFrame&quot;&gt;</span><br><span class="line">&lt;frame src=&quot;&#123;% url &apos;app:grade&apos; %&#125;&quot; name=&quot;main&quot; scrolling=&quot;yes&quot; noresize=&quot;noresize&quot;</span><br><span class="line">id=&quot;rightFrame&quot; title=&quot;rightFrame&quot;&gt;</span><br><span class="line">&lt;/frameset&gt;</span><br><span class="line">&lt;/frameset&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-模板&quot;&gt;&lt;a href=&quot;#Django-–-模板&quot; class=&quot;headerlink&quot; title=&quot;Django – 模板&quot;&gt;&lt;/a&gt;Django – 模板&lt;/h1&gt;&lt;p&gt;在Django框架中，模板是可以帮助开发者快速生成呈现给用户页面的工
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django -- 模型</title>
    <link href="http://alexyanglong.github.io/2018/05/27/Django----%E6%A8%A1%E5%9E%8B/"/>
    <id>http://alexyanglong.github.io/2018/05/27/Django----模型/</id>
    <published>2018-05-26T16:00:00.000Z</published>
    <updated>2018-06-25T08:39:38.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-模型"><a href="#Django-–-模型" class="headerlink" title="Django – 模型"></a>Django – 模型</h1><p>Django对数据库提供了很好的支持，对不同的数据库，django提供了统一调用的API，我们可以根据不同的业务需求使用不同是数据库。Django中引入了ORM(Objects Relational Mapping)对象关系映射，是一种程序技术，可以简化我们对数据库的操作。</p><h2 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h2><p>重要概念：模型，表，属性，字段</p><p>一个模型类在数据库中对应一张表，在模型类中定义的属性，对应模型对照表中的一个字段。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>在应用文件目录下的<code>models.py</code> 中创建<code>Student</code> 、<code>Grade</code> 两个Model。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grade</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">10</span>, null=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>, auto_now=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, null=<span class="keyword">False</span>)</span><br><span class="line">    gender = models.BooleanField(default=<span class="keyword">True</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>, auto_now=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    grade = models.ForeignKey(Grade)</span><br></pre></td></tr></table></figure><p>然后生成迁移文件、执行迁移文件。</p><p>注意：如果执行<code>python manage.py makemigrations</code>后并没有生成迁移文件，一直提示No changes detected这个结果的话，就要手动的去处理了。有两点处理方式：</p><p>1） 先删除掉<code>__pycache__</code>文件夹</p><p>2） 直接强制的去执行迁移命令，<code>python manage.py makemigrations xxx</code> (xxx就是app的名称)</p><p>3） 查看自动生成的数据库，查看表django_migrations，删掉app字段为xxx的数据(xxx就是app的名称)</p><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>ORM(Objects Relational Mapping)对象关系映射，是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。可以简单理解为翻译机。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_models_orm.jpg" alt="django_models_orm" title="">                </div>                <div class="image-caption">django_models_orm</div>            </figure><h3 id="模型查询"><a href="#模型查询" class="headerlink" title="模型查询"></a>模型查询</h3><p>a) 模型成员objects</p><p>Django默认通过模型的objects对象实现模型数据查询</p><p>b) 过滤器</p><p>查询集表示从数据库获取的对象集合</p><p>查询集可以有多个过滤器</p><p>过滤器就是一个函数，基于所给的参数限制查询的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">从SQL角度来说，查询集合和select语句等价，过滤器就像where条件</span><br><span class="line"></span><br><span class="line">Django有两种过滤器用于筛选记录</span><br><span class="line"></span><br><span class="line">filter  : 返回符合筛选条件的数据集</span><br><span class="line"></span><br><span class="line">exclude   : 返回不符合筛选条件的数据集</span><br></pre></td></tr></table></figure><p>多个filter和exclude可以连接在一起查询</p><p>当然还有如下这些过滤器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">all()            返回所有数据</span><br><span class="line"></span><br><span class="line">filter() 返回符合条件的数据</span><br><span class="line"></span><br><span class="line">exclude()        过滤掉符合条件的数据</span><br><span class="line"></span><br><span class="line">order_by()       排序</span><br><span class="line"></span><br><span class="line">values()         一条数据就是一个字典，返回一个列表</span><br></pre></td></tr></table></figure><p>c) 查询单个数据</p><p>get()：返回一个满足条件的对象。如果没有返回符合条件的对象，会应该模型类DoesNotExist异常，如果找到多个，会引发模型类MultiObjectsReturned异常</p><p>first()：返回查询集中的第一个对象</p><p>last()：返回查询集中的最后一个对象</p><p>count()：返回当前查询集中的对象个数</p><p>exists()：判断查询集中是否有数据，如果有数据返回True，没有返回False</p><p>d) 限制查询集</p><p>限制查询集，可以使用下表的方法进行限制，等同于sql中的limit</p><p>模型名.objects.all()[0:5] 小标不能为负数</p><p>e) 字段查询</p><p>对sql中的where实现，作为方法，filter(),exclude()，get()的参数</p><p>语法：属性名称__比较运算符 = 值</p><p>外键：属性名_id</p><p>注意：like语句中使用%表示通配符。比如sql语句查询 where name like ‘%xxx%’，等同于filter(name_contains=’xxx’)</p><p>f) 比较运算符</p><p>contains：是否包含，大小写敏感</p><p>startswith，endswith：以values开头或者结尾，大小写敏感 以上的运算符前加上i(ignore)就不区分大小写了</p><p>isnull，isnotnull：是否为空。filter(name__isnull=True)</p><p>in：是否包含在范围内。filter(id__in=[1,2,3])</p><p>gt，gte，lt，lte：大于，大于等于，小于，小于等于。filter(age__gt=10)</p><p>pk：代表主键，也就是id。filter(pk=1)</p><p>g) 聚合函数</p><p>agregate()函数返回聚合函数的值</p><p>Avg：平均值</p><p>Count：数量</p><p>Max：最大</p><p>Min：最小</p><p>Sum：求和</p><p>例如: Student.objects.aggregate(Max(‘age’))</p><p>h) F对象/Q对象</p><p><strong>F对象:</strong>可以使用模型的A属性与B属性进行比较</p><p>背景:在模型中有两个字段，分别表示学生成绩A与成绩B，要对成绩AB进行比较计算，就需要使用到F对象。</p><p>例如有如下例子1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 班级中有女生个数字段以及男生个数字段，统计女生数大于男生数的班级</span></span><br><span class="line"></span><br><span class="line">grades = Grade.objects.filter(girlnum__gt=F(<span class="string">'boynum'</span>))</span><br></pre></td></tr></table></figure><p>F对象支持算数运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grades = Grade.objects.filter(girlnum__gt=F(<span class="string">'boynum'</span>) + <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>例子2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询python班下语文成绩超过数学成绩10分的学生</span></span><br><span class="line"></span><br><span class="line">grade = Grade.objects.filter(g_name=<span class="string">'python'</span>).first()</span><br><span class="line">students = grade.student_set.all()</span><br><span class="line"></span><br><span class="line">stu = students.filter(s_yuwen__gt= F(<span class="string">'s_shuxue'</span>) + <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><strong>Q对象:</strong></p><p>Q()对象就是为了将过滤条件组合起来</p><p>当我们在查询的条件中需要组合条件时(例如两个条件“且”或者“或”)时。我们可以使用Q()查询对象</p><p>使用符号&amp;或者|将多个Q()对象组合起来传递给filter()，exclude()，get()等函数</p><p>Q()对象的前面使用字符“~”来代表意义“非”</p><p>例子1:</p><p>查询学生中不是12岁的或者姓名叫张三的学生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student = Student.objects.filter(~Q(age=<span class="number">12</span>) | Q(name=<span class="string">'张三'</span>))</span><br></pre></td></tr></table></figure><p>例子2：</p><p>查询python班语文小于80并且数学小于等于80的学生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grade = Grade.objects.filter(g_name=<span class="string">'python'</span>).first()</span><br><span class="line">students = grade.student_set.all()</span><br><span class="line">stu = students.filter(~Q(s_yuwen__gte=<span class="number">80</span>) &amp; Q(s_shuxue__lte=<span class="number">80</span>))</span><br></pre></td></tr></table></figure><p>例子3：</p><p>查询python班语文大于等于80或者数学小于等于80的学生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grade = Grade.objects.filter(g_name=<span class="string">'python'</span>).first()</span><br><span class="line">students = grade.student_set.all()</span><br><span class="line"></span><br><span class="line">stu = students.filter(Q(s_yuwen__gte=<span class="number">80</span>) | Q(s_shuxue__lte=<span class="number">80</span>))</span><br></pre></td></tr></table></figure><h3 id="模型字段定义属性"><a href="#模型字段定义属性" class="headerlink" title="模型字段定义属性"></a>模型字段定义属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">概述</span><br><span class="line">·django根据属性的类型确定以下信息</span><br><span class="line">·当前选择的数据库支持字段的类型</span><br><span class="line">·渲染管理表单时使用的默认html控件</span><br><span class="line">·在管理站点最低限度的验证</span><br><span class="line"></span><br><span class="line">·django会为表增加自动增长的主键列，每个模型只能有一个主键列，如果使用选项设置某属性为主键列后，则django不会再生成默认的主键列</span><br><span class="line"></span><br><span class="line">·属性命名限制</span><br><span class="line">·遵循标识符规则(不使用python预定义的标识符号，内置函数名，异常等。避免使用下划线等)</span><br><span class="line">·由于django的查询方式，不允许使用连续的下划线</span><br><span class="line"></span><br><span class="line">库</span><br><span class="line">·定义属性时，需要字段类型，字段类型被定义在django.db.models.fields目录下，为了方便使用，被导入到django.db.models中</span><br><span class="line"></span><br><span class="line">·使用方式</span><br><span class="line">·导入from django.db import models</span><br><span class="line">·通过models.Field创建字段类型的对象，赋值给属性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">逻辑删除</span><br><span class="line">·对于重要数据都做逻辑删除，不做物理删除，实现方法是定义isDelete属性，类型为BooleanField，默认值为False</span><br><span class="line"></span><br><span class="line">字段类型</span><br><span class="line">·AutoField</span><br><span class="line">·一个根据实际ID自动增长的IntegerField，通常不指定如果不指定，一个主键字段将自动添加到模型中</span><br><span class="line"></span><br><span class="line">·CharField(max_length=字符长度)</span><br><span class="line">·字符串，默认的表单样式是 TextInput</span><br><span class="line"></span><br><span class="line">·TextField</span><br><span class="line">·大文本字段，一般超过4000使用，默认的表单控件是Textarea</span><br><span class="line"></span><br><span class="line">·IntegerField</span><br><span class="line">·整数</span><br><span class="line"></span><br><span class="line">·DecimalField(max_digits=None, decimal_places=None)</span><br><span class="line">·使用python的Decimal实例表示的十进制浮点数</span><br><span class="line">·参数说明</span><br><span class="line">·DecimalField.max_digits</span><br><span class="line">·位数总数</span><br><span class="line">·DecimalField.decimal_places</span><br><span class="line">·小数点后的数字位数</span><br><span class="line"></span><br><span class="line">·FloatField</span><br><span class="line">·用Python的float实例来表示的浮点数</span><br><span class="line"></span><br><span class="line">·BooleanField</span><br><span class="line">·true/false 字段，此字段的默认表单控制是CheckboxInput</span><br><span class="line"></span><br><span class="line">·NullBooleanField</span><br><span class="line">·支持null、true、false三种值</span><br><span class="line"></span><br><span class="line">·DateField([auto_now=False, auto_now_add=False])</span><br><span class="line">·使用Python的datetime.date实例表示的日期</span><br><span class="line">·参数说明</span><br><span class="line">·DateField.auto_now</span><br><span class="line">·每次保存对象时，自动设置该字段为当前时间，用于&quot;最后一次修改&quot;的时间戳，它总是使用当前日期，默认为false</span><br><span class="line">·DateField.auto_now_add</span><br><span class="line">·当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为false</span><br><span class="line">·说明</span><br><span class="line">·该字段默认对应的表单控件是一个TextInput. 在管理员站点添加了一个JavaScript写的日历控件，和一个“Today&quot;的快捷按钮，包含了一个额外的invalid_date错误消息键</span><br><span class="line">·注意</span><br><span class="line">·auto_now_add, auto_now, and default 这些设置是相互排斥的，他们之间的任何组合将会发生错误的结果</span><br><span class="line"></span><br><span class="line">·TimeField</span><br><span class="line">·使用Python的datetime.time实例表示的时间，参数同DateField</span><br><span class="line"></span><br><span class="line">·DateTimeField</span><br><span class="line">·使用Python的datetime.datetime实例表示的日期和时间，参数同DateField</span><br><span class="line"></span><br><span class="line">·FileField</span><br><span class="line">·一个上传文件的字段</span><br><span class="line"></span><br><span class="line">·ImageField</span><br><span class="line">·继承了FileField的所有属性和方法，但对上传的对象进行校验，确保它是个有效的image</span><br><span class="line"></span><br><span class="line">字段选项</span><br><span class="line">·概述</span><br><span class="line">·通过字段选项，可以实现对字段的约束</span><br><span class="line">·在字段对象时通过关键字参数指定</span><br><span class="line"></span><br><span class="line">·null</span><br><span class="line">·如果为True，则该字段在数据库中是空数据，默认值是 False</span><br><span class="line"></span><br><span class="line">·blank</span><br><span class="line">·如果为True，则该字段允许为空白，默认值是 False</span><br><span class="line"></span><br><span class="line">·注意</span><br><span class="line">·null是数据库范畴的概念，blank是表单验证证范畴的</span><br><span class="line"></span><br><span class="line">·db_column</span><br><span class="line">·字段的名称，如果未指定，则使用属性的名称</span><br><span class="line"></span><br><span class="line">·db_index</span><br><span class="line">·若值为 True, 则在表中会为此字段创建索引</span><br><span class="line"></span><br><span class="line">·default</span><br><span class="line">·默认值</span><br><span class="line"></span><br><span class="line">·primary_key</span><br><span class="line">·若为 True, 则该字段会成为模型的主键字段</span><br><span class="line"></span><br><span class="line">·unique</span><br><span class="line">·如果为 True, 这个字段在表中必须有唯一值</span><br></pre></td></tr></table></figure><h2 id="模型间的关联关系"><a href="#模型间的关联关系" class="headerlink" title="模型间的关联关系"></a>模型间的关联关系</h2><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建学生的模型：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  stu_name = models.CharField(max_length=<span class="number">6</span>, unique=<span class="keyword">True</span>)</span><br><span class="line">  stu_sex = models.BooleanField(default=<span class="number">0</span>)</span><br><span class="line">  stu_birth = models.DateField()</span><br><span class="line">  stu_delete = models.BooleanField(default=<span class="number">0</span>)</span><br><span class="line">  stu_create_time = models.DateField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">  stu_operate_time = models.DateField(auto_now=<span class="keyword">True</span>)</span><br><span class="line">  stu_tel = models.CharField(max_length=<span class="number">11</span>)</span><br><span class="line"> stu_yuwen = models.DecimalField(max_digits=<span class="number">3</span>, decimal_places=<span class="number">1</span>, default=<span class="number">0</span>)</span><br><span class="line">  stu_shuxue = models.DecimalField(max_digits=<span class="number">3</span>, decimal_places=<span class="number">1</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">      db_table = <span class="string">'stu'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建学生拓展的模型：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StuInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">stu_addr = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">stu_age = models.IntegerField()</span><br><span class="line">stu = models.OneToOneField(Student)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">db_table = <span class="string">'stu_info'</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用models.OneToOneField()进行关联</span><br><span class="line">class StuInfo(models.Model):下是通过班级获取学生信</span><br><span class="line">    stu = models.OneToOneField(Student)</span><br><span class="line">注意：在数据中关联字段名称叫stu_id</span><br></pre></td></tr></table></figure><h4 id="通过学生拓展表去获取学生信息"><a href="#通过学生拓展表去获取学生信息" class="headerlink" title="通过学生拓展表去获取学生信息"></a>通过学生拓展表去获取学生信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stuinfo = StuInfo.objects.all().first()</span><br><span class="line">student = stuinfo.stu</span><br><span class="line"></span><br><span class="line">注意：通过拓展表去获取学生的信息的话，语法如下；</span><br><span class="line">    学生拓展表的单条对象.关联字段，即可获取到学生表的数据</span><br></pre></td></tr></table></figure><h4 id="通过学生获取扩展信息1"><a href="#通过学生获取扩展信息1" class="headerlink" title="通过学生获取扩展信息1"></a>通过学生获取扩展信息1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stu = Student.objects.all().first()</span><br><span class="line">stuInfo = stu.stuInfo</span><br><span class="line"></span><br><span class="line">注意：通过学生获取关联表的数据的话，语法如下：</span><br><span class="line">    学生对象.关联的表名，即可获取到关联表的数据</span><br></pre></td></tr></table></figure><h4 id="通过学生获取扩展信息2"><a href="#通过学生获取扩展信息2" class="headerlink" title="通过学生获取扩展信息2"></a>通过学生获取扩展信息2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在关联字段OneToOneField中加入参数related_name=&apos;xxx&apos;</span><br><span class="line"></span><br><span class="line">stu = Student.objects.all().first()</span><br><span class="line">stuInfo = stu.xxx</span><br><span class="line"></span><br><span class="line">注意：通过学生获取关联表的数据的话，语法如下：</span><br><span class="line">    学生对象.关联的字段中定义的related_name参数，即可获取到关联表的数据</span><br></pre></td></tr></table></figure><h4 id="设置对应关系的字段为保护模式"><a href="#设置对应关系的字段为保护模式" class="headerlink" title="设置对应关系的字段为保护模式"></a>设置对应关系的字段为保护模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">models.CASCADE                      默认值</span><br><span class="line">models.PROTECT                保护模式</span><br><span class="line">models.SET_NULL                 置空模式</span><br><span class="line">models.SET_DETAULT          置默认值</span><br><span class="line">models.SET()     删除的时候吃重新动态指向一个实体访问对象元素</span><br><span class="line">on_delete = models.PROTECT</span><br><span class="line"></span><br><span class="line">修改on_delete参数</span><br><span class="line">models.OneToOneField(&apos;Student&apos;, on_delete=models.SET_NULL, null=True)</span><br><span class="line"></span><br><span class="line">在删除student对象的时候，stuinfo的关联字段会设置为空null=True，如下命令去删除student的数据：</span><br><span class="line"></span><br><span class="line">Student.objects.filter(id=1).delete()</span><br></pre></td></tr></table></figure><h4 id="定义on-delete-models-PROTECT"><a href="#定义on-delete-models-PROTECT" class="headerlink" title="定义on_delete=models.PROTECT"></a>定义on_delete=models.PROTECT</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p =  Student.objects.all().first()</span><br><span class="line">p.delete()</span><br><span class="line"></span><br><span class="line">注意：这个时候去执行该业务逻辑的方法的时候会报错</span><br></pre></td></tr></table></figure><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><h4 id="模型-1"><a href="#模型-1" class="headerlink" title="模型"></a>模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个班级类还有学生类，实现一对多的关系：</span></span><br><span class="line"><span class="comment"># 先定义班级类</span></span><br><span class="line">Class Grade(models.Model):</span><br><span class="line">g_name = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义student</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">s_name = models.CharField(max_length=<span class="number">10</span>)</span><br><span class="line">s_age = models.IntegerField(default=<span class="number">1</span>)</span><br><span class="line">s_grade = models.ForeignKey(Grade, on_delete=PROTECT)</span><br></pre></td></tr></table></figure><p>注意：使用models.ForeignKey关联 获取对象元素 <code>grade.student_set</code></p><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><p>语法：通过一获取多的数据</p><p>公式： 一的对象.多的模型_set</p><p>然后在获取数据all(), get(), filter() 等等</p><p>如下先通过学生去获取班级信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stu = Student.objects.first()</span><br><span class="line">stu.stu_grade</span><br></pre></td></tr></table></figure><p>如下是通过班级获取学生信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = Grade.objects.all().first()</span><br><span class="line">g.stugrade.all()   ---&gt; 其中stugrade是定义的related_name参数</span><br></pre></td></tr></table></figure><p>重点： 定义了related_name字段以后，只能通过related_name去反向获取数据，在也不能通过_set方法去获取数据了</p><h4 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">获取班级的学生(通过一获取多)</span><br><span class="line">1. 低性能方法：</span><br><span class="line">g = Grade.objects.all().first()</span><br><span class="line">s = Student.objects.filter(s_grade=g)</span><br><span class="line"></span><br><span class="line">2. 高性能方法：</span><br><span class="line">g = Grate.objects.all().first()</span><br><span class="line">s = g.student_set.all()</span><br></pre></td></tr></table></figure><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><h5 id="获取python班下的所有学生的信息"><a href="#获取python班下的所有学生的信息" class="headerlink" title="获取python班下的所有学生的信息"></a>获取python班下的所有学生的信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class="line">allstu = gs.student_set.all()</span><br></pre></td></tr></table></figure><h5 id="获取python班下语文成绩大于80分的女学生"><a href="#获取python班下语文成绩大于80分的女学生" class="headerlink" title="获取python班下语文成绩大于80分的女学生"></a>获取python班下语文成绩大于80分的女学生</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class="line">allstu = gs.student_set.filter(stu_yuwen__gte=80)</span><br></pre></td></tr></table></figure><h5 id="获取python班下语文成绩超过数学成绩10分的男学生"><a href="#获取python班下语文成绩超过数学成绩10分的男学生" class="headerlink" title="获取python班下语文成绩超过数学成绩10分的男学生"></a>获取python班下语文成绩超过数学成绩10分的男学生</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class="line">allstu = gs.student_set.filter(stu_yuwen__gte=F(&apos;stu_shuxue&apos;) + 10)</span><br></pre></td></tr></table></figure><h5 id="获取出生在80后的男学生，查看他们的班级"><a href="#获取出生在80后的男学生，查看他们的班级" class="headerlink" title="获取出生在80后的男学生，查看他们的班级"></a>获取出生在80后的男学生，查看他们的班级</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class="line">allstu = gs.student_set.filter(stu_birth__gte=&apos;1980-01-01&apos;, stu_birth__lte=&apos;1990-01-01&apos;)</span><br></pre></td></tr></table></figure><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><h4 id="M-N-模型"><a href="#M-N-模型" class="headerlink" title="M:N 模型"></a>M:N 模型</h4><p>定义购物车，用户的例子实现多对多： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建用户模型: </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsUser</span><span class="params">(models.Model)</span>:</span> </span><br><span class="line">u_name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2. 创建商品模型:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">g_name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">g_user = models.ManyToManyField(User)</span><br></pre></td></tr></table></figure><h4 id="对多表结构"><a href="#对多表结构" class="headerlink" title="对多表结构"></a>对多表结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">多对多关系：</span><br><span class="line">1. 生成表的时候会多生成一张表（实际会有三张表）</span><br><span class="line">2. 生成的表是专门用来维护关系的</span><br><span class="line">3. 生成的表是使用两个外键来维护多对多的关系</span><br><span class="line">4. 两个一对多的关系来实现多对多的实现　　　</span><br><span class="line">5. 删除一个表的数据的话，中间关联表也要删除相关的信息</span><br></pre></td></tr></table></figure><h4 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h4><h5 id="获取第一个用户购买了那些商品"><a href="#获取第一个用户购买了那些商品" class="headerlink" title="获取第一个用户购买了那些商品"></a>获取第一个用户购买了那些商品</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gu = GoodsUser.objects.all().first()</span><br><span class="line">allstu = gu.goods_set.all()</span><br></pre></td></tr></table></figure><h5 id="获取指定商品的购买用户信息"><a href="#获取指定商品的购买用户信息" class="headerlink" title="获取指定商品的购买用户信息"></a>获取指定商品的购买用户信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = Goods.objects.filter(id=1)[0]</span><br><span class="line">g.g_user.all()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-模型&quot;&gt;&lt;a href=&quot;#Django-–-模型&quot; class=&quot;headerlink&quot; title=&quot;Django – 模型&quot;&gt;&lt;/a&gt;Django – 模型&lt;/h1&gt;&lt;p&gt;Django对数据库提供了很好的支持，对不同的数据库，django提
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django -- Admin管理模块的使用</title>
    <link href="http://alexyanglong.github.io/2018/05/25/Django----Admin%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://alexyanglong.github.io/2018/05/25/Django----Admin管理模块的使用/</id>
    <published>2018-05-24T16:00:00.000Z</published>
    <updated>2018-06-25T08:22:06.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-Admin管理模块的使用"><a href="#Django-–-Admin管理模块的使用" class="headerlink" title="Django – Admin管理模块的使用"></a>Django – Admin管理模块的使用</h1><p>Djang自身集成了管理后台，在管理后台中可以对我们自定义model进行CRUD操作，也能进行列表展示解析，分页等等。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>先创建一个项目test_p，在项目中创建应用testapp，将项目配置这些配置好。</p><h3 id="创建一个model"><a href="#创建一个model" class="headerlink" title="创建一个model"></a>创建一个model</h3><p>在应用文件目录下的<code>models.py</code> 中创建<code>Student</code> 、<code>Grade</code> 两个Model。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grade</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">10</span>, null=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>, auto_now=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, null=<span class="keyword">False</span>)</span><br><span class="line">    gender = models.BooleanField(default=<span class="keyword">True</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>, auto_now=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    grade = models.ForeignKey(Grade)</span><br></pre></td></tr></table></figure><h3 id="admin管理后台的url"><a href="#admin管理后台的url" class="headerlink" title="admin管理后台的url"></a>admin管理后台的url</h3><p>在项目文件目录下可以看到路由配置文件<code>urls.py</code>中有一个admin的url地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="创建admin后台的用户密码"><a href="#创建admin后台的用户密码" class="headerlink" title="创建admin后台的用户密码"></a>创建admin后台的用户密码</h3><p>在创建用户之前，先要在终端中使用命令迁移数据库。点击IDE最下方的Terminal，进入终端，先检查虚拟环境是否正确，若不正确，先配置虚拟环境。</p><p>在终端中输入命令：</p><p><code>python manage.py makemigrations</code> 生成迁移文件</p><p><code>python manage.py migrate</code> 执行迁移文件</p><p>数据库迁移成功后，开始创建用户，命令如下：</p><p><code>python manage.py createsuperuser</code>  创建超级用户</p><p>接着要填写用户名、邮箱、密码、确认密码。如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./Admin——创建用户.png" alt="Admin——创建用户" title="">                </div>                <div class="image-caption">Admin——创建用户</div>            </figure><p>创建用户名成功之后，在浏览器中输入 <code>127.0.0.1:8000/admin/</code> 或 <code>localhost:8000/admin/</code> 进行登录。</p><h2 id="在管理后台中管理模型对象"><a href="#在管理后台中管理模型对象" class="headerlink" title="在管理后台中管理模型对象"></a>在管理后台中管理模型对象</h2><p>需要在应用文件目录下的<code>admin.py</code> 文件中注册要进行管理的Model。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># admin.site.register(模型名)</span></span><br><span class="line"></span><br><span class="line">admin.site.register(Grade)</span><br><span class="line">admin.site.register(Student)</span><br></pre></td></tr></table></figure><p>当然也可以继承admin.ModelAdmin，编写自己的admin，来自定义Model的后台管理展示界面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_gender</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.gender:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'男'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'女'</span></span><br><span class="line"></span><br><span class="line">    set_gender.short_description = <span class="string">'性别'</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'name'</span>, set_gender]</span><br><span class="line">    list_filter = [<span class="string">'gender'</span>]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>]</span><br><span class="line">    list_per_page = <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">admin.site.register(Student, StudentAdmin)</span><br></pre></td></tr></table></figure><p>说明：</p><p><code>short_description</code> ：表示此字段在界面显示的名称</p><p><code>list_display</code> ：表示需要显示的字段</p><p><code>list_filter</code> ：表示可以进行过滤的字段</p><p><code>search_fields</code> ：表示可以进行搜索的字段</p><p><code>list_per_page</code> ：表示分页的条数</p><p><code>ordering</code> ：表示排序的字段</p><p>界面显示如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./Admin——Model管理界面.png" alt="Admin——Model管理界面" title="">                </div>                <div class="image-caption">Admin——Model管理界面</div>            </figure><p>此外，还可以使用装饰器来实现自定义Model的后台管理展示界面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @admin.register(模型名)</span></span><br><span class="line"><span class="meta">@admin.register(Student)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_gender</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.gender:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'男'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'女'</span></span><br><span class="line"></span><br><span class="line">    set_gender.short_description = <span class="string">'性别'</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'name'</span>, set_gender]</span><br><span class="line">    list_filter = [<span class="string">'gender'</span>]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>]</span><br><span class="line">    list_per_page = <span class="number">10</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-Admin管理模块的使用&quot;&gt;&lt;a href=&quot;#Django-–-Admin管理模块的使用&quot; class=&quot;headerlink&quot; title=&quot;Django – Admin管理模块的使用&quot;&gt;&lt;/a&gt;Django – Admin管理模块的使用&lt;/
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django -- 创建应用、修改配置</title>
    <link href="http://alexyanglong.github.io/2018/05/23/Django%20--%20%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8%E3%80%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE/"/>
    <id>http://alexyanglong.github.io/2018/05/23/Django -- 创建应用、修改配置/</id>
    <published>2018-05-22T16:00:00.000Z</published>
    <updated>2018-06-25T07:36:22.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-创建应用、修改配置"><a href="#Django-–-创建应用、修改配置" class="headerlink" title="Django – 创建应用、修改配置"></a>Django – 创建应用、修改配置</h1><h2 id="在黑屏终端中创建应用"><a href="#在黑屏终端中创建应用" class="headerlink" title="在黑屏终端中创建应用"></a>在黑屏终端中创建应用</h2><p>在创建应用APP之前，先创建一个Django的项目。</p><p>开启黑屏终端，进入项目所在目录，执行创建APP命令（注意要在虚拟环境中执行）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;project directory&gt;</span><br><span class="line">python manage.py startapp app-name</span><br></pre></td></tr></table></figure><p>这样，一个应用就创建成功。但是这个应用APP还不能应用于项目，需要在Django项目目录中进行配置（稍后再说）。</p><h2 id="使用PyCharm创建项目与应用"><a href="#使用PyCharm创建项目与应用" class="headerlink" title="使用PyCharm创建项目与应用"></a>使用PyCharm创建项目与应用</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>打开PyCharm软件，点击“Create New Project”</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./创建项目1.png" alt="创建项目1" title="">                </div>                <div class="image-caption">创建项目1</div>            </figure><p>选择左侧“Django”选项，在右侧选择项目存放路径以及给项目命名，之后选择项目的解释器环境，这里推荐使用自己创建的虚拟环境，不要使用本地环境或者默认创建的虚拟环境。最后是让Django自动创建templates模板目录，当然这里也可以直接创建应用APP。也可以稍后通过命令创建。接下来点击“Create”按钮，开始创建项目。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./创建项目2.png" alt="创建项目2" title="">                </div>                <div class="image-caption">创建项目2</div>            </figure><p>等待项目创建成功，项目在创建时，会下载一些第三方库，比如django框架的库，所以会花费一些时间。耐心等待…… 出现下面界面，项目创建成功。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./创建项目3.png" alt="创建项目3" title="">                </div>                <div class="image-caption">创建项目3</div>            </figure><p>项目文件说明：</p><p><code>manage.py</code>  是Django用于管理本项目的管理集工具，之后站点运行，数据库自动生成，数据表的修改等都是通过运行该文件完成。</p><p><code>__init__.py</code> 指明该目录结构是一个python包，暂无内容，在后期会初始化一些工具会使用到。</p><p><code>seetings.py</code> Django项目的配置文件，其中定义了本项目的引用组件，项目名，数据库，静态资源，调试模式，域名限制等。</p><p><code>urls.py</code> 项目的URL路由映射，实现客户端请求url由哪个模块进行响应。</p><p><code>wsgi.py</code> 定义WSGI接口信息，通常本文件生成后无需改动</p><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>项目创建好以后，就可以创建应用了（如果之前在选项中填写了应用，就会由Django自动创建应用）。在PyCharm界面的最下方，点击“Terminal”选项，进入终端，注意查看虚拟环境是否是正确的。之后在命令行中输入<code>python manage.py startapp app-name</code> 就创建了一个应用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./创建应用1.png" alt="创建应用1" title="">                </div>                <div class="image-caption">创建应用1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./创建应用2.png" alt="创建应用2" title="">                </div>                <div class="image-caption">创建应用2</div>            </figure><h3 id="激活应用"><a href="#激活应用" class="headerlink" title="激活应用"></a>激活应用</h3><p>刚创建的应用，需要在项目配置文件中进行配置才能使用。首先需要在项目目录中的“settings.py”文件中的<code>INSTALLED_APPS</code> 中添加应用的名字。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./配置1.png" alt="配置1" title="">                </div>                <div class="image-caption">配置1</div>            </figure><h3 id="配置语言与时区"><a href="#配置语言与时区" class="headerlink" title="配置语言与时区"></a>配置语言与时区</h3><p>还是在项目目录中的“settings.py”文件中进行配置。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./配置2.png" alt="配置2" title="">                </div>                <div class="image-caption">配置2</div>            </figure><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><p>在“settings.py”文件中找到 <code>DATABASES</code> </p><p><img src="./配置3.png" alt="配置3"></p><p>改为：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./配置4.png" alt="配置4" title="">                </div>                <div class="image-caption">配置4</div>            </figure><p>其中 ENGINE 表示数据库引擎，即使用哪种数据库，这里使用mysql数据库，NAME 表示数据库名，USER 表示用登录mysql的用户名，PASSWORD 表示登录的密码，HOST 表示服务器主机的地址，PORT 表示端口。</p><p>注意：如果要使用mysql，需要在虚拟环境中安装第三方库<code>pip install PyMySQL</code> ，同时需要在项目文件目录（不是应用文件目录）中的<code>__init__.py</code> 文件中做如下修改，完成数据库的驱动加载：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h3 id="配置模板目录"><a href="#配置模板目录" class="headerlink" title="配置模板目录"></a>配置模板目录</h3><p>这里的模板就是HTML页面。在“settings.py”文件中找到 <code>TEMPLATES</code> ，给 DIRS 字段添加如下信息。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./配置5.png" alt="配置5" title="">                </div>                <div class="image-caption">配置5</div>            </figure><h3 id="配置静态文件目录"><a href="#配置静态文件目录" class="headerlink" title="配置静态文件目录"></a>配置静态文件目录</h3><p>现在项目的根目录下创建一个 <code>static</code> 目录，之后在“settings.py”文件中进行配置。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./配置6.png" alt="配置6" title="">                </div>                <div class="image-caption">配置6</div>            </figure><p>到这里，就可以在应用中编写<code>models</code>，生成迁移：<code>python manage.py makemigrations 应用名</code> ，执行迁移：<code>python manage.py migrate</code> ，编写<code>views</code> ，修改<code>urls</code> ，创建<code>template</code> 来实现自己的Web应用了。</p><p>当然，如果需要添加自己定义的中间件也可以在 “setting.py” 文件中的 <code>MIDDLEWARE</code> 中进行添加；如果需要保存用户上传的图片、音视频文件也是要在 “setting.py” 文件中添加配置（一般写在配置静态文件的后面）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 现在项目根目录下创建 media 目录</span></span><br><span class="line"><span class="comment"># 配置上传的媒体文件路径 （图片、音视频）</span></span><br><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'media'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在项目目录下的urls中配置：</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.staticfiles.urls <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> stu_pro.settings <span class="keyword">import</span> MEDIA_URL, MEDIA_ROOT</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">urlpatterns += static(MEDIA_URL, document_root=MEDIA_ROOT)</span><br></pre></td></tr></table></figure><p>还有在开发环境中要将 “setting.py” 文件中的 <code>DEBUG</code> 设置为 <code>True</code> ，表示启用Debug模式，这样可以详细的看到在在开发过程中出现的错误，以便于修改。在生产环境中将 <code>DEBUG</code> 设置为 <code>False</code> 。此外还有 <code>ALLOWED_HOSTS</code> 表示允许访问的主机列表，一般设为<code>ALLOWED_HOSTS = [&#39;*&#39;]</code> 。</p><p>还有一个最重要的，就是日志，也需要在  “setting.py”  中进行配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建存储日志文件地址</span></span><br><span class="line">LOG_PATH = os.path.join(BASE_DIR, <span class="string">'log'</span>)</span><br><span class="line"><span class="comment"># 判断log目录存不存在，不存在就创建</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(LOG_PATH):</span><br><span class="line">    os.mkdir(LOG_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="comment"># version 只能为1</span></span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment"># disable_existing_loggers 的值默认为True，那么配置中的所有 logger 都将被禁用</span></span><br><span class="line">    <span class="comment"># logger 的禁用与删除不同，logger任然存在，但是将默默丢弃任何传递给它的信息，也不会传播到上一级</span></span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="keyword">False</span>,</span><br><span class="line">    <span class="string">'formatters'</span>: &#123;</span><br><span class="line">        <span class="string">'verbose'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(levelname)s %(asctime)s %(module)s %(process)s %(thread)s %(message)s'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'simple'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(levelname)s %(message)s'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'stu_handlers'</span>: &#123;</span><br><span class="line">            <span class="comment"># 如果loggers的处理级别小于handlers的处理级别，则handler忽略该信息</span></span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="comment"># 指定文件类型为RotatingFileHandler，当日志文件大小超过maxBytes后，会自动切割</span></span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,</span><br><span class="line">            <span class="comment"># 输出文件地址</span></span><br><span class="line">            <span class="string">'filename'</span>: <span class="string">'%s/log.txt'</span> % LOG_PATH,</span><br><span class="line">            <span class="comment"># 使用哪一种日志配置格式</span></span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'verbose'</span>,</span><br><span class="line">            <span class="comment"># 指定每个日志文件的大小</span></span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'loggers'</span>:&#123;</span><br><span class="line">        <span class="string">'console'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'stu_handlers'</span>],</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</span><br><span class="line">            <span class="comment"># propagate=0，表示输出日志，但不传递消息</span></span><br><span class="line">            <span class="comment"># propagate=1，表示输出日志，同时消息往更高级别的地方传递。root为最高级别。</span></span><br><span class="line">            <span class="string">'propagate'</span>: <span class="keyword">False</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>logging模块可以收集记录错误，警告等调试信息，在程序中可以捕获这些信息，并且甚至可以将错误的重要信息等都可以通过邮件发送给开发者。</p><p>logging的组成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Loggers</span><br><span class="line">Handlers</span><br><span class="line">Filters</span><br><span class="line">Formatters</span><br></pre></td></tr></table></figure><p>Loggers：</p><p>Logger 为日志系统的入口。每个logger 是一个具名的容器，可以向它写入需要处理的消息。</p><p>每个logger 都有一个日志级别。日志级别表示该logger 将要处理的消息的严重性。</p><p>Python 定义以下几种日志级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG：用于调试目的的底层系统信息</span><br><span class="line">INFO：普通的系统信息</span><br><span class="line">WARNING：表示出现一个较小的问题。</span><br><span class="line">ERROR：表示出现一个较大的问题。</span><br><span class="line">CRITICAL：表示出现一个致命的问题。</span><br></pre></td></tr></table></figure><p>日志级别等级CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET</p><p>Handlers：</p><p>Handler 决定如何处理logger 中的每条消息。它表示一个特定的日志行为。</p><p>与logger 一样，handler 也有一个日志级别。如果消息的日志级别小于handler 的级别，handler 将忽略该消息。</p><p>Logger 可以有多个handler，而每个handler 可以有不同的日志级别。</p><p>Filters：</p><p>Filter 用于对从logger 传递给handler 的日志记录进行额外的控制。</p><p>Formatters：</p><p>日志记录需要转换成文本。</p><p>Formatter 表示文本的格式。Fomatter 通常由包含日志记录属性的Python 格式字符串组成；</p><p>你也可以编写自定义的fomatter 来实现自己的格式。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_logging1.png" alt="django_logging1" title="">                </div>                <div class="image-caption">django_logging1</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-创建应用、修改配置&quot;&gt;&lt;a href=&quot;#Django-–-创建应用、修改配置&quot; class=&quot;headerlink&quot; title=&quot;Django – 创建应用、修改配置&quot;&gt;&lt;/a&gt;Django – 创建应用、修改配置&lt;/h1&gt;&lt;h2 id=&quot;在
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django -- 创建第一个Django项目</title>
    <link href="http://alexyanglong.github.io/2018/05/22/Django----%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AADjango%E9%A1%B9%E7%9B%AE/"/>
    <id>http://alexyanglong.github.io/2018/05/22/Django----创建第一个Django项目/</id>
    <published>2018-05-21T16:00:00.000Z</published>
    <updated>2018-06-25T07:36:44.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-创建第一个Django项目"><a href="#Django-–-创建第一个Django项目" class="headerlink" title="Django – 创建第一个Django项目"></a>Django – 创建第一个Django项目</h1><p>在开始创建Django项目之前，先要理解两个概念：请求与响应、MVC（在Django中称为MTV）。</p><h2 id="什么是请求与响应"><a href="#什么是请求与响应" class="headerlink" title="什么是请求与响应"></a>什么是请求与响应</h2><p>请求：又称为HTTP请求，指从客户端到服务器端的请求消息。包括：请求行、请求头、消息体。消息行中，有对资源的请求方法、资源的标识符及使用的协议。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST http://xg.mediportal.com.cn/health/sms/verify/telephone HTTP/1.1</span><br></pre></td></tr></table></figure><p>请求头中包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: DGroupPatient/1.052701.230/Dalvik/2.1.0 (Linux; U; Android 5.1.1; KIW-AL10 Build/HONORKIW-AL10)</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line">Host: xg.mediportal.com.cn</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">Content-Length: 33</span><br></pre></td></tr></table></figure><p>请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户端要向服务器端发送的信息，当然如果不需要向服务器端发送信息，也可以没有。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">telephone=15527177736&amp;userType=1&amp;</span><br></pre></td></tr></table></figure><p>响应：也成为HTTP响应，指从服务器端到客户端的响应消息。与HTTP请求相似，HTTP响应也由3个部分构成，分别是：状态行、响应头、响应正文。状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure><p>响应头主要包含服务器发送的数据相关信息，比如返回数据的类型、长度等等。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Date: Tue, 31 May 2016 02:09:24 GMT</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Headers: X-Requested-With,access_token,access-token,content-type,multipart/form-data,application/x-www-form-urlencoded</span><br><span class="line">Access-Control-Allow-Methods: GET,POST,OPTIONS</span><br><span class="line">Content-Length: 49</span><br></pre></td></tr></table></figure><p>响应头和响应正文之间也有一个空行，表示响应头结束。响应正文包含了服务器端向客户端发送的数据。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;&quot;resultCode&quot;:1,&quot;resultMsg&quot;:&quot;手机号未注册&quot;&#125;</span><br></pre></td></tr></table></figure><p>通过下面的图理解请求与响应的流程：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./请求与响应.jpeg" alt="请求与响应" title="">                </div>                <div class="image-caption">请求与响应</div>            </figure><h2 id="什么是MVC"><a href="#什么是MVC" class="headerlink" title="什么是MVC"></a>什么是MVC</h2><p>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。</p><p>目标：将模型（数据）和视图（显示）解耦合。</p><p>通过控制器，将数据和显示分离，好处是同一个视图可以加载不同的模型，同一个模型也可以显示成不同的视图。</p><p>稍具规模的系统都会使用MVC架构或者它的变体（MVP、MVVM等）。</p><p>通过下面的图来理解MVC的工作模式：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./MVC.jpeg" alt="MVC" title="">                </div>                <div class="image-caption">MVC</div>            </figure><p>在Django中将这种模式称为MTV ：模型（Model）- 模板（Template，对应视图） - 视图（View，对应控制器）</p><h2 id="创建第一个Django项目"><a href="#创建第一个Django项目" class="headerlink" title="创建第一个Django项目"></a>创建第一个Django项目</h2><p>Windows下步骤：</p><p>（在黑屏终端中执行）</p><p><code>python -m venv 虚拟环境名</code>        创建项目虚拟环境</p><p><code>cd 虚拟环境文件名/Scripts</code>        进入虚拟环境</p><p><code>activate.bat</code>                       激活虚拟环境</p><p><code>pip install django==版本号</code>            在虚拟环境下安装django      <code>django-admin --version</code>  查看版本</p><p><code>django-admin startproject 项目名 .</code>  创建django项目</p><p><code>python manage.py runserver</code>         开启服务</p><p>Linux下步骤：</p><p><code>mk 项目目录</code>                    创建django项目目录</p><p><code>cd 项目目录</code>                    进入项目目录</p><p><code>python -m venv 虚拟环境名</code>        创建项目虚拟环境</p><p><code>source 虚拟环境目录/bin/activate</code>    激活虚拟环境</p><p><code>python -m pip install --upgrade pip</code>    更新pip</p><p><code>pip install django==版本号</code>        在虚拟环境下安装django       <code>django-admin --version</code>  查看版本</p><p><code>django-admin startproject 项目名 .</code>    创建django项目</p><p><code>python manage.py runserver</code>         开启服务</p><p>开启了服务之后，在浏览器中输入 <code>127.0.0.1:8000</code> 或 <code>localhost:8000</code> 回车，出现Django界面，第一个Django项目就创建成功了。如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./Django运行.png" alt="Django运行" title="">                </div>                <div class="image-caption">Django运行</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-创建第一个Django项目&quot;&gt;&lt;a href=&quot;#Django-–-创建第一个Django项目&quot; class=&quot;headerlink&quot; title=&quot;Django – 创建第一个Django项目&quot;&gt;&lt;/a&gt;Django – 创建第一个Django
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>使用Python代码操作Redis</title>
    <link href="http://alexyanglong.github.io/2018/05/19/%E4%BD%BF%E7%94%A8Python%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CRedis/"/>
    <id>http://alexyanglong.github.io/2018/05/19/使用Python代码操作Redis/</id>
    <published>2018-05-18T16:00:00.000Z</published>
    <updated>2018-06-05T11:29:34.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Python代码操作Redis"><a href="#使用Python代码操作Redis" class="headerlink" title="使用Python代码操作Redis"></a>使用Python代码操作Redis</h1><p>Redis是一款非关系型存储数据库，具有读取速度快的特性，所以常用于做高速缓存。</p><h2 id="连接Redis"><a href="#连接Redis" class="headerlink" title="连接Redis"></a>连接Redis</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    config = &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'localhost'</span>,<span class="comment"># redis服务器地址</span></span><br><span class="line">        <span class="string">'port'</span>: <span class="number">6379</span>,<span class="comment"># redis服务器端口</span></span><br><span class="line">        <span class="string">'db'</span>: <span class="number">0</span>,<span class="comment"># 使用的数据库编号</span></span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'123456'</span><span class="comment"># 密码</span></span><br><span class="line">    &#125;</span><br><span class="line">    client = redis.Redis(**config)</span><br><span class="line">    <span class="keyword">if</span> client.ping():<span class="comment"># 判断是否连接成功</span></span><br><span class="line">        client.set(<span class="string">'name'</span>, <span class="string">'alex'</span>)</span><br><span class="line">        print(client.get(<span class="string">'name'</span>))<span class="comment"># b'alex'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在这里我们使用redis.Redis连接本地Redis服务，传入的四个参数分别为<code>Redis的地址</code>、<code>运行端口</code>、<code>使用的数据库</code>、<code>密码</code>，这里使用的Redis其实是继承了StrictRedis，所以在默认情况下不传这四个参数时，参数值会有默认值分别为localhost、6379、0、None。</p><p>在Python中使用Redis其实很方便，Redis操作数据的命令(命令详细情况可以参照<a href="http://redisdoc.com/" target="_blank" rel="noopener">Redis命令参考</a>)在Python中都能找到相应的方法，这里引用<a href="https://cuiqingcai.com/" target="_blank" rel="noopener">崔庆才老师</a>对Redis的总结，介绍了Key(键)、String(字符串)、Hash(哈希表)、List(列表)、Set(集合)、SortedSet(有序集合)的相关操作。</p><h2 id="Key-键"><a href="#Key-键" class="headerlink" title="Key(键)"></a>Key(键)</h2><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>exists(name)</td><td>判断一个key是否存在</td><td>name: key名</td><td>redis.exists(‘name’)</td><td>是否存在name这个key</td><td>True</td></tr><tr><td>delete(name)</td><td>删除一个key</td><td>name: key名</td><td>redis.delete(‘name’)</td><td>删除name这个key</td><td>1</td></tr><tr><td>type(name)</td><td>判断key类型</td><td>name: key名</td><td>redis.type(‘name’)</td><td>判断name这个key类型</td><td>b’string’</td></tr><tr><td>keys(pattern)</td><td>获取所有符合规则的key</td><td>pattern: 匹配规则</td><td>redis.keys(‘n*’)</td><td>获取所有以n开头的key</td><td>[b’name’]</td></tr><tr><td>randomkey()</td><td>获取随机的一个key</td><td></td><td>randomkey()</td><td>获取随机的一个key</td><td>b’name’</td></tr><tr><td>rename(src, dst)</td><td>将key重命名</td><td>src: 原key名 dst: 新key名</td><td>redis.rename(‘name’, ‘nickname’)</td><td>将name重命名为nickname</td><td>True</td></tr><tr><td>dbsize()</td><td>获取当前数据库中key的数目</td><td></td><td>dbsize()</td><td>获取当前数据库中key的数目</td><td>100</td></tr><tr><td>expire(name, time)</td><td>设定key的过期时间，单位秒</td><td>name: key名 time: 秒数</td><td>redis.expire(‘name’, 2)</td><td>将name这key的过期时间设置2秒</td><td>True</td></tr><tr><td>ttl(name)</td><td>获取key的过期时间，单位秒，-1为永久不过期</td><td>name: key名</td><td>redis.ttl(‘name’)</td><td>获取name这key的过期时间</td><td>-1</td></tr><tr><td>move(name, db)</td><td>将key移动到其他数据库</td><td>name: key名 db: 数据库代号</td><td>move(‘name’, 2)</td><td>将name移动到2号数据库</td><td>True</td></tr><tr><td>flushdb()</td><td>删除当前选择数据库中的所有key</td><td></td><td>flushdb()</td><td>删除当前选择数据库中的所有key</td><td>True</td></tr><tr><td>flushall()</td><td>删除所有数据库中的所有key</td><td></td><td>flushall()</td><td>删除所有数据库中的所有key</td><td>True</td></tr></tbody></table><h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h2><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>set(name, value)</td><td>给数据库中key为name的string赋予值value</td><td>name: key名 value: 值</td><td>redis.set(‘name’, ‘Bob’)</td><td>给name这个key的value赋值为Bob</td><td>True</td></tr><tr><td>get(name)</td><td>返回数据库中key为name的string的value</td><td>name: key名</td><td>redis.get(‘name’)</td><td>返回name这个key的value</td><td>b’Bob’</td></tr><tr><td>getset(name, value)</td><td>给数据库中key为name的string赋予值value并返回上次的value</td><td>name: key名 value: 新值</td><td>redis.getset(‘name’, ‘Mike’)</td><td>赋值name为Mike并得到上次的value</td><td>b’Bob’</td></tr><tr><td>mget(keys, *args)</td><td>返回多个key对应的value</td><td>keys: key的列表</td><td>redis.mget([‘name’, ‘nickname’])</td><td>返回name和nickname的value</td><td>[b’Mike’, b’Miker’]</td></tr><tr><td>setnx(name, value)</td><td>如果key不存在才设置value</td><td>name: key名</td><td>redis.setnx(‘newname’, ‘James’)</td><td>如果newname这key不存在则设置值为James</td><td>第一次运行True，第二次False</td></tr><tr><td>setex(name, time, value)</td><td>设置可以对应的值为string类型的value，并指定此键值对应的有效期</td><td>name: key名 time: 有效期 value: 值</td><td>redis.setex(‘name’, 1, ‘James’)</td><td>将name这key的值设为James，有效期1秒</td><td>True</td></tr><tr><td>setrange(name, offset, value)</td><td>设置指定key的value值的子字符串</td><td>name: key名 offset: 偏移量 value: 值</td><td>redis.set(‘name’, ‘Hello’) redis.setrange(‘name’, 6, ‘World’)</td><td>设置name为Hello字符串，并在index为6的位置补World</td><td>11，修改后的字符串长度</td></tr><tr><td>mset(mapping)</td><td>批量赋值</td><td>mapping: 字典</td><td>redis.mset({‘name1’: ‘Durant’, ‘name2’: ‘James’})</td><td>将name1设为Durant，name2设为James</td><td>True</td></tr><tr><td>msetnx(mapping)</td><td>key均不存在时才批量赋值</td><td>mapping: 字典</td><td>redis.msetnx({‘name3’: ‘Smith’, ‘name4’: ‘Curry’})</td><td>在name3和name4均不存在的情况下才设置二者值</td><td>True</td></tr><tr><td>incr(name, amount=1)</td><td>key为name的value增值操作，默认1，key不存在则被创建并设为amount</td><td>name: key名 amount:增长的值</td><td>redis.incr(‘age’, 1)</td><td>age对应的值增1，若不存在则会创建并设置为1</td><td>1，即修改后的值</td></tr><tr><td>decr(name, amount=1)</td><td>key为name的value减值操作，默认1，key不存在则被创建并设置为-amount</td><td>name: key名 amount:减少的值</td><td>redis.decr(‘age’, 1)</td><td>age对应的值减1，若不存在则会创建并设置为-1</td><td>-1，即修改后的值</td></tr><tr><td>append(key, value)</td><td>key为name的string的值附加value</td><td>key: key名</td><td>redis.append(‘nickname’, ‘OK’)</td><td>向key为nickname的值后追加OK</td><td>13，即修改后的字符串长度</td></tr><tr><td>substr(name, start, end=-1)</td><td>返回key为name的string的value的子串</td><td>name: key名 start: 起始索引 end: 终止索引，默认-1截取到末尾</td><td>redis.substr(‘name’, 1, 4)</td><td>返回key为name的值的字符串，截取索引为1-4的字符</td><td>b’ello’</td></tr><tr><td>getrange(key, start, end)</td><td>获取key的value值从start到end的子字符串</td><td>key: key名 start: 起始索引 end: 终止索引</td><td>redis.getrange(‘name’, 1, 4)</td><td>返回key为name的值的字符串，截取索引为1-4的字符</td><td>b’ello’</td></tr></tbody></table><h2 id="Hash-哈希表"><a href="#Hash-哈希表" class="headerlink" title="Hash(哈希表)"></a>Hash(哈希表)</h2><p>Hash，即哈希，可以用name指定一个哈希表的名称，然后表内存储了各个键值对，用法总结如下：</p><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>hset(name, key, value)</td><td>向key为name的hash中添加映射</td><td>name: key名 key: 映射键名 value: 映射键值</td><td>hset(‘price’, ‘cake’, 5)</td><td>向key为price的hash中添加映射关系，cake的值为5</td><td>1，即添加的映射个数</td></tr><tr><td>hsetnx(name, key, value)</td><td>向key为name的hash中添加映射，如果映射键名不存在</td><td>name: key名 key: 映射键名 value: 映射键值</td><td>hsetnx(‘price’, ‘book’, 6)</td><td>向key为price的hash中添加映射关系，book的值为6</td><td>1，即添加的映射个数</td></tr><tr><td>hget(name, key)</td><td>返回key为name的hash中field对应的value</td><td>name: key名 key: 映射键名</td><td>redis.hget(‘price’, ‘cake’)</td><td>获取key为price的hash中键名为cake的value</td><td>5</td></tr><tr><td>hmget(name, keys, *args)</td><td>返回key为name的hash中各个键对应的value</td><td>name: key名 keys: 映射键名列表</td><td>redis.hmget(‘price’, [‘apple’, ‘orange’])</td><td>获取key为price的hash中apple和orange的值</td><td>[b’3’, b’7’]</td></tr><tr><td>hmset(name, mapping)</td><td>向key为name的hash中批量添加映射</td><td>name: key名 mapping: 映射字典</td><td>redis.hmset(‘price’, {‘banana’: 2, ‘pear’: 6})</td><td>向key为price的hash中批量添加映射</td><td>True</td></tr><tr><td>hincrby(name, key, amount=1)</td><td>将key为name的hash中映射的value增加amount</td><td>name: key名 key: 映射键名 amount: 增长量</td><td>redis.hincrby(‘price’, ‘apple’, 3)</td><td>key为price的hash中apple的值增加3</td><td>6，修改后的值</td></tr><tr><td>hexists(name, key)</td><td>key为namehash中是否存在键名为key的映射</td><td>name: key名 key: 映射键名</td><td>redis.hexists(‘price’, ‘banana’)</td><td>key为price的hash中banana的值是否存在</td><td>True</td></tr><tr><td>hdel(name, *keys)</td><td>key为namehash中删除键名为key的映射</td><td>name: key名 key: 映射键名</td><td>redis.hdel(‘price’, ‘banana’)</td><td>从key为price的hash中删除键名为banana的映射</td><td>True</td></tr><tr><td>hlen(name)</td><td>从key为name的hash中获取映射个数</td><td>name: key名</td><td>redis.hlen(‘price’)</td><td>从key为price的hash中获取映射个数</td><td>6</td></tr><tr><td>hkeys(name)</td><td>从key为name的hash中获取所有映射键名</td><td>name: key名</td><td>redis.hkeys(‘price’)</td><td>从key为price的hash中获取所有映射键名</td><td>[b’cake’, b’book’, b’banana’, b’pear’]</td></tr><tr><td>hvals(name)</td><td>从key为name的hash中获取所有映射键值</td><td>name: key名</td><td>redis.hvals(‘price’)</td><td>从key为price的hash中获取所有映射键值</td><td>[b’5’, b’6’, b’2’, b’6’]</td></tr><tr><td>hgetall(name)</td><td>从key为name的hash中获取所有映射键值对</td><td>name: key名</td><td>redis.hgetall(‘price’)</td><td>从key为price的hash中获取所有映射键值对</td><td>{b’cake’: b’5’, b’book’: b’6’, b’orange’: b’7’, b’pear’: b’6’}</td></tr></tbody></table><h2 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h2><p>列表内的元素可以重复，而且可以从两端插入和取值。</p><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>rpush(name, *values)</td><td>在key为name的list尾添加值为value的元素，可以传多个</td><td>name: key名 values: 值</td><td>redis.rpush(‘list’, 1, 2, 3)</td><td>给list这个key的list尾添加1、2、3</td><td>3，list大小</td></tr><tr><td>lpush(name, *values)</td><td>在key为name的list头添加值为value的元素，可以传多个</td><td>name: key名 values: 值</td><td>redis.lpush(‘list’, 0)</td><td>给list这个key的list头添加0</td><td>4，list大小</td></tr><tr><td>llen(name)</td><td>返回key为name的list的长度</td><td>name: key名</td><td>redis.llen(‘list’)</td><td>返回key为list的列表的长度</td><td>4</td></tr><tr><td>lrange(name, start, end)</td><td>返回key为name的list中start至end之间的元素</td><td>name: key名 start: 起始索引 end: 终止索引</td><td>redis.lrange(‘list’, 1, 3)</td><td>返回起始为1终止为3的索引范围对应的list</td><td><code>[b&#39;3&#39;, b&#39;2&#39;, b&#39;1&#39;]</code></td></tr><tr><td>ltrim(name, start, end)</td><td>截取key为name的list，保留索引为start到end的内容</td><td>name:key名 start: 起始索引 end: 终止索引</td><td>ltrim(‘list’, 1, 3)</td><td>保留key为list的索引为1到3的元素</td><td>True</td></tr><tr><td>lindex(name, index)</td><td>返回key为name的list中index位置的元素</td><td>name: key名 index: 索引</td><td>redis.lindex(‘list’, 1)</td><td>返回key为list的列表index为1的元素</td><td>b’2’</td></tr><tr><td>lset(name, index, value)</td><td>给key为name的list中index位置的元素赋值，越界则报错</td><td>name: key名 index: 索引位置 value: 值</td><td>redis.lset(‘list’, 1, 5)</td><td>将key为list的list索引1位置赋值为5</td><td>True</td></tr><tr><td>lrem(name, count, value)</td><td>删除count个key的list中值为value的元素</td><td>name: key名 count: 删除个数 value: 值</td><td>redis.lrem(‘list’, 2, 3)</td><td>将key为list的列表删除2个3</td><td>1，即删除的个数</td></tr><tr><td>lpop(name)</td><td>返回并删除key为name的list中的首元素</td><td>name: key名</td><td>redis.lpop(‘list’)</td><td>返回并删除名为list的list第一个元素</td><td>b’5’</td></tr><tr><td>rpop(name)</td><td>返回并删除key为name的list中的尾元素</td><td>name: key名</td><td>redis.rpop(‘list’)</td><td>返回并删除名为list的list最后一个元素</td><td>b’2’</td></tr><tr><td>blpop(keys, timeout=0)</td><td>返回并删除名称为在keys中的list中的首元素，如果list为空，则会一直阻塞等待</td><td>keys: key列表 timeout: 超时等待时间，0为一直等待</td><td>redis.blpop(‘list’)</td><td>返回并删除名为list的list的第一个元素</td><td>[b’5’]</td></tr><tr><td>brpop(keys, timeout=0)</td><td>返回并删除key为name的list中的尾元素，如果list为空，则会一直阻塞等待</td><td>keys: key列表 timeout: 超时等待时间，0为一直等待</td><td>redis.brpop(‘list’)</td><td>返回并删除名为list的list的最后一个元素</td><td>[b’2’]</td></tr><tr><td>rpoplpush(src, dst)</td><td>返回并删除名称为src的list的尾元素，并将该元素添加到名称为dst的list的头部</td><td>src: 源list的key dst: 目标list的key</td><td>redis.rpoplpush(‘list’, ‘list2’)</td><td>将key为list的list尾元素删除并返回并将其添加到key为list2的list头部</td><td>b’2’</td></tr></tbody></table><h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h2><p>集合中的元素都是不重复的。</p><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>sadd(name, *values)</td><td>向key为name的set中添加元素</td><td>name: key名 values: 值，可为多个</td><td>redis.sadd(‘tags’, ‘Book’, ‘Tea’, ‘Coffee’)</td><td>向key为tags的set中添加Book、Tea、Coffee三个内容</td><td>3，即插入的数据个数</td></tr><tr><td>srem(name, *values)</td><td>从key为name的set中删除元素</td><td>name: key名 values: 值，可为多个</td><td>redis.srem(‘tags’, ‘Book’)</td><td>从key为tags的set中删除Book</td><td>1，即删除的数据个数</td></tr><tr><td>spop(name)</td><td>随机返回并删除key为name的set中一个元素</td><td>name: key名</td><td>redis.spop(‘tags’)</td><td>从key为tags的set中随机删除并返回该元素</td><td>b’Tea’</td></tr><tr><td>smove(src, dst, value)</td><td>从src对应的set中移除元素并添加到dst对应的set中</td><td>src: 源set dst: 目标set value: 元素值</td><td>redis.smove(‘tags’, ‘tags2’, ‘Coffee’)</td><td>从key为tags的set中删除元素Coffee并添加到key为tags2的set</td><td>True</td></tr><tr><td>scard(name)</td><td>返回key为name的set的元素个数</td><td>name: key名</td><td>redis.scard(‘tags’)</td><td>获取key为tags的set中元素个数</td><td>3</td></tr><tr><td>sismember(name, value)</td><td>测试member是否是key为name的set的元素</td><td>name:key值</td><td>redis.sismember(‘tags’, ‘Book’)</td><td>判断Book是否为key为tags的set元素</td><td>True</td></tr><tr><td>sinter(keys, *args)</td><td>返回所有给定key的set的交集</td><td>keys: key列表</td><td>redis.sinter([‘tags’, ‘tags2’])</td><td>返回key为tags的set和key为tags2的set的交集</td><td>{b’Coffee’}</td></tr><tr><td>sinterstore(dest, keys, *args)</td><td>求交集并将交集保存到dest的集合</td><td>dest:结果集合 keys:key列表</td><td>redis.sinterstore(‘inttag’, [‘tags’, ‘tags2’])</td><td>求key为tags的set和key为tags2的set的交集并保存为inttag</td><td>1</td></tr><tr><td>sunion(keys, *args)</td><td>返回所有给定key的set的并集</td><td>keys: key列表</td><td>redis.sunion([‘tags’, ‘tags2’])</td><td>返回key为tags的set和key为tags2的set的并集</td><td>{b’Coffee’, b’Book’, b’Pen’}</td></tr><tr><td>sunionstore(dest, keys, *args)</td><td>求并集并将并集保存到dest的集合</td><td>dest:结果集合 keys:key列表</td><td>redis.sunionstore(‘inttag’, [‘tags’, ‘tags2’])</td><td>求key为tags的set和key为tags2的set的并集并保存为inttag</td><td>3</td></tr><tr><td>sdiff(keys, *args)</td><td>返回所有给定key的set的差集</td><td>keys: key列表</td><td>redis.sdiff([‘tags’, ‘tags2’])</td><td>返回key为tags的set和key为tags2的set的差集</td><td>{b’Book’, b’Pen’}</td></tr><tr><td>sdiffstore(dest, keys, *args)</td><td>求差集并将差集保存到dest的集合</td><td>dest:结果集合 keys:key列表</td><td>redis.sdiffstore(‘inttag’, [‘tags’, ‘tags2’])</td><td>求key为tags的set和key为tags2的set的差集并保存为inttag</td><td>3</td></tr><tr><td>smembers(name)</td><td>返回key为name的set的所有元素</td><td>name: key名</td><td>redis.smembers(‘tags’)</td><td>返回key为tags的set的所有元素</td><td>{b’Pen’, b’Book’, b’Coffee’}</td></tr><tr><td>srandmember(name)</td><td>随机返回key为name的set的一个元素，但不删除元素</td><td>name: key值</td><td>redis.srandmember(‘tags’)</td><td>随机返回key为tags的set的一个元素</td></tr></tbody></table><h2 id="SortedSet-有序集合"><a href="#SortedSet-有序集合" class="headerlink" title="SortedSet(有序集合)"></a>SortedSet(有序集合)</h2><p>有序集合，它相比集合多了一个分数字段，利用它可以对集合中的数据进行排序。</p><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>zadd(name, *args, **kwargs)</td><td>向key为name的zset中添加元素member，score用于排序。如果该元素存在，则更新其顺序</td><td>name: key名 args: 可变参数</td><td>redis.zadd(‘grade’, 100, ‘Bob’, 98, ‘Mike’)</td><td>向key为grade的zset中添加Bob，score为100，添加Mike，score为98</td><td>2，即添加的元素个数</td></tr><tr><td>zrem(name, *values)</td><td>删除key为name的zset中的元素</td><td>name: key名 values: 元素</td><td>redis.zrem(‘grade’, ‘Mike’)</td><td>从key为grade的zset中删除Mike</td><td>1，即删除的元素个数</td></tr><tr><td>zincrby(name, value, amount=1)</td><td>如果在key为name的zset中已经存在元素value，则该元素的score增加amount，否则向该集合中添加该元素，其score的值为amount</td><td>name: key名 value: 元素 amount: 增长的score值</td><td>redis.zincrby(‘grade’, ‘Bob’, -2)</td><td>key为grade的zset中Bob的score减2</td><td>98.0，即修改后的值</td></tr><tr><td>zrank(name, value)</td><td>返回key为name的zset中元素的排名（按score从小到大排序）即下标</td><td>name: key名 value: 元素值</td><td>redis.zrank(‘grade’, ‘Amy’)</td><td>得到key为grade的zset中Amy的排名</td><td>1</td></tr><tr><td>zrevrank(name, value)</td><td>返回key为name的zset中元素的倒数排名（按score从大到小排序）即下标</td><td>name: key名 value: 元素值</td><td>redis.zrevrank(‘grade’, ‘Amy’)</td><td>得到key为grade的zset中Amy的倒数排名</td><td>2</td></tr><tr><td>zrevrange(name, start, end, withscores=False)</td><td>返回key为name的zset（按score从大到小排序）中的index从start到end的所有元素</td><td>name: key值 start: 开始索引 end: 结束索引 withscores: 是否带score</td><td>redis.zrevrange(‘grade’, 0, 3)</td><td>返回key为grade的zset前四名元素</td><td>[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td>zrangebyscore(name, min, max, start=None, num=None, withscores=False)</td><td>返回key为name的zset中score在给定区间的元素</td><td>name:key名 min: 最低score max:最高score start: 起始索引 num: 个数 withscores: 是否带score</td><td>redis.zrangeby score(‘grade’, 80, 95)</td><td>返回key为grade的zset中score在80和95之间的元素</td><td>[b’Amy’, b’James’]</td></tr><tr><td>zcount(name, min, max)</td><td>返回key为name的zset中score在给定区间的数量</td><td>name:key名 min: 最低score max: 最高score</td><td>redis.zcount(‘grade’, 80, 95)</td><td>返回key为grade的zset中score在80到95的元素个数</td><td>2</td></tr><tr><td>zcard(name)</td><td>返回key为name的zset的元素个数</td><td>name: key名</td><td>redis.zcard(‘grade’)</td><td>获取key为grade的zset中元素个数</td><td>3</td></tr><tr><td>zremrangebyrank(name, min, max)</td><td>删除key为name的zset中排名在给定区间的元素</td><td>name:key名 min: 最低位次 max: 最高位次</td><td>redis.zremran gebyrank(‘grade’, 0, 0)</td><td>删除key为grade的zset中排名第一的元素</td><td>1，即删除的元素个数</td></tr><tr><td>zremrangebyscore(name, min, max)</td><td>删除key为name的zset中score在给定区间的元素</td><td>name:key名 min: 最低score max:最高score</td><td>redis.zremran gebyscore (‘grade’, 80, 90)</td><td>删除score在80到90之间的元素</td><td>1，即删除的元素个数</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用Python代码操作Redis&quot;&gt;&lt;a href=&quot;#使用Python代码操作Redis&quot; class=&quot;headerlink&quot; title=&quot;使用Python代码操作Redis&quot;&gt;&lt;/a&gt;使用Python代码操作Redis&lt;/h1&gt;&lt;p&gt;Redis是一款非关
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Redis" scheme="http://alexyanglong.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>使用Python代码操作MySQL5.x数据库</title>
    <link href="http://alexyanglong.github.io/2018/05/17/%E4%BD%BF%E7%94%A8Python%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CMySQL5.x%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://alexyanglong.github.io/2018/05/17/使用Python代码操作MySQL5.x数据库/</id>
    <published>2018-05-16T16:00:00.000Z</published>
    <updated>2018-06-05T11:11:32.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Python代码操作MySQL5-x数据库"><a href="#使用Python代码操作MySQL5-x数据库" class="headerlink" title="使用Python代码操作MySQL5.x数据库"></a>使用Python代码操作MySQL5.x数据库</h1><p>要使用Python代码操作数据库需要安装一个第三方库PyMySQL。（注：Python版本为3.x）</p><p>可以使用pip管理工具安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyMySQL</span><br></pre></td></tr></table></figure><h2 id="连接MySQL数据库"><a href="#连接MySQL数据库" class="headerlink" title="连接MySQL数据库"></a>连接MySQL数据库</h2><h3 id="编写代码，连接数据库"><a href="#编写代码，连接数据库" class="headerlink" title="编写代码，连接数据库"></a>编写代码，连接数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Connection 创建连接</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">'localhost'</span>,</span><br><span class="line">   user=<span class="string">'root'</span>,</span><br><span class="line">   password=<span class="string">'root'</span>,</span><br><span class="line">   database=<span class="string">'test'</span>,</span><br><span class="line">   port=<span class="number">3306</span>,</span><br><span class="line">   charset=<span class="string">'utf8'</span>,</span><br><span class="line">   autocommit=<span class="keyword">False</span>,</span><br><span class="line">   cursorclass: pymysql.cursors.DictCursor)</span><br></pre></td></tr></table></figure><p><code>host</code> ：主机名/主机IP</p><p><code>port</code> ：端口</p><p><code>user</code> ：MySQL的登录用户名</p><p><code>password</code> ：MySQL的登录密码</p><p><code>database</code> ：要使用的数据库，可以简写成 <code>db</code> </p><p><code>charset</code> ：连接数据库采用的字符编码</p><p><code>autocommit</code> ：默认值是False，表示DML(数据操纵语言)不会自动提交，如果为True则会自动提交</p><p><code>cursorclass</code> ：cursorclass设置cursor游标的类型，这里设置的是dict类型，表示查询返回的结果是以字典的方式，这一项是不必须的。</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>connection对象常用的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cursor()        使用该连接创建并返回游标对象</span><br><span class="line">commit()        提交当前事务</span><br><span class="line">rollback()      回滚当前事务</span><br><span class="line">close()         关闭连接</span><br></pre></td></tr></table></figure><p>cursor对象常用的方法和属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">execute(sql)    执行一个SQL命令</span><br><span class="line">fetchone()      取得结果集的下一行</span><br><span class="line">fetchmany(size) 获取结果集的下几行</span><br><span class="line">fetchall()      获取结果集中的所有行</span><br><span class="line">rowcount      返回数据条数或影响行数</span><br><span class="line">close()         关闭游标对象</span><br></pre></td></tr></table></figure><h2 id="使用Python代码实现增删改查"><a href="#使用Python代码实现增删改查" class="headerlink" title="使用Python代码实现增删改查"></a>使用Python代码实现增删改查</h2><h3 id="在MySQL中建库建表"><a href="#在MySQL中建库建表" class="headerlink" title="在MySQL中建库建表"></a>在MySQL中建库建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建库 test</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span> <span class="keyword">default</span> <span class="keyword">charset</span> utf8;</span><br><span class="line"><span class="comment">-- 切换/使用test库</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">dno <span class="built_in">int</span> primary <span class="keyword">key</span>,<span class="comment">-- 部门编号</span></span><br><span class="line">dname <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,<span class="comment">-- 部门名称</span></span><br><span class="line">dlocation <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span><span class="comment">-- 部门位置</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="得到数据库连接"><a href="#得到数据库连接" class="headerlink" title="得到数据库连接"></a>得到数据库连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line">    config = &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'db'</span>: <span class="string">'test'</span>,</span><br><span class="line">        <span class="string">'charset'</span>: <span class="string">'utf8'</span>,</span><br><span class="line">        <span class="string">'autocommit'</span>: <span class="keyword">False</span>,  <span class="comment"># 默认不自动提交</span></span><br><span class="line">        <span class="string">'cursorclass'</span>: pymysql.cursors.DictCursor  <span class="comment"># 设置游标的类型,查询返回的结果是以字典的方式</span></span><br><span class="line">    &#125;</span><br><span class="line">    conn = pymysql.connect(**config)  <span class="comment"># **config 语法是将config字典拆分成键值对的形式</span></span><br><span class="line">    <span class="keyword">return</span> conn</span><br></pre></td></tr></table></figure><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    插入</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 得到Connection(连接) / Cursor(游标)</span></span><br><span class="line">    conn = get_conn()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建Cursor对象,支持上下文语法,可以放在with中</span></span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            <span class="comment"># 向数据库发出sql语句</span></span><br><span class="line">            dno = input(<span class="string">'部门编号:'</span>)</span><br><span class="line">            dname = input(<span class="string">'部门名称:'</span>)</span><br><span class="line">            dloc = input(<span class="string">'部门地址:'</span>)</span><br><span class="line">            <span class="comment"># 如果使用字符串格式化的方式来组装SQL语句，最大的风险是用被SQL注射攻击</span></span><br><span class="line">            <span class="comment"># sql = "insert into dept values (%d, '%s', '%s')" % (dno, dname, dloc)</span></span><br><span class="line">            <span class="comment"># result = cursor.execute(sql)</span></span><br><span class="line">            <span class="comment"># result = cursor.execute('insert into dept values (%s, %s, %s)', (dno, dname, dloc))</span></span><br><span class="line">            <span class="comment"># 这个方式传参是以字典的方式,但是要注意的是在占位的时候用%(name)s</span></span><br><span class="line">            result = cursor.execute(</span><br><span class="line">                <span class="string">'insert into dept values (%(dno)s, %(dname)s, %(dloc)s)'</span>,</span><br><span class="line">                &#123;<span class="string">'dno'</span>: dno, <span class="string">'dname'</span>: dname, <span class="string">'dloc'</span>: dloc&#125;</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># print('成功插入', cursor.rowcount, '条数据') # 这里cursor.rowcount是获取到受影响的行</span></span><br><span class="line">            print(<span class="string">'成功插入'</span>, result, <span class="string">'条数据'</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果事务中的所有操作全部成功了最后手动提交</span></span><br><span class="line">            conn.commit()</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">      print(e)</span><br><span class="line"><span class="comment"># 如果事务操作有任何一个操作发生异常,那么就会回滚事务</span></span><br><span class="line">        conn.rollback()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    修改</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    conn = get_conn()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            dno = input(<span class="string">'部门编号:'</span>)</span><br><span class="line">            dname = input(<span class="string">'部门名称:'</span>)</span><br><span class="line">            <span class="comment"># 这个方式传参是以字典的方式,但是要注意的是在占位的时候用%(name)s</span></span><br><span class="line">            result = cursor.execute(</span><br><span class="line">                <span class="string">'update dept set dname=%(dname)s where dno=%(dno)s'</span>,</span><br><span class="line">                &#123;<span class="string">'dno'</span>: dno, <span class="string">'dname'</span>: dname&#125;</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># print('成功插入', cursor.rowcount, '条数据') # 这里cursor.rowcount是获取到受影响的行</span></span><br><span class="line">            print(<span class="string">'成功修改'</span>, result, <span class="string">'条数据'</span>)</span><br><span class="line">            conn.commit()</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">      print(e)</span><br><span class="line">      conn.rollback()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(dno)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据编号删除</span></span><br><span class="line"><span class="string">    :param dno: 编号</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    conn = get_conn()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">          dno = input(<span class="string">'部门编号:'</span>)</span><br><span class="line">            <span class="comment"># 向数据库发出sql语句</span></span><br><span class="line">            <span class="comment"># execute方法中占位后传参除了元组和字典外,还可以是列表</span></span><br><span class="line">            result = cursor.execute(<span class="string">'delete from dept where dno=%s'</span>, [dno])</span><br><span class="line">            conn.commit()</span><br><span class="line">            print(<span class="string">'删除成功'</span> <span class="keyword">if</span> result == <span class="number">1</span> <span class="keyword">else</span> <span class="string">'删除失败'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        conn.rollback()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    查询</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    conn = get_conn()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建Cursor对象</span></span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            <span class="comment"># 向数据库发出sql语句</span></span><br><span class="line">            cursor.execute(<span class="string">'select dno, dname, dlocation from dept'</span>)</span><br><span class="line">            result = cursor.fetchone()</span><br><span class="line">            <span class="comment"># 程序中最好不要使用fetchall(),如果库中数据量很大,查询的性能就很低</span></span><br><span class="line">            <span class="keyword">while</span> result:</span><br><span class="line">                print(result)</span><br><span class="line">                <span class="comment"># 取出部门名称</span></span><br><span class="line">                <span class="comment"># 在这里我上面连接数据时,使用了cursorclass参数,查询时返回的结果是以字典的方式</span></span><br><span class="line">                print(result[<span class="string">'dname'</span>])</span><br><span class="line">                result = cursor.fetchone()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><p>上面就是对MySQL数据库简单的增删查改操作。</p><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>编写一个类，将上面的操作数据库的方法都包含在里面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySqlHelper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""MySQLHelper"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, connect_config)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        构造器</span></span><br><span class="line"><span class="string">        :param connect_config: 连接配置，传入一个dict</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.connect_config = connect_config</span><br><span class="line">        self.conn = <span class="keyword">None</span></span><br><span class="line">        self.cursor = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect_db</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""创建数据库连接"""</span></span><br><span class="line">        self.conn = pymysql.connect(**self.connect_config)</span><br><span class="line">        <span class="comment"># self.cursor = self.conn.cursor()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_db</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""关闭数据库连接"""</span></span><br><span class="line">        <span class="comment"># if self.cursor:</span></span><br><span class="line">        <span class="comment">#     self.cursor.close()</span></span><br><span class="line">        <span class="keyword">if</span> self.conn:</span><br><span class="line">            self.conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute_dql</span><span class="params">(self, sql, *, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        执行dql操作，即 select 语句</span></span><br><span class="line"><span class="string">        :param sql: sql语句，string</span></span><br><span class="line"><span class="string">        :param param: 参数列表，dict</span></span><br><span class="line"><span class="string">        :return: 查询结果，tuple</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># res = ''</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.connect_db()</span><br><span class="line">            <span class="keyword">with</span> self.conn.cursor() <span class="keyword">as</span> self.cursor:</span><br><span class="line">                self.cursor.execute(sql, param)</span><br><span class="line">                res = self.cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.close_db()</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute_dml</span><span class="params">(self, sql, *, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        执行dql操作，即 update、delete、insert 语句</span></span><br><span class="line"><span class="string">        :param sql: sql语句，string</span></span><br><span class="line"><span class="string">        :param param: 参数列表，dict</span></span><br><span class="line"><span class="string">        :return: 查询结果，int [1：成功，0：正常失败，-1：错误失败]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.connect_db()</span><br><span class="line">            <span class="keyword">with</span> self.conn.cursor() <span class="keyword">as</span> self.cursor:</span><br><span class="line">                count = self.cursor.execute(sql, param)</span><br><span class="line">                self.conn.commit()</span><br><span class="line">                <span class="keyword">if</span> count:</span><br><span class="line">                    res = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            res = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.close_db()</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    config = &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'database'</span>: <span class="string">'test'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'charset'</span>: <span class="string">'utf8'</span>,</span><br><span class="line">        <span class="string">'autocommit'</span>: <span class="keyword">False</span>,</span><br><span class="line">        <span class="string">'cursorclass'</span>: pymysql.cursors.DictCursor  <span class="comment"># cursorclass设置cursor游标的类型，这里设置的是dict类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    sqlhelper = MySqlHelper(config)</span><br><span class="line">    sql = <span class="string">'select dno, dname, dlocation from dept where dno=%(no)s'</span></span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">'no'</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = sqlhelper.execute_dql(sql, param=param)</span><br><span class="line">    print(res)</span><br><span class="line"></span><br><span class="line">    sql = <span class="string">'insert into dept values (%(no)s, %(name)s, %(location)s)'</span></span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">'no'</span>: <span class="number">88</span>,</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'sda88'</span>,</span><br><span class="line">        <span class="string">'location'</span>: <span class="string">'DSfcz88'</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = sqlhelper.execute_dml(sql, param=param)</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用Python代码操作MySQL5-x数据库&quot;&gt;&lt;a href=&quot;#使用Python代码操作MySQL5-x数据库&quot; class=&quot;headerlink&quot; title=&quot;使用Python代码操作MySQL5.x数据库&quot;&gt;&lt;/a&gt;使用Python代码操作MySQL
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="MySQL" scheme="http://alexyanglong.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Linux防火墙服务firewalld的基本使用</title>
    <link href="http://alexyanglong.github.io/2018/05/15/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E6%9C%8D%E5%8A%A1firewalld%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://alexyanglong.github.io/2018/05/15/Linux防火墙服务firewalld的基本使用/</id>
    <published>2018-05-14T16:00:00.000Z</published>
    <updated>2018-06-07T08:22:13.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux防火墙服务firewalld的基本使用"><a href="#Linux防火墙服务firewalld的基本使用" class="headerlink" title="Linux防火墙服务firewalld的基本使用"></a>Linux防火墙服务firewalld的基本使用</h1><p>​    防火墙是一种位于内部网络与外部网络之间的网络安全系统。一项信息安全的防护系统，依照特定的规则，允许或是限制传输的数据通过。防火墙通常工作在网络层，即IPv4或IPv6的IP包上。</p><h2 id="什么是firewalld"><a href="#什么是firewalld" class="headerlink" title="什么是firewalld"></a>什么是firewalld</h2><p>​    firewalld即Dynamic Firewall Manager of Linux systems，Linux系统的动态防火墙管理器。firewalld是一个服务，用于配置网络连接，从而哪些内外部网络的数据包可以允许穿过网络或阻止穿过网络。</p><p>​    firewalld允许两种类型的配置：永久类型和运行时类型。运行时类型的配置在防火墙被重启后会丢失相应的规则配置；而永久类型的配置即使遇到系统重启，也会保留生效。</p><p>​    对应于上面两种类型的配置，firewalld相应的有两个目录：针对运行时类型配置的目录/usr/lib/firewall；以及针对永久类型配置的目录/etc/firewall。</p><h2 id="firewalld的基本使用"><a href="#firewalld的基本使用" class="headerlink" title="firewalld的基本使用"></a>firewalld的基本使用</h2><p>启动服务： <code>systemctl start firewalld.service</code> 或 <code>systemctl start firewalld</code></p><p>查看状态：<code>systemctl status firewalld.service</code> 或 <code>systemctl status firewalld</code></p><p>停止服务：<code>systemctl stop firewalld.service</code> 或 <code>systemctl stop firewalld</code></p><p>重启服务：<code>systemctl restart firewalld.service</code> 或 <code>systemctl restart firewalld</code></p><p>设置开机自启：<code>systemctl enable firewalld.service</code> 或 <code>systemctl enable firewalld</code></p><p>取消开机自启：<code>systemctl disable firewalld.service</code> 或 <code>systemctl disable firewalld</code></p><p>查看是否开机自启：<code>systemctl is-enabled firewalld.service</code> 或 <code>systemctl is-enabled firewalld</code></p><p>systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</p><h2 id="使用firewalld-cmd配置防火墙"><a href="#使用firewalld-cmd配置防火墙" class="headerlink" title="使用firewalld-cmd配置防火墙"></a>使用firewalld-cmd配置防火墙</h2><p>查看版本： <code>firewall-cmd --version</code></p><p>查看帮助：<code>firewall-cmd --help</code></p><p>显示状态： <code>firewall-cmd --state</code></p><p>查看所有打开的端口： <code>firewall-cmd --zone=public --list-ports</code></p><p>重新加载防火墙规则： <code>firewall-cmd --reload</code></p><p>查看区域信息:  <code>firewall-cmd --get-active-zones</code></p><p>查看指定接口所属区域： <code>firewall-cmd --get-zone-of-interface=eth0</code></p><p>拒绝所有包：<code>firewall-cmd --panic-on</code></p><p>取消拒绝状态：<code>firewall-cmd --panic-off</code></p><p>查看是否拒绝： <code>firewall-cmd --query-panic</code></p><h2 id="如何添加-删除一个端口（在防火墙上凿洞）"><a href="#如何添加-删除一个端口（在防火墙上凿洞）" class="headerlink" title="如何添加/删除一个端口（在防火墙上凿洞）"></a>如何添加/删除一个端口（在防火墙上凿洞）</h2><p>添加端口（凿洞）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=端口/tcp --permanent</span><br></pre></td></tr></table></figure><p>–permanent永久生效，没有此参数重启后失效</p><p>重新载入防火墙配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>查看端口在防火墙配置中的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone= public --query-port=端口/tcp</span><br></pre></td></tr></table></figure><p>删除端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone= public --remove-port=端口/tcp --permanent</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux防火墙服务firewalld的基本使用&quot;&gt;&lt;a href=&quot;#Linux防火墙服务firewalld的基本使用&quot; class=&quot;headerlink&quot; title=&quot;Linux防火墙服务firewalld的基本使用&quot;&gt;&lt;/a&gt;Linux防火墙服务fire
      
    
    </summary>
    
      <category term="Linux" scheme="http://alexyanglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="firewalld" scheme="http://alexyanglong.github.io/tags/firewalld/"/>
    
  </entry>
  
  <entry>
    <title>在Linux（CentOS7）下安装Redis</title>
    <link href="http://alexyanglong.github.io/2018/05/13/%E5%9C%A8Linux%EF%BC%88CentOS7%EF%BC%89%E4%B8%8B%E5%AE%89%E8%A3%85Redis/"/>
    <id>http://alexyanglong.github.io/2018/05/13/在Linux（CentOS7）下安装Redis/</id>
    <published>2018-05-12T16:00:00.000Z</published>
    <updated>2018-06-05T02:34:12.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Linux（CentOS7）下安装Redis"><a href="#在Linux（CentOS7）下安装Redis" class="headerlink" title="在Linux（CentOS7）下安装Redis"></a>在Linux（CentOS7）下安装Redis</h1><p>Redis是一款非关系型存储数据库。</p><h2 id="1、下载软件归档压缩包"><a href="#1、下载软件归档压缩包" class="headerlink" title="1、下载软件归档压缩包"></a>1、下载软件归档压缩包</h2><p>从<a href="https://redis.io" target="_blank" rel="noopener">redis官网</a>上下载软件归档压缩包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-3.2.11.tar.gz</span><br></pre></td></tr></table></figure><h2 id="2、解压缩解归档"><a href="#2、解压缩解归档" class="headerlink" title="2、解压缩解归档"></a>2、解压缩解归档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gunzip redis-3.2.11.tar.gz</span><br><span class="line">tar -xvf redis-3.2.11.tar.gz</span><br></pre></td></tr></table></figure><h2 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h2><p>切换至redis解压目录，执行下列命令进行配置和安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="4、配置redis-conf配置文件"><a href="#4、配置redis-conf配置文件" class="headerlink" title="4、配置redis.conf配置文件"></a>4、配置redis.conf配置文件</h2><p>配置redis.conf配置文件，注意备份</p><h3 id="4-1、绑定ip"><a href="#4-1、绑定ip" class="headerlink" title="4.1、绑定ip"></a>4.1、绑定ip</h3><p>在命令模式下， 61gg 定位至61行，进行绑定ip [注意：使用内网ip，可以在末行模式下输入 :!ifconfig  查看内网ip]</p><h3 id="4-2、配置端口"><a href="#4-2、配置端口" class="headerlink" title="4.2、配置端口"></a>4.2、配置端口</h3><p>在命令模式下， 84gg 定位至84行，配置端口，默认是 6379</p><h3 id="4-3、配置连接密码"><a href="#4-3、配置连接密码" class="headerlink" title="4.3、配置连接密码"></a>4.3、配置连接密码</h3><p>在命令模式下输入  /requirepass 查找，按 n 查找下一个，大概在480行，修改后</p><p>保存退出</p><h2 id="5、后台启动服务，并设置日志文件"><a href="#5、后台启动服务，并设置日志文件" class="headerlink" title="5、后台启动服务，并设置日志文件"></a>5、后台启动服务，并设置日志文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server 配置文件的路径/配置文件名 &gt; 日志文件 &amp;</span><br></pre></td></tr></table></figure><p>需要停止后台服务，请先把redis放在前台运行 (使用jobs查看后台运行编号num，再使用fg %num就将编号是num的服务放在前台运行了)，再使用 Ctrl C 停止redis服务。或者使用 kill 进程编号</p><p>同样，如果要将前台运行的服务放到后台运行，先使用Ctrl Z，再使用jobs查看状态，是处于Stopped停止状态，之后使用bg %num就可以将编号是num的服务放在后台运行了</p><p>基准测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark -h ip -p 端口 -a 密码</span><br></pre></td></tr></table></figure><h2 id="6、连接redis"><a href="#6、连接redis" class="headerlink" title="6、连接redis"></a>6、连接redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h ip [-p 端口号]-  端口号为默认的6379可以不写</span><br><span class="line">auth 密码-  输入密码</span><br><span class="line">ping-  测试连接，回复pong成功</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Linux（CentOS7）下安装Redis&quot;&gt;&lt;a href=&quot;#在Linux（CentOS7）下安装Redis&quot; class=&quot;headerlink&quot; title=&quot;在Linux（CentOS7）下安装Redis&quot;&gt;&lt;/a&gt;在Linux（CentOS7）下安
      
    
    </summary>
    
      <category term="Linux" scheme="http://alexyanglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="Redis" scheme="http://alexyanglong.github.io/tags/Redis/"/>
    
  </entry>
  
</feed>
