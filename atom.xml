<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AlexYang&#39;s World</title>
  
  <subtitle>AlexYang的博客世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://alexyanglong.github.io/"/>
  <updated>2018-06-05T02:34:12.424Z</updated>
  <id>http://alexyanglong.github.io/</id>
  
  <author>
    <name>AlexYang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Linux（CentOS7）下安装Redis</title>
    <link href="http://alexyanglong.github.io/2018/05/13/%E5%9C%A8Linux%EF%BC%88CentOS7%EF%BC%89%E4%B8%8B%E5%AE%89%E8%A3%85Redis/"/>
    <id>http://alexyanglong.github.io/2018/05/13/在Linux（CentOS7）下安装Redis/</id>
    <published>2018-05-12T16:00:00.000Z</published>
    <updated>2018-06-05T02:34:12.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Linux（CentOS7）下安装Redis"><a href="#在Linux（CentOS7）下安装Redis" class="headerlink" title="在Linux（CentOS7）下安装Redis"></a>在Linux（CentOS7）下安装Redis</h1><p>Redis是一款非关系型存储数据库。</p><h2 id="1、下载软件归档压缩包"><a href="#1、下载软件归档压缩包" class="headerlink" title="1、下载软件归档压缩包"></a>1、下载软件归档压缩包</h2><p>从<a href="https://redis.io" target="_blank" rel="noopener">redis官网</a>上下载软件归档压缩包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-3.2.11.tar.gz</span><br></pre></td></tr></table></figure><h2 id="2、解压缩解归档"><a href="#2、解压缩解归档" class="headerlink" title="2、解压缩解归档"></a>2、解压缩解归档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gunzip redis-3.2.11.tar.gz</span><br><span class="line">tar -xvf redis-3.2.11.tar.gz</span><br></pre></td></tr></table></figure><h2 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h2><p>切换至redis解压目录，执行下列命令进行配置和安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="4、配置redis-conf配置文件"><a href="#4、配置redis-conf配置文件" class="headerlink" title="4、配置redis.conf配置文件"></a>4、配置redis.conf配置文件</h2><p>配置redis.conf配置文件，注意备份</p><h3 id="4-1、绑定ip"><a href="#4-1、绑定ip" class="headerlink" title="4.1、绑定ip"></a>4.1、绑定ip</h3><p>在命令模式下， 61gg 定位至61行，进行绑定ip [注意：使用内网ip，可以在末行模式下输入 :!ifconfig  查看内网ip]</p><h3 id="4-2、配置端口"><a href="#4-2、配置端口" class="headerlink" title="4.2、配置端口"></a>4.2、配置端口</h3><p>在命令模式下， 84gg 定位至84行，配置端口，默认是 6379</p><h3 id="4-3、配置连接密码"><a href="#4-3、配置连接密码" class="headerlink" title="4.3、配置连接密码"></a>4.3、配置连接密码</h3><p>在命令模式下输入  /requirepass 查找，按 n 查找下一个，大概在480行，修改后</p><p>保存退出</p><h2 id="5、后台启动服务，并设置日志文件"><a href="#5、后台启动服务，并设置日志文件" class="headerlink" title="5、后台启动服务，并设置日志文件"></a>5、后台启动服务，并设置日志文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server 配置文件的路径/配置文件名 &gt; 日志文件 &amp;</span><br></pre></td></tr></table></figure><p>需要停止后台服务，请先把redis放在前台运行 (使用jobs查看后台运行编号num，再使用fg %num就将编号是num的服务放在前台运行了)，再使用 Ctrl C 停止redis服务。或者使用 kill 进程编号</p><p>同样，如果要将前台运行的服务放到后台运行，先使用Ctrl Z，再使用jobs查看状态，是处于Stopped停止状态，之后使用bg %num就可以将编号是num的服务放在后台运行了</p><p>基准测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark -h ip -p 端口 -a 密码</span><br></pre></td></tr></table></figure><h2 id="6、连接redis"><a href="#6、连接redis" class="headerlink" title="6、连接redis"></a>6、连接redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h ip [-p 端口号]-  端口号为默认的6379可以不写</span><br><span class="line">auth 密码-  输入密码</span><br><span class="line">ping-  测试连接，回复pong成功</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Linux（CentOS7）下安装Redis&quot;&gt;&lt;a href=&quot;#在Linux（CentOS7）下安装Redis&quot; class=&quot;headerlink&quot; title=&quot;在Linux（CentOS7）下安装Redis&quot;&gt;&lt;/a&gt;在Linux（CentOS7）下安
      
    
    </summary>
    
      <category term="Linux" scheme="http://alexyanglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="Redis" scheme="http://alexyanglong.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>在Linux（CentOS7）下安装MySQL5.x</title>
    <link href="http://alexyanglong.github.io/2018/05/12/%E5%9C%A8Linux%EF%BC%88CentOS7%EF%BC%89%E4%B8%8B%E5%AE%89%E8%A3%85MySQL5.x/"/>
    <id>http://alexyanglong.github.io/2018/05/12/在Linux（CentOS7）下安装MySQL5.x/</id>
    <published>2018-05-11T16:00:00.000Z</published>
    <updated>2018-06-05T02:26:53.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Linux（CentOS7）下安装MySQL5-x"><a href="#在Linux（CentOS7）下安装MySQL5-x" class="headerlink" title="在Linux（CentOS7）下安装MySQL5.x"></a>在Linux（CentOS7）下安装MySQL5.x</h1><p>MySQL是一款数据库，用于存储数据。</p><h2 id="1、先使用wget下载mysql安装包"><a href="#1、先使用wget下载mysql安装包" class="headerlink" title="1、先使用wget下载mysql安装包"></a>1、先使用wget下载mysql安装包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="2、创建组、用户"><a href="#2、创建组、用户" class="headerlink" title="2、创建组、用户"></a>2、创建组、用户</h2><p>后面mysql就使用这个用户来运行（注意这也是mysql启动脚本中默认的用户，因此最好不要改名）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql mysql   -  （使用-r参数表示mysql用户是一个系统用户，不能登录）</span><br></pre></td></tr></table></figure><h2 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h2><h3 id="3-1-解压"><a href="#3-1-解压" class="headerlink" title="3.1 解压"></a>3.1 解压</h3><p>将前面得到的mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz 解压、解归档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gunzip mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">tar -xvf mysql-5.7.22-linux-glibc2.12-x86_64.tar</span><br></pre></td></tr></table></figure><p>将解压后的目录移动至 /usr/local ，并重命名为 mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mysql-5.7.22-linux-glibc2.12-x86_64 /usr/local/mysql</span><br></pre></td></tr></table></figure><p>此后 /usr/local/mysql 就是安装目录了</p><p>注意，如果mysql目录下没有data和tmp目录，手动新建，并修改权限</p><h3 id="3-2-目录权限设置"><a href="#3-2-目录权限设置" class="headerlink" title="3.2 目录权限设置"></a>3.2 目录权限设置</h3><p>将mysql及其下所有的目录所有者和组均设为mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql</span><br><span class="line">chown mysql:mysql -R .</span><br></pre></td></tr></table></figure><h3 id="3-3-初始化"><a href="#3-3-初始化" class="headerlink" title="3.3 初始化"></a>3.3 初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data --basedir=/usr/local/mysql</span><br></pre></td></tr></table></figure><p>初始化成功后出现如下信息：</p><p>201x-xx-xxT07:10:13.583130Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use –explicit_defaults_for_timestamp server option (see documentation for more details).</p><p>201x-xx-xx T07:10:13.976219Z 0 [Warning] InnoDB: New log files created, LSN=45790</p><p>201x-xx-xx T07:10:14.085666Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.</p><p>201x-xx-xx T07:10:14.161899Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 1fa941f9-effd-11e5-b67d-000c2958cdc8.</p><p>201x-xx-xx T07:10:14.165534Z 0 [Warning] Gtid table is not ready to be used. Table ‘mysql.gtid_executed’ cannot be opened.</p><p>201x-xx-xx T07:10:14.168555Z 1 [Note] A temporary password is generated for root@localhost: xxxxxxxxx.</p><p><strong>注意最后一行，它给了root一个初始密码(xxxxxxxxx)，后面要登录的时候要用到这个密码。</strong></p><h3 id="3-4-配置"><a href="#3-4-配置" class="headerlink" title="3.4 配置"></a>3.4 配置</h3><p>配置 /etc 下的 my.cnf 文件，如果没有请创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /usr/local/mysql/data</span><br><span class="line">port = 3306</span><br><span class="line">socket = /usr/local/mysql/tmp/mysql.sock</span><br><span class="line"> </span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">socket = /usr/local/mysql/tmp/mysql.sock</span><br></pre></td></tr></table></figure><h2 id="4、后台运行服务端"><a href="#4、后台运行服务端" class="headerlink" title="4、后台运行服务端"></a>4、后台运行服务端</h2><p>注意：请将{mysql} 替换成 您的mysql安装路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;mysql&#125;/bin/mysqld_safe &amp;</span><br></pre></td></tr></table></figure><p>使用<code>ps -ef | grep mysql</code>  或者  <code>netstat -nap | grep 3306</code>   - 查看进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;mysql&#125;/bin/mysqladmin -uroot -p          - 停止</span><br></pre></td></tr></table></figure><p>如果出现错误，请检查前面几步是否出错。</p><h2 id="5、设置mysql以服务运行并且开机启动"><a href="#5、设置mysql以服务运行并且开机启动" class="headerlink" title="5、设置mysql以服务运行并且开机启动"></a>5、设置mysql以服务运行并且开机启动</h2><p>将{mysql}/ support-files/mysql.server 拷贝为/etc/init.d/mysql并设置运行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp mysql.server /etc/init.d/mysql</span><br><span class="line">chmod +x /etc/init.d/mysql</span><br></pre></td></tr></table></figure><p>把mysql注册为开机启动的服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --add mysql</span><br></pre></td></tr></table></figure><p>当然也可以手动进行服务的开启和关闭：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start</span><br><span class="line">/etc/init.d/mysql stop</span><br></pre></td></tr></table></figure><h2 id="6、连接客户端"><a href="#6、连接客户端" class="headerlink" title="6、连接客户端"></a>6、连接客户端</h2><p>创建客户端的软链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#123;mysql&#125;/bin/mysql /usr/local/bin/mysql</span><br></pre></td></tr></table></figure><p>客户端连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>输入刚才的初始化密码进入</p><p>进入之后，修改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;您的新密码&apos;;</span><br></pre></td></tr></table></figure><p>配置远程可以连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql                # 打开mysql数据库  </span><br><span class="line">update user set host=&apos;%&apos; where user=&apos;root&apos; and host=&apos;localhost&apos;;   # 将host设置为%表示任何ip都能连接mysql，当然也可以将host指定为某个ip  </span><br><span class="line">flush privileges;        # 刷新权限表，使配置生效</span><br></pre></td></tr></table></figure><p>关闭远程连接，恢复mysql的默认设置（只能本地连接）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set host=&apos;localhost&apos; where user=&apos;root&apos;;   #将host设置为localhost表示只能本地连接mysql</span><br></pre></td></tr></table></figure><p>也可以添加一个用户名为aaa，密码为xxx，权限为%（表示任意ip都能连接）的远程连接用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to &apos;aaa&apos;@&apos;%&apos; identified by &apos;xxx&apos;;</span><br></pre></td></tr></table></figure><p>至此，MySQL5.7安装完毕。</p><p>当然也可以使用Mariadb，它是MySQL5.x的一个分支，命令用法和MySQL5.x是一样的，安装（可以使用yum安装）步骤如下：</p><p>1、在安装之前可以先搜索yum管理工具中有没有mariadb的软件包，在命令行下：</p><p>yum search mariadb-server mariadb</p><p>2、如果存在，就可以使用yum管理工具来安装，在命令行下：</p><p>yum install mariadb-server mariadb</p><p>等待安装完成</p><p>4、启动/停止/重启数据库服务</p><p>systemctl start/stop/restart mariadb</p><p>设置开机自启</p><p>systemctl enable mariadb</p><p>取消开机自启</p><p>systemctl disable mariadb</p><p>4、连接数据库</p><p>mysql -u root -p</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Linux（CentOS7）下安装MySQL5-x&quot;&gt;&lt;a href=&quot;#在Linux（CentOS7）下安装MySQL5-x&quot; class=&quot;headerlink&quot; title=&quot;在Linux（CentOS7）下安装MySQL5.x&quot;&gt;&lt;/a&gt;在Linux（C
      
    
    </summary>
    
      <category term="Linux" scheme="http://alexyanglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="MySQL" scheme="http://alexyanglong.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>在Linux（CentOS7）下构建安装Python3.x</title>
    <link href="http://alexyanglong.github.io/2018/05/10/%E5%9C%A8Linux%EF%BC%88CentOS7%EF%BC%89%E4%B8%8B%E6%9E%84%E5%BB%BA%E5%AE%89%E8%A3%85Python3.x/"/>
    <id>http://alexyanglong.github.io/2018/05/10/在Linux（CentOS7）下构建安装Python3.x/</id>
    <published>2018-05-09T16:00:00.000Z</published>
    <updated>2018-06-05T02:27:46.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Linux（CentOS7）下构建安装Python3-x"><a href="#在Linux（CentOS7）下构建安装Python3-x" class="headerlink" title="在Linux（CentOS7）下构建安装Python3.x"></a>在Linux（CentOS7）下构建安装Python3.x</h1><p>Linux环境自带了Python 2.x版本，但是如果要使用3.x的版本，可以先在<a href="https://www.python.org/" target="_blank" rel="noopener">Python的官方网站</a>下载Python的源代码并通过源代码构建安装的方式进行安装，具体的步骤如下所示。</p><h2 id="1、安装依赖库"><a href="#1、安装依赖库" class="headerlink" title="1、安装依赖库"></a>1、安装依赖库</h2><p>因为没有这些依赖库可能在源代码构件安装时因为缺失底层依赖库而失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure><h2 id="2、下载Python源代码并解压缩到指定目录"><a href="#2、下载Python源代码并解压缩到指定目录" class="headerlink" title="2、下载Python源代码并解压缩到指定目录"></a>2、下载Python源代码并解压缩到指定目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz</span><br><span class="line">xz -d Python-3.6.1.tar.xz</span><br><span class="line">tar -xvf Python-3.6.1.tar</span><br></pre></td></tr></table></figure><h2 id="3、配置和安装"><a href="#3、配置和安装" class="headerlink" title="3、配置和安装"></a>3、配置和安装</h2><p>先切换至Python源代码目录并执行下面的命令进行配置和安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Python-3.6.1</span><br><span class="line">./configure --prefix=/usr/local/python36 --enable-optimizations</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="4、创建软链接"><a href="#4、创建软链接" class="headerlink" title="4、创建软链接"></a>4、创建软链接</h2><p>这样就可以直接通过python3直接启动Python解释器，pip管理工具，2to3转换工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/python36/bin/python3 /usr/bin/python3</span><br><span class="line">ln -s /usr/local/python36/bin/pip3 /usr/bin/pip3</span><br><span class="line">ln -s /usr/local/python36/bin/2to3 /usr/bin/2to3</span><br></pre></td></tr></table></figure><h2 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3-  进入python3.X的交互环境</span><br><span class="line">pip3 -V-  查看pip的版本</span><br><span class="line">2to3-  查看2to3</span><br></pre></td></tr></table></figure><p>如果没有报错，就安装成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Linux（CentOS7）下构建安装Python3-x&quot;&gt;&lt;a href=&quot;#在Linux（CentOS7）下构建安装Python3-x&quot; class=&quot;headerlink&quot; title=&quot;在Linux（CentOS7）下构建安装Python3.x&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Linux" scheme="http://alexyanglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>在Linux（CentOS7）下安装Nginx服务器</title>
    <link href="http://alexyanglong.github.io/2018/05/10/%E5%9C%A8Linux%EF%BC%88CentOS7%EF%BC%89%E4%B8%8B%E5%AE%89%E8%A3%85Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://alexyanglong.github.io/2018/05/10/在Linux（CentOS7）下安装Nginx服务器/</id>
    <published>2018-05-09T16:00:00.000Z</published>
    <updated>2018-06-05T02:08:30.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Linux（CentOS7）下安装Nginx服务器"><a href="#在Linux（CentOS7）下安装Nginx服务器" class="headerlink" title="在Linux（CentOS7）下安装Nginx服务器"></a>在Linux（CentOS7）下安装Nginx服务器</h1><p>nginx是一款高性能的web服务器，在Linux中可以使用 yum 来安装，安装步骤如下：</p><h2 id="1、检查yum包管理工具中有没有Nginx"><a href="#1、检查yum包管理工具中有没有Nginx" class="headerlink" title="1、检查yum包管理工具中有没有Nginx"></a>1、检查yum包管理工具中有没有Nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search nginx</span><br></pre></td></tr></table></figure><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><h2 id="3、启动nginx服务器"><a href="#3、启动nginx服务器" class="headerlink" title="3、启动nginx服务器"></a>3、启动nginx服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx-  如果没有报错，就OK</span><br></pre></td></tr></table></figure><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p>在浏览器地址栏输入主机公网ip，进行测试查看。注意：先确保主机的80端口[web服务默认80端口]是开启的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Linux（CentOS7）下安装Nginx服务器&quot;&gt;&lt;a href=&quot;#在Linux（CentOS7）下安装Nginx服务器&quot; class=&quot;headerlink&quot; title=&quot;在Linux（CentOS7）下安装Nginx服务器&quot;&gt;&lt;/a&gt;在Linux（C
      
    
    </summary>
    
      <category term="Linux" scheme="http://alexyanglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="Nginx" scheme="http://alexyanglong.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell的基本使用</title>
    <link href="http://alexyanglong.github.io/2018/05/05/Linux%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://alexyanglong.github.io/2018/05/05/Linux的基本使用/</id>
    <published>2018-05-04T16:00:00.000Z</published>
    <updated>2018-06-05T02:07:22.128Z</updated>
    
    <content type="html"><![CDATA[<p>#Linux Shell的基本使用</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./Linux简介.jpg" alt="Linux简介" title="">                </div>                <div class="image-caption">Linux简介</div>            </figure><p>操作系统发展史图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./操作系统发展史.png" alt="操作系统发展史" title="">                </div>                <div class="image-caption">操作系统发展史</div>            </figure><p>##Linux的基本命令（centos7）</p><p><code>who</code> 或 <code>w</code>：查看当前登录的所有用户</p><p><code>who am i</code> 或 <code>whoami</code>：查看当前登录用户</p><p><code>last</code>：查看之前登录过的用户历史记录</p><p><code>clear</code>：清屏</p><p><code>ps</code>：查看进程状态</p><p>​    <code>ps -ef</code>：查看进程</p><p>​    <code>ps -aux</code>：查看进程</p><p><code>kill</code> ： 进程号：杀掉进程</p><p><code>netstat -nap</code>：查看进程、端口、进程号</p><p><code>adduser 用户名</code>：创建新用户</p><p><code>userdel 用户名</code>：删除用户</p><p><code>passwd [用户名]</code>：修改用户密码，不加用户名是修改的root的密码</p><p><code>ssh 用户名@ip地址</code>：远程安全连接其他的服务器</p><p><code>logout</code> 或 <code>exit</code>：退出</p><p><code>reboot</code>：重启服务器</p><p><code>shutdown</code>：关闭服务器</p><p><code>init 0</code>：关机</p><p><code>init 6</code>：重启</p><p><code>uname</code>：查看当前系统</p><p><code>hostname</code>：查看主机名</p><p><code>history</code>：查看历史命令，默认保存最近1000条，可以使用 HISTSIZE=新值 来修改保存的条数</p><p>​    <code>!num(命令行号)</code>：重新执行改行命令</p><p><code>man 命令</code>：查看’命令‘的使用方式</p><p><code>info 命令</code>：查看’命令‘的使用方式，更详细</p><p><code>命令 --help</code>：查看’命令‘的参数使用方法</p><p><code>whatis 命令</code>：查看命令的简短描述</p><p><code>pwd</code>：打印当前工作目录路径 - print working directory</p><p><code>whereis 命令</code>：查找包含 ’命令‘ 所有的目录路径</p><p><code>which 命令</code>：查找到第一个含有 ’命令‘ 的目录路径</p><p><code>su 用户名</code>：切换到该用户，但是不会切换到该用户的文件目录</p><p><code>su - 用户名</code>：切换到该用户，并且切换到该用户的文件目录</p><p><code>sudo 命令操作</code>：以管理员身份执行</p><p><code>mkdir 目录名</code>：创建目录</p><p><code>rmdir 目录名</code>：删除空目录</p><p><code>rm 目录名/文件名</code>：删除目录或者文件，可以加参数</p><p>​    -i：交互式删除，有提示 interactive</p><p>​    -f：不用提示，直接删除 force</p><p>​    -r：递归删除目录下的内容  recursive</p><p><code>ls</code>：查看当前目录下的所有文件和目录（非隐藏），可以加参数</p><p>​    -l：查看当前目录下的所有文件和目录，长格式（非隐藏）</p><p>​    -a：查看当前目录下的所有文件和目录</p><p>​    -al  或 -l -a：查看当前目录下的所有文件和目录，长格式</p><p>​    -r：反转显示目录下的文件和目录，按字母表降序</p><p>​    -R：递归显示目录下的文件和目录</p><p><code>touch 文件名</code>：没有该文件就创建一个空文件，有只是改变其时间戳，可以修改文件的三个时间：修改内容的时间，更改权限的时间，最后访问的时间</p><p><code>cd 目录</code>：切换目录  - change directory</p><p>​    <code>cd /root</code>：回到root主目录 （/root  绝对路径） （/root：root用户主目录，/etc：放置配置文件目录</p><p>/home：其他用户的用户主目录，/usr：用户数据、用户应用目录）</p><p>​    <code>cd ~</code>：回到当前用户主目录</p><p>​    <code>cd ..</code>：回到上一级</p><p>​    <code>cd /</code>：回到根目录</p><p><code>cp 文件名 路径</code>：将文件拷贝到路径下，可以重命名</p><p><code>scp 本地文件 用户名@ip地址:路径</code>：将本地文件安全拷贝到目标服务器的某路径下</p><p><code>sftp 用户名@ip地址</code>：安全的远程文件传输</p><p><code>mv 文件名/目录 路径</code>：将文件/目录剪切（移动）到路径下，可以重命名</p><p><code>cat 文件名</code>：查看文件所有内容</p><p>​    <code>cat 文件名 -n</code>：查看文件内容并显示行号</p><p>​    <code>cat 文件名| more 或 less</code>：一页一页查看</p><p>​    <code>cat 文件名| grep pattern</code>：搜索文件中的内容，匹配模式pattern匹配的字符串</p><p><code>head  -n 文件</code>：查看文件前 n 行</p><p><code>tail -n 文件</code>：查看文件最后 n 行</p><p><code>wget 资源路径</code>：联网获取资源</p><p>​    <code>wget -O filename 资源路径</code>：获取资源并给资源重命名</p><p><code>grep pattern 文件1</code>：搜索文件1中的内容，匹配模式pattern匹配的字符串</p><p><code>find</code>：查找文件或目录</p><p><code>jobs</code>：查看正在执行的后台任务列表</p><p><code>fg %n</code>：将编号为 n 的后台任务拿到前台执行</p><p><code>bg %n</code>：将编号为 n 的后台暂停任务继续在后台执行</p><p><code>top</code>：查看CPU的状态</p><p><code>wc 文件</code>：统计文件的行数、单词数、字符数，可以加参数</p><p>​    -l：行数</p><p>​    -w：单词数</p><p><code>uniq 文件</code>：将文件中的内容去重显示，注意只能去相邻的重复的，不改变原文件内容</p><p><code>sort 文件</code>：将文件中的内容进行排序显示，不改变原文件内容</p><p><code>diff 文件1 文件2</code>：比较两个文件的差异，并显示不同之处</p><p><code>file 文件</code>：显示文件的性质</p><p><code>date</code>：查看当前时间</p><p><code>cal</code>：查看日历</p><p><code>echo</code>：回声命令</p><p>​    <code>echo string</code>：在屏幕上输出string</p><p>​    <code>echo string &gt; 文件</code>：将string输出到文件中</p><p>​    <code>echo $a</code>：在屏幕上打印变量a的值</p><p><code>ln</code>：创建链接</p><p><code>ln 路径1/文件1 路径2/文件2</code>：给路径1下的文件1在路径2下创建名为文件2的硬链接，存储的是文件1内容的引用，相当于备份，但是不会占用空间</p><p><code>ln -s 路径1/文件1 路径2/文件2</code>：给路径1下的文件1在路径2下创建名为文件2的软链接，相当于快捷方式，不是引用</p><p><code>gzip 文件名</code>：压缩</p><p><code>gunzip 文件名</code>：解压缩</p><p><code>xz</code>：压缩、解压缩，可以加参数</p><p>​    <code>xz -z 文件名</code>：压缩</p><p>​    -0 … -9：压缩比，值越大，压缩率越大</p><p>​    <code>xz -d 文件名</code>：解压缩</p><p><code>tar</code>：归档</p><p>​    -x：抽取，解归档</p><p>​    -v：显示解归档的过程</p><p>​    -f：指定文件名</p><p>​    <code>tar -xvf 文件名</code>：解归档使用</p><p>​    -t：查看归档文件的内容</p><p>​    -c：归档</p><p>​    <code>tar -cvf 归档文件名 源文件路径</code>：归档使用</p><p><code>alias 名称=&#39;命令 [参数]&#39;</code>：给 ‘命令 参数’ 起别名</p><p><code>unalias 名称</code>：取消别名</p><p><code>!v</code>：把刚刚以v开头的命令在执行一遍</p><p>&amp;：后台执行</p><p>>文件2：输出重定向，将运行结果输出到文件2</p><p>2&gt; 文件3：错误重定向，将错误输出到文件3</p><p>>&gt; 文件4：追加输出重定向，将运行结果追加输出到文件4</p><p>&lt;：输入重定向</p><p>##vi / vim 编辑器的使用：</p><p><code>i</code> 或 <code>a</code>：进入编辑模式</p><p><code>ESC</code>：退出编辑模式，进入命令模式</p><p><code>:</code> ：在命令模式下，按 : 键进入末行模式</p><p>###在命令模式下：</p><p><code>yy</code>：复制本行</p><p><code>num yy</code>：复制num行</p><p><code>p</code>：粘贴</p><p><code>dd</code>：删除本行</p><p><code>num dd</code>：删除num行</p><p><code>dw</code>：删除一个单词</p><p><code>dG</code>：删除所有内容</p><p><code>d$</code>：从当前位置删除到行末尾</p><p><code>u</code>：撤销</p><p><code>G</code>：去到最后一行</p><p><code>num G</code>：去到num行</p><p><code>gg</code>：回到第一行</p><p><code>Ctrl y</code>：向上翻一行</p><p><code>Ctrl e</code>：向下翻一行</p><p><code>Ctrl f</code>：向下翻一页</p><p><code>Ctrl b</code>：向上翻一页</p><p><code>ZZ</code>：保存并退出</p><p>###在末行模式下：</p><p><code>:!系统命令</code>：在vim编辑器执行系统命令，执行完后回车，回到vim编辑器  eg： :!cal </p><p><code>:wq</code>：保存并退出</p><p><code>:q!</code>：不保存退出</p><p><code>:set nu</code>：显示行号</p><p><code>:set nonu</code>：取消行号</p><p><code>:syntax off</code>：关闭高亮语法    :syntax on：开启高亮语法</p><p><code>:set ts=4</code>：将制表键设置为4个空格</p><p><code>/string</code>：搜索string， 按 n 键向下搜索， 按 N 键向上搜索</p><p><code>:1,$s/string1/string2/g</code>：将文件中从第一行到最后一行的所有string1换成string2</p><p><code>:inoremap 快捷键名 对应的代码</code>  ：自定义快捷键   eg： :inoremap pymain if <strong>name</strong> == ‘<strong>main</strong>‘</p><p>##文件、目录权限：</p><p>-             rwx                  rwx                    rwx:</p><p>类型      所有者权限     同组用户权限    其他用户权限</p><p>类型：文件（-）、目录（d）、链接（l）</p><p>r：read  4        - 0b(100)</p><p>w：write   2     - 0b(10)</p><p>x：excute  1     - 0b(1)</p><p><code>chmod 权限 文件/目录</code>：修改文件/目录的权限</p><p><code>chmod 777 文件/目录</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Linux Shell的基本使用&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://alexyanglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript总结</title>
    <link href="http://alexyanglong.github.io/2018/04/28/JavaScript%E6%80%BB%E7%BB%93/"/>
    <id>http://alexyanglong.github.io/2018/04/28/JavaScript总结/</id>
    <published>2018-04-27T16:00:00.000Z</published>
    <updated>2018-06-05T02:30:12.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript总结"><a href="#JavaScript总结" class="headerlink" title="JavaScript总结"></a>JavaScript总结</h1><p>JavaScript： JS - Behavior</p><p>​    ECMAScript  -  语法规范  -  ES5</p><p>​    BOM  -  浏览器对象模型  -  window</p><p>​    DOM  -  文档对象模型  -  document</p><h2 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><p>JavaScript 有隐式的类型转换。</p><p>​    简单数据类型： <code>number</code>、<code>string</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code></p><p>​    复杂数据类型： <code>object</code></p><p>​    可以使用 <code>typeof()</code> 查看数据类型</p><h2 id="JavaScript-运算符"><a href="#JavaScript-运算符" class="headerlink" title="JavaScript 运算符"></a>JavaScript 运算符</h2><p>​    算术运算符：<code>+</code> 、<code>-</code>、 <code>*</code>、<code>/</code>、 <code>%</code> 、<code>**</code>（ES7版本）</p><p>​    赋值运算符：<code>=</code> 、<code>+=</code>、 <code>-=</code>、 <code>*=</code>、 <code>/=</code>、<code>%=</code></p><p>​    比较（关系）运算符： <code>&gt;</code>、 <code>&gt;=</code>、 <code>&lt;</code>、 <code>&lt;=</code>、 <code>==</code>、 <code>!=</code> 、<code>===</code>（不带隐式类型转换的等于，全等于）、<code>!==</code>（严格不等于）</p><p>​    逻辑运算符： <code>&amp;&amp;</code>（短路与）、 <code>||</code>（短路或）、 <code>!</code></p><p>​    自增自减运算符： <code>++</code> 、<code>--</code></p><p>​    位运算、成员运算</p><h2 id="JavaScript-中的全局函数"><a href="#JavaScript-中的全局函数" class="headerlink" title="JavaScript 中的全局函数"></a>JavaScript 中的全局函数</h2><p><code>isNaN()</code>  判断是不是 不是一个数</p><p><code>parseInt()</code>  取整，如果取不出，返回<code>NaN</code></p><p><code>parseFloat()</code>  取小数，如果取不出，返回<code>NaN</code></p><p><code>isFinite()</code>  判断是不是有限的数</p><p><code>eval()</code>  - evaluate  - 容易引发XSS（跨站脚本攻击）</p><p><code>encodeURIcomponent()</code>  编成 百分号 编码</p><p><code>decodeURIcomponent()</code>  从百分号编码 解码</p><h2 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h2><p>获取的对象元素：</p><p><code>document.getElementById(#id)</code></p><p><code>document.getElementByClassName(.class)</code></p><p><code>document.getElementByTagName(标签)</code></p><p><code>querySelector()</code> ： 根据指定的选择器查找单个元素</p><p><code>querySelectorAll()</code> ： 根据指定的选择器查找所有元素</p><p><code>this</code>  // this 表示引发当前事件的对象元素</p><p>// <code>evt</code> 表示当前事件，<code>evt.target</code> 表示引发当前事件的事件源</p><p>//  需要在函数参数中 传入<code>evt</code> 对象</p><p><code>evt = evt || window.event;  // 兼容低版本的IE</code></p><p><code>var target = evt.target || evt.srcElement;</code></p><p>在定义函数时，如果没有传入参数，那么函数中有一个隐藏的 arguments 对象，它代表了参数的列表，在调用时，可以传入任意多个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">alert(<span class="built_in">arguments</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><p><code>document</code>  文档</p><p><code>location</code>  地址栏  - <code>href</code> / <code>reload</code> / <code>replace</code></p><p><code>history</code>  历史记录  - <code>go</code> / <code>forward</code> / <code>back</code></p><p><code>navigator</code>  浏览器</p><p><code>screen</code>  操作系统窗口  - <code>availWidth</code>/ <code>availHeight</code> / <code>width</code> / <code>height</code></p><p><code>alert</code> /<code>confirm</code> / <code>prompt</code></p><p><code>open</code> / <code>close</code></p><p><code>setTimeout</code> / <code>setInterval</code> / <code>clearTimeout</code> / <code>clearInterval</code></p><p>修改节点的内容和属性</p><p><code>textContent</code></p><p><code>innerHTML</code></p><p><code>nodeValue</code></p><p>访问成员运算符 .</p><p><code>setAttribute</code> / <code>getAttribute</code> / <code>removeAttribute</code></p><p>创建新节点</p><p><code>createElement</code></p><p>追加新节点</p><p><code>appendChild</code></p><p><code>insertBefore</code></p><p>移除子节点</p><p><code>removeChild</code></p><p>通过自己节点访问父节点</p><p><code>parentNode</code></p><p>通过自己节点访问子节点</p><p><code>children</code> 所有</p><p><code>firstChild</code> 第一个</p><p><code>lastChild</code> 最后一个</p><p>通过自己节点访问兄弟节点</p><p><code>nextSibling</code>  前面的兄弟</p><p><code>prevSibling</code>  后面的兄弟</p><h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><p>jQuery的$函数的作用:</p><p>1、<code>$(function() {})</code> $() 函数传入的是一个函数，表示该函数是在页面加载完成之后要执行的回调函数</p><p>2、<code>$(selector)</code>  $() 函数传入的是一个选择器，表示通过选择器获得对应的元素，并处理成 jQuery对象，jQuery对象的本质是一个数组，如果要将jQuery对象转成原生js对象，使用下标或者<code>get()</code> 运算</p><p>3、<code>$(element)</code>  $() 函数传入的是一个原生js对象，表示将其转成jQuery对象</p><p>4、<code>$(标签)</code>  $() 函数传入的是一个标签，表示创建对应的元素并处理成jQuery对象</p><p>注意：当jQuery库和其他的库中的 <code>$函数</code> 有冲突，可以使用以下方法解决：</p><p>​    <code>jQuery.noConflict()</code>  将jQuery库中的 <code>$函数</code> 不起作用，但是jQuery库可以使用jQuery来替代 <code>$</code>，其他库可以使用 <code>$函数</code>。</p><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><ul><li>选择器</li></ul><ul><li><ul><li><code>*</code> / <code>element</code> / <code>#id</code> / <code>.class</code> / <code>selector1, selector2</code></li><li><code>ancestor descendant</code> / <code>parent&gt;child</code> / <code>previous+next</code> / <code>previous~siblings</code></li></ul></li></ul><ul><li>筛选器</li></ul><ul><li><ul><li>基本筛选器：<code>:not(selector)</code>/ <code>:first</code> / <code>:last</code> / <code>:even</code> / <code>:odd</code> / <code>:eq(index)</code> / <code>:gt(index)</code> / <code>:lt(index)</code> / <code>:animated</code> / <code>:focus</code></li><li>内容筛选器：<code>:contains(&#39;…&#39;)</code>/ <code>:empty</code> / <code>:parent</code> / <code>:has(selector)</code></li><li>可见性筛选器：<code>:hidden</code> / <code>:visible</code></li><li>子节点筛选器：<code>:nth-child(expr)</code> / <code>:first-child</code> / <code>:last-child</code> / <code>:only-child</code></li><li>属性筛选器：<code>[attribute]</code> / <code>[attribute=&#39;value&#39;]</code> / <code>[attribute!=&#39;value&#39;]</code> / <code>[attribute^=&#39;value&#39;]</code> / <code>[attribute$=&#39;value&#39;]</code> / <code>[attribute|=&#39;value&#39;]</code> / <code>[attribute~=&#39;value&#39;]</code></li></ul></li></ul><ul><li>表单： <code>:input</code> / <code>:text</code> / <code>:password</code> / <code>:radio</code> / <code>:checkbox</code> / <code>:submit</code> / <code>:image</code> / <code>:reset</code> / <code>:button</code> / <code>:file</code> / <code>:selected</code> / <code>:enabled</code> / <code>:disabled</code> / <code>:checked</code></li></ul><h3 id="执行操作"><a href="#执行操作" class="headerlink" title="执行操作"></a>执行操作</h3><ul><li>内容操作</li></ul><ul><li><ul><li>获取/修改内容：<code>html()</code> / <code>text()</code> / <code>replaceWith()</code> / <code>remove()</code></li><li>获取/设置元素：<code>before()</code> / <code>after()</code> / <code>prepend()</code> / <code>append()</code> / <code>remove()</code> / <code>clone()</code> / <code>unwrap()</code> / <code>detach()</code> / <code>empty()</code> / <code>add()</code></li><li>获取/修改属性：<code>attr()</code> / <code>removeAttr()</code> / <code>addClass()</code> / <code>removeClass()</code> / <code>css()</code></li><li>获取/设置表单值：<code>val()</code></li></ul></li></ul><ul><li>查找操作</li></ul><ul><li><ul><li>查找方法：<code>find()</code> / <code>parent()</code> / <code>children()</code> / <code>siblings()</code> / <code>next()</code> / <code>nextAll()</code> / <code>prev()</code> / <code>prevAll()</code></li><li>筛选器：<code>filter()</code> / <code>not()</code> / <code>has()</code> / <code>is()</code> / <code>contains()</code></li><li>索引编号：<code>eq()</code></li></ul></li></ul><ul><li>尺寸和位置</li></ul><ul><li><ul><li>尺寸相关：<code>height()</code> / <code>width()</code> / <code>innerHeight()</code> / <code>innerWidth()</code> / <code>outerWidth()</code> / <code>outerHeight()</code></li><li>位置相关：<code>offset()</code> / <code>position()</code> / <code>scrollLeft()</code> / <code>scrollTop()</code></li></ul></li></ul><ul><li>特效和动画</li></ul><ul><li><ul><li>基本动画：<code>show()</code> / <code>hide()</code> / <code>toggle()</code></li><li>消失出现：<code>fadeIn()</code> / <code>fadeOut()</code> / <code>fadeTo()</code> / <code>fadeToggle()</code></li><li>滑动效果：<code>slideDown()</code> / <code>slideUp()</code> / <code>slideToggle()</code></li><li>自定义：<code>delay()</code> / <code>stop()</code> / <code>animate()</code></li></ul></li></ul><ul><li>事件</li></ul><ul><li><ul><li>文档加载：<code>ready()</code> / <code>load()</code></li><li>用户交互：<code>on()</code> / <code>off()</code></li></ul></li></ul><h2 id="AJAX-Asynchronous-JavaScript-and-XML"><a href="#AJAX-Asynchronous-JavaScript-and-XML" class="headerlink" title="AJAX - Asynchronous JavaScript and XML"></a>AJAX - Asynchronous JavaScript and XML</h2><p>让浏览器向服务器发出异步请求(非阻塞式请求)，等服务器返回了响应数据(JSON/XML)后就可以对页面进行局部刷新，这样就可以在不中断用户体验的前提下刷新页面数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url: 向服务器发送请求的url</span><br><span class="line">type: 发送请求的类型（get、post、put、patch、<span class="keyword">delete</span>等）</span><br><span class="line">data: 发送请求时需要向服务器提交的数据，不是必填项</span><br><span class="line">datatype: 接收服务器返回数据的类型</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">      执行成功时，回调的函数</span><br><span class="line">&#125;,</span><br><span class="line">error: <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">      执行失败时，回调的函数</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript总结&quot;&gt;&lt;a href=&quot;#JavaScript总结&quot; class=&quot;headerlink&quot; title=&quot;JavaScript总结&quot;&gt;&lt;/a&gt;JavaScript总结&lt;/h1&gt;&lt;p&gt;JavaScript： JS - Behavior&lt;/p&gt;

      
    
    </summary>
    
      <category term="Web前端" scheme="http://alexyanglong.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://alexyanglong.github.io/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://alexyanglong.github.io/tags/jQuery/"/>
    
      <category term="AJAX" scheme="http://alexyanglong.github.io/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>HTML+CSS总结</title>
    <link href="http://alexyanglong.github.io/2018/04/25/HTML+CSS%E6%80%BB%E7%BB%93/"/>
    <id>http://alexyanglong.github.io/2018/04/25/HTML+CSS总结/</id>
    <published>2018-04-24T16:00:00.000Z</published>
    <updated>2018-06-05T02:31:35.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-CSS总结"><a href="#HTML-CSS总结" class="headerlink" title="HTML+CSS总结"></a>HTML+CSS总结</h1><p>Web前端主要包含三部分内容：</p><p>1、Tag：HTML标签，用来装要显示的内容、数据。</p><p>2、CSS：Display，对要显示的内容进行渲染。</p><p>3、JavaScript：Behavior，交互、行为，使用户具有更好的体验。</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>​    HTML （Hyper Text Markup Language，超文本标记语言）是用来描述网页的一种语言，它包含了一系列的标签。</p><p>​    html：此标签可告知浏览器其自身是一个 HTML 文档。<code>&lt;html&gt;</code> 与 <code>&lt;/html&gt;</code> 标签限定了文档的开始点和结束点，在它们之间是文档的头部和主体。</p><p>​    head：此标签用于定义文档的头部，它是所有头部元素的容器。<code>&lt;head&gt;</code> 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等等。文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。下面这些标签可用在 head 部分：<code>&lt;base&gt;</code> 、<code>&lt;link&gt;</code> 、<code>&lt;meta&gt;</code> 、<code>&lt;style&gt;</code> 、<code>&lt;script&gt;</code> 和 <code>&lt;title&gt;</code> 。<code>&lt;title&gt;</code> 定义文档的标题，它是 head 部分中唯一必需的元素。</p><p>​    body：此标签定义文档的主体。包含文档的所有要进行显示的内容（比如文本<code>&lt;span&gt;</code> <code>&lt;p&gt;</code> 、上标<code>&lt;sup&gt;</code> 、下标<code>&lt;sub&gt;</code> 、超链接<code>&lt;a&gt;</code>、图像<code>&lt;img&gt;</code>、表格<code>&lt;table&gt;</code> 、列表<code>&lt;ul&gt;</code> <code>&lt;ol&gt;</code> <code>&lt;dl&gt;</code> 、逻辑语义块<code>&lt;header&gt;</code> <code>&lt;section&gt;</code> <code>&lt;aside&gt;</code> <code>&lt;footer&gt;</code> <code>&lt;div&gt;</code> 、标题<code>&lt;h1&gt;</code>~<code>&lt;h6&gt;</code> 、换行<code>&lt;br&gt;</code> 、内嵌块<code>&lt;iframe&gt;</code> 、表单元素<code>&lt;form&gt;</code> <code>&lt;input&gt;</code> <code>&lt;button&gt;</code> <code>&lt;select&gt;</code> 、音频<code>&lt;audio&gt;</code> 、视频<code>&lt;video&gt;</code>等等）。</p><p>​    除此之外，每个标签都有自己特有的属性，例如<code>&lt;a&gt;</code> 标签有href属性、每个标签都有的class属性等等。并且还支持自定义属性，即开发人员自己定义一个不存在的属性。</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>​    CSS（Cascading Style Sheets，层叠样式表）是用来渲染HTML标签的显示样式的一种语言。根据CSS在HTML页面的位置的不同，可以分为三类：</p><p>​    内部样式表：写在<code>&lt;head&gt;</code>的<code>&lt;style&gt;</code>标签内，多用于首页。加载快。</p><p>​    外部样式表：脱离HTML页面，写在外部，可以用于其他页面。所有页面可以共享同一个样式，便于风格统一；使内容和显示分离。</p><p>​    内嵌（行内）样式表：写在每个标签的style属性内，不常用。不易于扩展。</p><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>通配符选择器： *</p><p>标签选择器： &lt;标签名&gt;</p><p>类选择器： .class</p><p>id选择器： #id</p><p>并列选择器：selector1 , selector2</p><p>后代选择器： 父 空格(所有后代)、父&gt;(儿子后代)</p><p>兄弟选择器： ~ (所有兄弟)</p><p>相邻兄弟选择器： +  (必须是相邻兄弟)</p><h3 id="标签使用哪个CSS样式进行渲染的三个原则："><a href="#标签使用哪个CSS样式进行渲染的三个原则：" class="headerlink" title="标签使用哪个CSS样式进行渲染的三个原则："></a>标签使用哪个CSS样式进行渲染的三个原则：</h3><p>​    1、就近原则： 哪个样式里标签更近就用哪个</p><p>​    2、具体性原则： #id选择器 &gt; .class选择器 &gt; 标签选择器 &gt; 通配符选择器</p><p>​    3、重要性原则： !important</p><h3 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h3><p>CSS模型：Box Model （盒模型 ） ——  由内到外：</p><p>内容 - padding - border - background-image - background-color - margin</p><h3 id="标签常用的CSS样式"><a href="#标签常用的CSS样式" class="headerlink" title="标签常用的CSS样式"></a>标签常用的CSS样式</h3><h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><p><code>border</code> 设置对象边框的特性</p><p><code>border-color</code> 设置或检索对象的边框颜色</p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p><code>font-size</code> 设置字体大小</p><p><code>font-family</code> 规定文本的字体</p><p><code>font-style</code> 规定文本的字体样式</p><p><code>font-weight</code> 规定字体的粗细</p><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><p><code>color</code> 指定文本的颜色</p><p><code>line-height</code> 设置行高</p><p><code>text-align</code> 规定文本的水平对齐方式</p><p><code>text-decoration</code> 规定添加到文本的装饰效果</p><h4 id="内外边距"><a href="#内外边距" class="headerlink" title="内外边距"></a>内外边距</h4><p><code>padding</code> 简写属性在一个声明中设置所有填充属性。该属性可以有1到4个值 <code>padding-top</code> <code>padding-right</code> <code>padding-bottom</code> <code>padding-left</code> </p><p><code>margin</code> 在一个声明中设置所有外边距属性，该属性可以有1到4个值 <code>margin-top</code>  <code>margin-right</code>  <code>margin-bottom</code>  <code>margin-left</code> </p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p><code>background-color</code> 设置或检索对象的背景颜色 </p><p><code>background-image</code> 设置或检索对象的背景图像</p><h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><p><code>display: none</code> 此元素不会被显示。</p><p><code>display: block</code> 此元素将显示为块级元素，此元素前后会带有换行符。</p><p><code>display: inline</code> 此元素会被显示为内联元素，元素前后没有换行符。</p><p><code>display: inline-block</code> 此元素会被显示为行内块元素，可以设置宽度、高度等，元素前后没有换行符。</p><p>具有<code>hidden</code> 属性的元素是不可见的。</p><h3 id="CSS-定位"><a href="#CSS-定位" class="headerlink" title="CSS 定位"></a>CSS 定位</h3><p><code>position: static</code>    正常文档流</p><p><code>position: relative</code>   相对定位（相对于元素原来的位置，没有脱离文档流，对周围元素没有影响）</p><p><code>position: absolute</code>   绝对定位（相对于父元素来设定位置，脱离了文档流，对周围元素有影响）</p><p><code>position: fixed</code>   固定定位（相对于浏览器窗口来设定位置，脱离了文档流）</p><h3 id="CSS-设置字符集"><a href="#CSS-设置字符集" class="headerlink" title="CSS 设置字符集"></a>CSS 设置字符集</h3><p><code>@charset : utf-8</code></p><p>CSS 设置字体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">  font-family： ‘字体名称’</span><br><span class="line">  src：url(字体资源路径)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-hack-technology-（CSS黑科技）"><a href="#CSS-hack-technology-（CSS黑科技）" class="headerlink" title="CSS hack technology （CSS黑科技）"></a>CSS hack technology （CSS黑科技）</h3><p>z-index 索引，当脱离文档流时，元素显示优先级冲突，设置元素z-index属性值越大就渲染在越上方</p><p>在有浮动的情况下 ，为了让父级元素计算出它的高度的方法：</p><p>1、<code>clear:both</code> 清除浮动  </p><p>2、在父元素的样式中加入 <code>overflow：auto</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML-CSS总结&quot;&gt;&lt;a href=&quot;#HTML-CSS总结&quot; class=&quot;headerlink&quot; title=&quot;HTML+CSS总结&quot;&gt;&lt;/a&gt;HTML+CSS总结&lt;/h1&gt;&lt;p&gt;Web前端主要包含三部分内容：&lt;/p&gt;
&lt;p&gt;1、Tag：HTML标签，用来
      
    
    </summary>
    
      <category term="Web前端" scheme="http://alexyanglong.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML" scheme="http://alexyanglong.github.io/tags/HTML/"/>
    
      <category term="CSS" scheme="http://alexyanglong.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（14）——进程和线程</title>
    <link href="http://alexyanglong.github.io/2018/04/20/Python%E5%9F%BA%E7%A1%80%EF%BC%8814%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
    <id>http://alexyanglong.github.io/2018/04/20/Python基础（14）——进程和线程/</id>
    <published>2018-04-19T16:00:00.000Z</published>
    <updated>2018-06-05T02:05:10.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础（14）——进程和线程"><a href="#Python基础（14）——进程和线程" class="headerlink" title="Python基础（14）——进程和线程"></a>Python基础（14）——进程和线程</h1><p>线程：是操作系统分配CPU的基本单元</p><p>进程：是操作系统分配内存的基本单元，一个进程由一个或多个线程构成</p><p>多进程、多线程：加速程序执行，提升性能；改善用户体验</p><p>​                  编写麻烦，调试更麻烦；对其他进程、线程不友好；占用更多资源</p><p>单进程 / 单线程模拟下载任务例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./单线程模拟下载例子.png" alt="单线程模拟下载例子" title="单线程模拟下载例子">                </div>                <div class="image-caption">单线程模拟下载例子</div>            </figure><p>多进程模拟下载任务例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./多进程模拟下载例子.png" alt="多进程模拟下载例子" title="多进程模拟下载例子">                </div>                <div class="image-caption">多进程模拟下载例子</div>            </figure><p>多线程模拟下载任务例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./多线程模拟下载例子.png" alt="多线程模拟下载例子" title="多线程模拟下载例子">                </div>                <div class="image-caption">多线程模拟下载例子</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础（14）——进程和线程&quot;&gt;&lt;a href=&quot;#Python基础（14）——进程和线程&quot; class=&quot;headerlink&quot; title=&quot;Python基础（14）——进程和线程&quot;&gt;&lt;/a&gt;Python基础（14）——进程和线程&lt;/h1&gt;&lt;p&gt;线程
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="线程" scheme="http://alexyanglong.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="进程" scheme="http://alexyanglong.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（13）——网络编程入门</title>
    <link href="http://alexyanglong.github.io/2018/04/17/Python%E5%9F%BA%E7%A1%80%EF%BC%8813%EF%BC%89%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://alexyanglong.github.io/2018/04/17/Python基础（13）——网络编程入门/</id>
    <published>2018-04-16T16:00:00.000Z</published>
    <updated>2018-06-05T02:04:54.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础（13）——网络编程入门"><a href="#Python基础（13）——网络编程入门" class="headerlink" title="Python基础（13）——网络编程入门"></a>Python基础（13）——网络编程入门</h1><h2 id="基于传输层协议的套接字编程"><a href="#基于传输层协议的套接字编程" class="headerlink" title="基于传输层协议的套接字编程"></a>基于传输层协议的套接字编程</h2><p>套接字这个词对很多不了解网络编程的人来说显得非常晦涩和陌生，其实说得通俗点，套接字就是一套用<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">C语言</a>写成的应用程序开发库，主要用于实现进程间通信和网络编程，在网络应用开发中被广泛使用。在Python中也可以基于套接字来使用传输层提供的传输服务，并基于此开发自己的网络应用。实际开发中使用的套接字可以分为三类：流套接字（TCP套接字）、数据报套接字和原始套接字。</p><h3 id="TCP套接字"><a href="#TCP套接字" class="headerlink" title="TCP套接字"></a>TCP套接字</h3><p>所谓TCP套接字就是使用TCP协议提供的传输服务来实现网络通信的编程接口。在Python中可以通过创建socket对象并指定type属性为SOCK_STREAM来使用TCP套接字。由于一台主机可能拥有多个IP地址，而且很有可能会配置多个不同的服务，所以作为服务器端的程序，需要在创建套接字对象后将其绑定到指定的IP地址和端口上。这里的端口并不是物理设备而是对IP地址的扩展，用于区分不同的服务，例如我们通常将HTTP服务跟80端口绑定，而MySQL数据库服务默认绑定在3306端口，这样当服务器收到用户请求时就可以根据端口号来确定到底用户请求的是HTTP服务器还是数据库服务器提供的服务。端口的取值范围是0~65535，而1024以下的端口我们通常称之为“著名端口”（留给像FTP、HTTP、SMTP等“著名服务”使用的端口，有的地方也称之为“周知端口”），自定义的服务通常不使用这些端口，除非自定义的是HTTP或FTP这样的著名服务。</p><p>TCP提供了可靠地数据传输，主要基于以下机制：</p><p>​    1、可靠通信[数据不传丢也不传错] 滑动窗口机制 </p><p>​    2、流量控制(自动调节发送数据的速度 </p><p>​    3、拥塞控制(网络拥堵时会降低发送速度)</p><p>服务器端程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM, SOCK_DGRAM</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1、创建套接字对象，并指定使用哪种传输服务</span></span><br><span class="line">    <span class="comment"># AF_INET：IPV4 AF_INET6：IPV6  SOCK_STREAM: TCP  SOCK_DGRAM: UDP  SOCK_RAW: 原始套接字</span></span><br><span class="line">    server_socket = socket(family=AF_INET, type=SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 2、绑定IP地址和端口，建议使用 1024 以后的端口</span></span><br><span class="line">    print(<span class="string">'正在绑定IP地址和端口......'</span>)</span><br><span class="line">    server_socket.bind((<span class="string">'10.7.152.89'</span>, <span class="number">9999</span>))</span><br><span class="line">    print(<span class="string">'服务器绑定IP地址和端口成功'</span>)</span><br><span class="line">    <span class="comment"># 3、启动监听 监听客户端有没有连接到服务器  512：历史经验最佳值</span></span><br><span class="line">    print(<span class="string">'正在启动服务器......'</span>)</span><br><span class="line">    server_socket.listen(<span class="number">512</span>)</span><br><span class="line">    print(<span class="string">'服务器启动成功'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4、等待连接 通过循环等待客户端连接并作出相应处理</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># 阻塞并等待连接</span></span><br><span class="line">        client_socket, addr = server_socket.accept()</span><br><span class="line">        print(str(addr) + <span class="string">'连接到了服务器.'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5、发送数据</span></span><br><span class="line">        client_socket.send(str(datetime.now()).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="comment"># 6、断开连接</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>客户端程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1、创建套接字 socket</span></span><br><span class="line">    client_socket = socket(family=AF_INET, type=SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 2、连接服务器</span></span><br><span class="line">    client_socket.connect((<span class="string">'10.7.152.89'</span>, <span class="number">9999</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3、循环发送和接收信息</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        info = client_socket.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        print(info)</span><br><span class="line">        <span class="comment"># client_socket.close()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="UDP套接字"><a href="#UDP套接字" class="headerlink" title="UDP套接字"></a>UDP套接字</h3><p>传输层除了有可靠的传输协议TCP之外，还有一种非常轻便的传输协议叫做用户数据报协议，简称UDP。TCP和UDP都是提供端到端传输服务的协议，二者的差别就如同打电话和发短信的区别，后者不对传输的可靠性和可达性做出任何承诺从而避免了TCP中握手和重传的开销，所以在强调性能和而不是数据完整性的场景中（例如传输网络音视频数据），UDP可能是更好的选择。可能大家会注意到一个现象，就是在观看网络视频时，有时会出现卡顿，有时会出现花屏，这无非就是部分数据传丢或传错造成的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础（13）——网络编程入门&quot;&gt;&lt;a href=&quot;#Python基础（13）——网络编程入门&quot; class=&quot;headerlink&quot; title=&quot;Python基础（13）——网络编程入门&quot;&gt;&lt;/a&gt;Python基础（13）——网络编程入门&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="TCP编程" scheme="http://alexyanglong.github.io/tags/TCP%E7%BC%96%E7%A8%8B/"/>
    
      <category term="套接字编程" scheme="http://alexyanglong.github.io/tags/%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（12）——正则表达式</title>
    <link href="http://alexyanglong.github.io/2018/04/15/Python%E5%9F%BA%E7%A1%80%EF%BC%8812%EF%BC%89%E2%80%94%E2%80%94%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://alexyanglong.github.io/2018/04/15/Python基础（12）——正则表达式/</id>
    <published>2018-04-14T16:00:00.000Z</published>
    <updated>2018-06-05T02:04:39.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础（12）——正则表达式"><a href="#Python基础（12）——正则表达式" class="headerlink" title="Python基础（12）——正则表达式"></a>Python基础（12）——正则表达式</h1><h2 id="正则的基本符号"><a href="#正则的基本符号" class="headerlink" title="正则的基本符号"></a>正则的基本符号</h2><p>下面的表示总结了一些正则的基本符号：</p><table><thead><tr><th>符号</th><th>解释</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配任意字符</td><td>b.t</td><td>可以匹配bat / but / b#t / b1t等</td></tr><tr><td>\w</td><td>匹配字母/数字/下划线</td><td>b\wt</td><td>可以匹配bat / b1t / b_t等但不能匹配b#t</td></tr><tr><td>\s</td><td>匹配空白字符（包括\r、\n、\t等）</td><td>love\syou</td><td>可以匹配love you</td></tr><tr><td>\d</td><td>匹配数字</td><td>\d\d</td><td>可以匹配01 / 23 / 99等</td></tr><tr><td>\b</td><td>匹配单词的边界</td><td>\bThe\b</td><td></td></tr><tr><td>^</td><td>匹配字符串的开始</td><td>^The</td><td>可以匹配The开头的字符串</td></tr><tr><td>\</td><td>匹配字符串的结束\</td><td>.exe</td><td>可以匹配.exe结尾的字符串</td><td></td><td></td></tr><tr><td>\W</td><td>匹配非字母/数字/下划线</td><td>b\Wt</td><td>可以匹配b#t / b@t等但不能匹配but / b1t / b_t等</td></tr><tr><td>\S</td><td>匹配非空白字符</td><td>love\Syou</td><td>可以匹配love#you等但不能匹配love you</td></tr><tr><td>\D</td><td>匹配非数字</td><td>\d\D</td><td>可以匹配9a / 3# / 0F等</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>\Bio\B</td><td></td></tr><tr><td>[]</td><td>匹配来自字符集的任意单一字符</td><td>[aeiou]</td><td>可以匹配任一元音字母字符</td></tr><tr><td>[^]</td><td>匹配不在字符集中的任意单一字符</td><td>[^aeiou]</td><td>可以匹配任一非元音字母字符</td></tr><tr><td>*</td><td>匹配0次或多次</td><td>\w*</td><td></td></tr><tr><td>+</td><td>匹配1次或多次</td><td>\w+</td><td></td></tr><tr><td>?</td><td>匹配0次或1次</td><td>\w?</td><td></td></tr><tr><td>{N}</td><td>匹配N次</td><td>\w{3}</td><td></td></tr><tr><td>{M,}</td><td>匹配至少M次</td><td>\w{3,}</td><td></td></tr><tr><td>{M,N}</td><td>匹配至少M次至多N次</td><td>\w{3,6}</td><td></td></tr><tr><td>\</td><td></td><td>分支</td><td>foo\</td><td>bar</td><td>可以匹配foo或者bar</td></tr><tr><td>(?#)</td><td>注释</td><td></td><td></td></tr><tr><td>(exp)</td><td>匹配exp并捕获到自动命名的组中</td><td></td><td></td></tr><tr><td>(?<name>exp)</name></td><td>匹配exp并捕获到名为name的组中</td><td></td><td></td></tr><tr><td>(?:exp)</td><td>匹配exp但是不捕获匹配的文本</td><td></td><td></td></tr><tr><td>(?=exp)</td><td>匹配exp前面的位置</td><td>\b\w+(?=ing)</td><td>可以匹配I’m dancing中的danc</td></tr><tr><td>(?&lt;=exp)</td><td>匹配exp后面的位置</td><td>(?&lt;=\bdanc)\w+\b</td><td>可以匹配I love dancing and reading中的第一个ing</td></tr><tr><td>(?!exp)</td><td>匹配后面不是exp的位置</td><td></td><td></td></tr><tr><td>(?</td><td>匹配前面不是exp的位置</td><td></td><td></td></tr><tr><td>*?</td><td>重复任意次，但尽可能少重复</td><td>a.<em>ba.</em>?b</td><td>将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td></tr><tr><td>+?</td><td>重复1次或多次，但尽可能少重复</td><td></td><td></td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,N}?</td><td>重复M到N次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,}?</td><td>重复M次以上，但尽可能少重复</td><td></td></tr></tbody></table><h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><p>Python提供了re模块来支持正则表达式相关操作，下面是re模块中的核心函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>compile(pattern, flags=0)</td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td>match(pattern, string, flags=0)</td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern, string, flags=0)</td><td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern, string, maxsplit=0, flags=0)</td><td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern, repl, string, count=0, flags=0)</td><td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern, string, flags=0)</td><td>match函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td>findall(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td>purge()</td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.I / re.IGNORECASE</td><td>忽略大小写匹配标记</td></tr><tr><td>re.M / re.MULTILINE</td><td>多行匹配标记</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础（12）——正则表达式&quot;&gt;&lt;a href=&quot;#Python基础（12）——正则表达式&quot; class=&quot;headerlink&quot; title=&quot;Python基础（12）——正则表达式&quot;&gt;&lt;/a&gt;Python基础（12）——正则表达式&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="正则表达式" scheme="http://alexyanglong.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="re模块" scheme="http://alexyanglong.github.io/tags/re%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（11）——面向对象基础</title>
    <link href="http://alexyanglong.github.io/2018/04/12/Python%E5%9F%BA%E7%A1%80%EF%BC%8811%EF%BC%89%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
    <id>http://alexyanglong.github.io/2018/04/12/Python基础（11）——面向对象基础/</id>
    <published>2018-04-11T16:00:00.000Z</published>
    <updated>2018-06-05T02:04:09.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础（11）——面向对象基础"><a href="#Python基础（11）——面向对象基础" class="headerlink" title="Python基础（11）——面向对象基础"></a>Python基础（11）——面向对象基础</h1><p>在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。</p><p>面向对象的三个基本特征是：封装、继承、多态。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装是实现面向对象程序设计的第一步，封装就是将数据或函数等集合在一个个的单元中（我们称之为类）。被封装的对象通常被称为抽象数据类型。 隐藏复杂的现实细节，暴露简单的调用接口。</p><p>封装的意义：封装的意义在于保护或者防止代码（数据）被我们无意中破坏。在面向对象程序设计中数据被看作是一个中心的元素并且和使用它的函数结合的很密切，从而保护它不被其它的函数意外的修改。</p><p>​    1、保护数据成员，不让类以外的程序直接访问或修改，只能通过提供的公共的接口访问==&gt;数据封装。</p><p>​    2、方法的细节对用户是隐藏的，只要接口不变，内容的修改不会影响到外部的调用者==&gt;方法封装。</p><p>​    3、当对象含有完整的属性和与之对应的方法时称为封装。</p><p>​    4、从对象外面不能直接访问对象的属性，只能通过和该属性对应的方法访问。</p><p>​    5、对象的方法可以接收对象外面的消息。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>从已有的类创建新类的过程 提供继承信息的称为父类(超类/基类) 得到继承信息的称为子类(派生类)。继承主要实现重用代码，节省开发时间。</p><p>​    1、在类名后边的括号里一般写的是基类的类名</p><p>​    2、子类中继承自父类(基类),则父类的成员属性和成员方法都可以被子类所继承</p><p>​    3、父类中私有的成员属性不能继承给子类的</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>“一个接口，多种表现形式”。</p><p> 同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。</p><p>多态的三个条件:</p><p>​    1、继承的存在(继承是多态的基础,没有继承就没有多态)</p><p>​    2、子类重写父类的方法(多态下调用子类重写的方法)</p><p>​    3、父类引用变量指向子类对象(子类到父类的类型转换)</p><p><strong>数据抽象</strong> 一 找到和对象相关的数据——属性( 名词），可以使用包装器<code>@property</code>和修改器<code>@属性.setter</code>来装饰属性。</p><p><code>__slots__</code>限定自定义类型的对象只能绑定某些属性，可以通过在类中定义<code>__slots__</code>变量来进行限定。需要注意的是<code>__slots__</code>的限定只对当前类的对象生效，对子类并不起任何作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    # 限定Person对象只能绑定_name, _age和_gender属性</span><br><span class="line">    __slots__ = (&apos;_name&apos;, &apos;_age&apos;, &apos;_gender&apos;)</span><br></pre></td></tr></table></figure><p><strong>行为抽象</strong> 一 找到和对象相关的行为——方法（动词）</p><p><strong>成员方法</strong>：第一个参数为<code>self</code>，由实例化的对象调用</p><p><strong>类方法</strong>：使用<code>@classmethod</code>装饰的方法是类方法，与成员方法的区别在于所接收的第一个参数不是 <code>self</code> （类实例的指针），而是<code>cls</code>（当前类的具体类型）</p><p><strong>静态方法</strong>：使用<code>@staticmethod</code>装饰的方法是类静态方法，其跟成员方法的区别是没有 <code>self</code> 参数，并且可以在类不进行实例化的情况下调用</p><p><strong>魔法方法</strong>：<code>__init__()</code> 、<code>__del__()</code> 、<code>__str__()</code> 、<code>__repr__()</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础（11）——面向对象基础&quot;&gt;&lt;a href=&quot;#Python基础（11）——面向对象基础&quot; class=&quot;headerlink&quot; title=&quot;Python基础（11）——面向对象基础&quot;&gt;&lt;/a&gt;Python基础（11）——面向对象基础&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="面向对象" scheme="http://alexyanglong.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（10）——文件IO、异常处理、StringIO、BytesIO</title>
    <link href="http://alexyanglong.github.io/2018/04/10/Python%E5%9F%BA%E7%A1%80%EF%BC%8810%EF%BC%89%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6IO%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E3%80%81StringIO%E3%80%81BytesIO/"/>
    <id>http://alexyanglong.github.io/2018/04/10/Python基础（10）——文件IO、异常处理、StringIO、BytesIO/</id>
    <published>2018-04-09T16:00:00.000Z</published>
    <updated>2018-06-05T02:03:55.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础（10）——文件IO、异常处理、StringIO、BytesIO"><a href="#Python基础（10）——文件IO、异常处理、StringIO、BytesIO" class="headerlink" title="Python基础（10）——文件IO、异常处理、StringIO、BytesIO"></a>Python基础（10）——文件IO、异常处理、StringIO、BytesIO</h1><h2 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h2><p>IO操作，使用<code>open()</code> 函数，还可以使用<code>with</code>上下文关键字来确保打开的文件操作符在退出时被关闭。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(path, mode [, encoding]) <span class="keyword">as</span> f:</span><br><span class="line">操作...</span><br></pre></td></tr></table></figure><p><code>f.read([size])</code> 从文件读取指定的字节数，如果未给定或为负则读取所有。<br><code>f.write()</code> 写文件 # 如果要写入字符串以外的数据,先将他转换为字符串<br><code>f.close()</code> 关闭文件<br><code>f.readline([size])</code> 读取整行内容,包括\n字符, 如果给定参数则从文件开始读取指定的字符个数<br><code>f.readlines([sizeint])</code> 读取所有行并返回列表，若给定<code>sizeint&gt;0</code>，返回总和大约为<code>sizeint</code>字节的行, 实际读取值可能比 <code>sizeint</code> 较大, 因为需要填充缓冲区。<br><code>f.tell()</code> 返回一个整数,表示当前文件指针的位置(就是到文件头的比特数).<br><code>f.seek(偏移量,[起始位置])</code> 用来移动文件指针 <code>#偏移量:单位:比特,可正可负起始位置:0-文件头,默认值;1-当前位置;2-文件尾</code></p><p>mode模式：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./open()函数的mode方式详解.png" alt="open()函数的mode方式详解" title="open()函数的mode方式详解">                </div>                <div class="image-caption">open()函数的mode方式详解</div>            </figure><h3 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getcwd() <span class="comment"># 返回当前的工作目录 # 获取绝对路径</span></span><br><span class="line">os.listdir(path) <span class="comment"># 返回指定的文件夹包含的文件或文件夹的名字的列表</span></span><br><span class="line">os.mkdir(path) <span class="comment"># 在当前目录下创建新的目录</span></span><br><span class="line">os.rmdir(path) <span class="comment"># 删除目录, 只能删除空目录</span></span><br><span class="line">os.rename(src, dst) <span class="comment"># 对文件进行重命名</span></span><br><span class="line">os.stat(file) <span class="comment"># 获取文件属性</span></span><br><span class="line">os.remove(file) <span class="comment"># 删除文件 #可以将本文件删除</span></span><br><span class="line">os.path.join(path1, path2) <span class="comment"># 路径拼接</span></span><br><span class="line">os.path.split(path) <span class="comment"># 拆分路径 # 返回一个元组(目录, 最后一个文件/目录名称)</span></span><br><span class="line">os.path.splitext(path) <span class="comment"># 获取文件的或站名</span></span><br><span class="line">os.path.exists(path) <span class="comment"># 判断文件/目录是否存在</span></span><br><span class="line">os.path.isfile(path) <span class="comment"># 判断是否是文件</span></span><br><span class="line">os.path.getsize(file) <span class="comment"># 获取文件的大小</span></span><br><span class="line">os.path.dirname(path) <span class="comment"># 获取当前文件的目录</span></span><br><span class="line">os.path.basename(path) <span class="comment"># 获取当前文件/目录名</span></span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>在Python中处理异常使用<code>try...except...[else...][finally...]</code>关键字。</p><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">try</span>语句</span><br><span class="line"><span class="keyword">except</span> 异常类<span class="number">1</span> <span class="keyword">as</span> 变量<span class="number">1</span>:</span><br><span class="line">    异常处理语句<span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> 异常类<span class="number">2</span> <span class="keyword">as</span> 变量<span class="number">2</span>:</span><br><span class="line">    异常处理语句<span class="number">2</span></span><br><span class="line">...</span><br><span class="line">[<span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">else</span>语句]</span><br><span class="line">[<span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">finally</span>语句]</span><br></pre></td></tr></table></figure><p>执行顺序：进入try语句块，如果发生错误，依次匹配except中的异常类，匹配成功进入该异常处理块，如果不报错，会执行else中的语句，而finally不管有没有报错都会执行…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div</span><span class="params">(x , y)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = x / y</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'除数不能为0'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(res)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'Anyway，I always run'</span>)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">div(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h2><p>很多时候，数据读写不一定是文件，也可以在内存中读写，而且更快。</p><p>StringIO模块主要用于在内存缓冲区中读写数据。它只有一个StringIO类，所以它的可用方法都在类中。此类中的大部分函数都与对文件的操作方法类似。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = StringIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'hello'</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">' '</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'world!'</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line"><span class="comment"># getvalue() 方法用于获得写入后的str。</span></span><br></pre></td></tr></table></figure><h2 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h2><p>StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。BytesIO实现了在内存中读写bytes，先创建一个BytesIO对象，然后写入一些bytes。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())</span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础（10）——文件IO、异常处理、StringIO、BytesIO&quot;&gt;&lt;a href=&quot;#Python基础（10）——文件IO、异常处理、StringIO、BytesIO&quot; class=&quot;headerlink&quot; title=&quot;Python基础（10）
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="文件IO" scheme="http://alexyanglong.github.io/tags/%E6%96%87%E4%BB%B6IO/"/>
    
      <category term="异常处理" scheme="http://alexyanglong.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
      <category term="StringIO" scheme="http://alexyanglong.github.io/tags/StringIO/"/>
    
      <category term="BytesIO" scheme="http://alexyanglong.github.io/tags/BytesIO/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（9）——函数、装饰器、迭代器、生成器、变量作用域</title>
    <link href="http://alexyanglong.github.io/2018/04/08/Python%E5%9F%BA%E7%A1%80%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8%E3%80%81%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://alexyanglong.github.io/2018/04/08/Python基础（9）——函数、装饰器、迭代器、生成器、变量作用域/</id>
    <published>2018-04-07T16:00:00.000Z</published>
    <updated>2018-06-05T02:03:30.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础（9）——函数、装饰器、迭代器、生成器、变量作用域"><a href="#Python基础（9）——函数、装饰器、迭代器、生成器、变量作用域" class="headerlink" title="Python基础（9）——函数、装饰器、迭代器、生成器、变量作用域"></a>Python基础（9）——函数、装饰器、迭代器、生成器、变量作用域</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>定义函数，使用 <code>def</code> 关键字。</p><p>结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数列表...)</span>:</span></span><br><span class="line">语句...</span><br><span class="line"><span class="keyword">return</span> 返回值...</span><br></pre></td></tr></table></figure><p>函数的参数：</p><p>1、不定长参数： *args</p><p>2、关键字参数：**kwargs</p><p>匿名函数: 关键字 lambda      eg：qm = lambda x: x ** x</p><p>偏函数: 导入模块 import functools        </p><p>​    functools.partical()就是创建一个新的函数，不需要自行定义函数，直接将结果赋值给一个变量，而这个变量就是一个函数。这个函数的目的是将默认参数给固定住。</p><p>回调函数：定义函数时，将函数名作为参数传递过来，然后在函数里边再次调用函数。</p><p>常用函数：</p><p><code>abs()</code>: 返回数字的绝对值<br><code>max()</code>: 返回给定参数中的最大值<br><code>min()</code>:返回给定参数中最小的值<br><code>pow()</code>: 求幂(求次方)  [求<code>3^4</code> —&gt;  <code>print(3**4)</code> 、 <code>print(pow(3, 4))</code>]<br><code>round()</code>:四舍五入,如果只有一个参数,默认不保留小数点.参数二: 小数点后保留的位数</p><p><code>import math</code><br><code>math.ceil()</code>:向上取整<br><code>math.floor()</code>:向下取整<br><code>math.sqrt()</code>:求开方<br><code>math.modf()</code>:返回参数的整数部分和小数部分</p><p><code>import random</code><br><code>random.choice()</code>:返回列表,元祖,字典中的某一个值<br><code>random.choices()</code>:返回列表,元祖,字典中的指定个数值个值 k 关键字参数<br><code>random.random()</code>:返回0-1之间的数,  [0, 1)<br><code>random.uniform()</code>:返回指定的一个区间范围的随机数 [, )<br><code>random.randint()</code>:返回指定区间范围的随机整数 [, ]<br><code>random.shuffle()</code>:将列表中的数据进行打乱排序</p><p><code>import time</code></p><p><code>time.localtime()</code>  获取本地时间<br><code>time.asctime()</code> / <code>time.ctime()</code> 将时间转换成用户可读时间, 返回str格式  (Thu Apr 19 23:02:35 2018)<br><code>time.strftime(&#39;%Y-%m-%d %X&#39;)</code> 字符串的格式化输出, 返回str格式 (2018-04-19 23:07:51)<br><code>time.strptime(timeObject, &#39;%Y-%m-%d %X&#39;)</code>   将字符串的时间格式转换成元祖类型的时间格式</p><p><code>import datetime</code></p><p><code>datetime.datetime.now()</code> 获取当前时间<br><code>datetime.datetime(2020, 2, 2, 20, 20, 20)</code> 获取指定的时间<br><code>date1.strftime(&#39;%Y-%m-%d %X&#39;)</code>  时间字符串的格式化输出, 返回str格式</p><p><code>import calendar</code></p><p><code>calendar.month(2018, 4)</code> 获取指定的月份日历<br><code>calendar.calendar(2018)</code> 获取指定的年份日历</p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>本质还是函数（闭包函数），  一般使用装饰器来装饰其他函数。本身还是函数的调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">装饰器:</span></span><br><span class="line"><span class="string">1.在定义函数时,将函数名作为参数来传递</span></span><br><span class="line"><span class="string">2.自定义一个装饰器,(即自定义一个函数),在函数内部去调用真正的函数</span></span><br><span class="line"><span class="string">3.return 装饰器的自调</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'装饰器....'</span>)</span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">'啦啦啦....'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer  # --&gt; func1 = outer(func1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'1234567'</span>)</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">装饰器....</span></span><br><span class="line"><span class="string">1234567</span></span><br><span class="line"><span class="string">啦啦啦....</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>例如 <code>@property</code> 、<code>@属性名.setter</code> 广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器是一个可以记住遍历的位置的对象。</p><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><p>迭代器有两个基本的方法：<code>__iter()__</code> 和 <code>next()</code>。</p><p>字符串，列表或元组对象都可用于创建迭代器。</p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p><code>yield</code> 函数被称为生成器（generator），生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器， 每次遇到 <code>yield</code> 时函数会暂停并保存当前所有的运行信息，返回 <code>yield</code> 的值, 并在下一次执行 <code>next()</code> 方法时从当前位置继续运行。调用一个生成器函数，返回的是一个迭代器对象。</p><h2 id="变量作用域（LEGB）"><a href="#变量作用域（LEGB）" class="headerlink" title="变量作用域（LEGB）"></a>变量作用域（LEGB）</h2><p>L （Local） 局部作用域 </p><p>E （Enclosing） 嵌套作用域，闭包函数外的函数中 </p><p>G （Global） 全局作用域 </p><p>B （Built-in） 内建作用域</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础（9）——函数、装饰器、迭代器、生成器、变量作用域&quot;&gt;&lt;a href=&quot;#Python基础（9）——函数、装饰器、迭代器、生成器、变量作用域&quot; class=&quot;headerlink&quot; title=&quot;Python基础（9）——函数、装饰器、迭代器、生成
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="函数" scheme="http://alexyanglong.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="装饰器" scheme="http://alexyanglong.github.io/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
      <category term="迭代器" scheme="http://alexyanglong.github.io/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
      <category term="生成器" scheme="http://alexyanglong.github.io/tags/%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
      <category term="变量作用域" scheme="http://alexyanglong.github.io/tags/%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（8）——常见的字符串函数</title>
    <link href="http://alexyanglong.github.io/2018/04/05/Python%E5%9F%BA%E7%A1%80%EF%BC%888%EF%BC%89%E2%80%94%E2%80%94%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0/"/>
    <id>http://alexyanglong.github.io/2018/04/05/Python基础（8）——常见的字符串函数/</id>
    <published>2018-04-04T16:00:00.000Z</published>
    <updated>2018-06-05T02:03:08.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见的字符串函数"><a href="#常见的字符串函数" class="headerlink" title="常见的字符串函数"></a>常见的字符串函数</h1><h2 id="1、split"><a href="#1、split" class="headerlink" title="1、split"></a>1、split</h2><p>split(str=’ ‘[,num])  对字符串进行切片，并返回一个列表，str 表示按此字符串进行分割，默认是空格，num 表示最多分割多少次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'aaa sss ddd '</span></span><br><span class="line">print(str1.split(<span class="string">' '</span>, <span class="number">3</span>))  <span class="comment"># ['aaa', 'sss', 'ddd', '']</span></span><br></pre></td></tr></table></figure><h2 id="2、splitlines"><a href="#2、splitlines" class="headerlink" title="2、splitlines"></a>2、splitlines</h2><p>splitlines([keepends=False])  按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符，默认是False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str2 = <span class="string">'''aaaaaaaaaa</span></span><br><span class="line"><span class="string">ssssssssssssssssss</span></span><br><span class="line"><span class="string">dddddddd</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(str2.splitlines(keepends=<span class="keyword">True</span>))  <span class="comment"># ['aaaaaaaaaa\n', 'ssssssssssssssssss\n', 'dddddddd\n']</span></span><br><span class="line">print(str2.splitlines(keepends=<span class="keyword">False</span>))  <span class="comment"># ['aaaaaaaaaa', 'ssssssssssssssssss', 'dddddddd']</span></span><br></pre></td></tr></table></figure><h2 id="3、join"><a href="#3、join" class="headerlink" title="3、join"></a>3、join</h2><p>join()  用于将序列中的元素以指定的字符连接生成一个新的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str3 = <span class="string">'asdfghj'</span></span><br><span class="line">list = [<span class="string">'a'</span>,<span class="string">'s'</span>,<span class="string">'e'</span>]</span><br><span class="line">print(<span class="string">'-'</span>.join(list))  <span class="comment"># 'a-s-e'</span></span><br><span class="line">print(<span class="string">'-'</span>.join(str3))  <span class="comment"># 'a-s-d-f-g-h-j'</span></span><br></pre></td></tr></table></figure><h2 id="4、max"><a href="#4、max" class="headerlink" title="4、max"></a>4、max</h2><p>max()  返回给定参数的最大ASCII值的字符，参数可以为序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(max(<span class="string">'asdfghj'</span>))  <span class="comment"># 's'</span></span><br></pre></td></tr></table></figure><h2 id="5、min"><a href="#5、min" class="headerlink" title="5、min"></a>5、min</h2><p>max()  返回字符串中最小ASCII值的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(min(<span class="string">'asdfghj'</span>))  <span class="comment"># 'a'</span></span><br></pre></td></tr></table></figure><h2 id="6、replace"><a href="#6、replace" class="headerlink" title="6、replace"></a>6、replace</h2><p>replace(old, new[, max])  把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfghjkasasas'</span>.replace(<span class="string">'a'</span>, <span class="string">'1'</span>, <span class="number">2</span>))  <span class="comment"># '1sdfghjk1sasas'</span></span><br></pre></td></tr></table></figure><h2 id="7、maketrans、translate"><a href="#7、maketrans、translate" class="headerlink" title="7、maketrans、translate"></a>7、maketrans、translate</h2><p>maketrans()  返回字符串转换后生成的新字符串</p><p>translate(table)  返回按照table中给出的映射来进行翻译后的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trantab = str.maketrans(<span class="string">'abcd'</span>, <span class="string">'1234'</span>)</span><br><span class="line">print(<span class="string">'asdfghjkasasas'</span>.translate(trantab))  <span class="comment"># '1s4fghjk1s1s1s'</span></span><br></pre></td></tr></table></figure><h2 id="8、startswith"><a href="#8、startswith" class="headerlink" title="8、startswith"></a>8、startswith</h2><p> startswith(str, beg=0,end=len(string))  方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfghjkasasas'</span>.startswith(<span class="string">'asd'</span>))  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'asdfghjkasasas'</span>.startswith(<span class="string">'asd'</span>, <span class="number">2</span>, <span class="number">10</span>))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="9、endswith"><a href="#9、endswith" class="headerlink" title="9、endswith"></a>9、endswith</h2><p>endswith(suffix[, start[, end]]):方法用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。可选参数”start”与”end”为检索字符串的开始与结束位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfghjkasasas'</span>.endswith(<span class="string">'ghj'</span>, <span class="number">0</span>, <span class="number">7</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="10、encode"><a href="#10、encode" class="headerlink" title="10、encode"></a>10、encode</h2><p>encode()  指定的编码格式编码字符串。默认编码为 ‘utf-8’。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfg'</span>.encode(<span class="string">'utf-8'</span>))  <span class="comment"># b'asdfg'</span></span><br></pre></td></tr></table></figure><h2 id="11、decode"><a href="#11、decode" class="headerlink" title="11、decode"></a>11、decode</h2><p>decode():以指定的编码格式解码 bytes 对象。默认编码为 ‘utf-8’。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print((<span class="string">'asdfg'</span>.encode(<span class="string">'utf-8'</span>)).decode(<span class="string">'utf-8'</span>))  <span class="comment"># 'asdfg'</span></span><br></pre></td></tr></table></figure><h2 id="12、isalpha"><a href="#12、isalpha" class="headerlink" title="12、isalpha"></a>12、isalpha</h2><p>isalpha():方法检测字符串是否只由字母组成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfg12'</span>.isalpha())  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="13、isalnum"><a href="#13、isalnum" class="headerlink" title="13、isalnum"></a>13、isalnum</h2><p>isalnum():检测字符串是否由字母和数字组成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'123456asd'</span>.isalnum())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="14、isupper"><a href="#14、isupper" class="headerlink" title="14、isupper"></a>14、isupper</h2><p>isupper():检测字符串中所有的字母是否都为大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'ASDFGd'</span>.isupper())  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="15、islower"><a href="#15、islower" class="headerlink" title="15、islower"></a>15、islower</h2><p>islower():检测字符串是否由小写字母组成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Asdfghjkrt5'</span>.islower())  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="16、istitle"><a href="#16、istitle" class="headerlink" title="16、istitle"></a>16、istitle</h2><p>istitle():检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'My Name Is Alex'</span>.istitle())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="17、isdigit"><a href="#17、isdigit" class="headerlink" title="17、isdigit"></a>17、isdigit</h2><p>isdigit():检测字符串是否只由数字组成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'12345678'</span>.isdigit())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="18、isnumeric"><a href="#18、isnumeric" class="headerlink" title="18、isnumeric"></a>18、isnumeric</h2><p>isnumeric():检测字符串是否只由数字组成。这种方法是只针对unicode对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'1234567'</span>.isnumeric())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="19、isdecimal"><a href="#19、isdecimal" class="headerlink" title="19、isdecimal"></a>19、isdecimal</h2><p>isdecimal():检查字符串是否只包含十进制字符。这种方法只存在于unicode对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'12345'</span>.isdecimal())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="20、isspace"><a href="#20、isspace" class="headerlink" title="20、isspace"></a>20、isspace</h2><p>isspace():检测字符串是否只由空白字符组成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'            '</span>.isspace())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="21、len"><a href="#21、len" class="headerlink" title="21、len"></a>21、len</h2><p>len():返回对象（字符、列表、元组等）长度或项目个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(len(<span class="string">'asdfghj234567'</span>))  <span class="comment"># 13</span></span><br></pre></td></tr></table></figure><h2 id="22、lower"><a href="#22、lower" class="headerlink" title="22、lower"></a>22、lower</h2><p>lower():转换字符串中所有大写字符为小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'ASDasdfgerty3456'</span>.lower())  <span class="comment"># 'asdasdfgerty3456'</span></span><br></pre></td></tr></table></figure><h2 id="23、upper"><a href="#23、upper" class="headerlink" title="23、upper"></a>23、upper</h2><p>upper():将字符串中的小写字母转为大写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'ASDasdfgerty3456'</span>.upper())  <span class="comment"># 'ASDASDFGERTY3456'</span></span><br></pre></td></tr></table></figure><h2 id="24、swapcase"><a href="#24、swapcase" class="headerlink" title="24、swapcase"></a>24、swapcase</h2><p>swapcase():用于对字符串的大小写字母进行转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'ASDasdfgerty3456'</span>.swapcase())  <span class="comment"># 'asdASDFGERTY3456'</span></span><br></pre></td></tr></table></figure><h2 id="25、capitalize"><a href="#25、capitalize" class="headerlink" title="25、capitalize"></a>25、capitalize</h2><p>capitalize():将字符串的第一个字母变成大写,其他字母变小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asd WERtsd3456'</span>.capitalize())  <span class="comment"># 'Asd wertsd3456'</span></span><br></pre></td></tr></table></figure><h2 id="26、title"><a href="#26、title" class="headerlink" title="26、title"></a>26、title</h2><p>title():返回”标题化”的字符串,就是说所有单词都是以大写开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'my name is Alex'</span>.title())  <span class="comment"># 'My Name Is Alex'</span></span><br></pre></td></tr></table></figure><h2 id="27、center"><a href="#27、center" class="headerlink" title="27、center"></a>27、center</h2><p>center(width[, fillchar]):返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asd1'</span>.center(<span class="number">10</span>, <span class="string">' '</span>))  <span class="comment"># '   asd1   '</span></span><br></pre></td></tr></table></figure><h2 id="28、ljust"><a href="#28、ljust" class="headerlink" title="28、ljust"></a>28、ljust</h2><p>ljust(width[, fillchar]):返回一个原字符串左对齐,并使用fillchar填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asd1'</span>.ljust(<span class="number">10</span>, <span class="string">' '</span>))  <span class="comment"># 'asd1      '</span></span><br></pre></td></tr></table></figure><h2 id="29、rjust"><a href="#29、rjust" class="headerlink" title="29、rjust"></a>29、rjust</h2><p>rjust(width[, fillchar]):回一个原字符串右对齐,并使用fillchar填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asd1'</span>.rjust(<span class="number">10</span>, <span class="string">' '</span>))  <span class="comment"># '      asd1'</span></span><br></pre></td></tr></table></figure><h2 id="30、zfill"><a href="#30、zfill" class="headerlink" title="30、zfill"></a>30、zfill</h2><p>zfill(width):返回指定长度的字符串，原字符串右对齐，前面填充0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asd1'</span>.zfill(<span class="number">10</span>))  <span class="comment"># '000000asd1'</span></span><br></pre></td></tr></table></figure><h2 id="31、count"><a href="#31、count" class="headerlink" title="31、count"></a>31、count</h2><p>count():统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'aaaaaaaqwertya'</span>.count(<span class="string">'a'</span>))  <span class="comment"># 8</span></span><br></pre></td></tr></table></figure><h2 id="32、find"><a href="#32、find" class="headerlink" title="32、find"></a>32、find</h2><p>find():方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果指定范围内如果包含指定子字符串，返回的是子字符串在字符串中的起始位置（下标）。如果不包含，返回-1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfghjkl'</span>.find(<span class="string">'fg1'</span>))  <span class="comment"># -1</span></span><br></pre></td></tr></table></figure><h2 id="33、rfind"><a href="#33、rfind" class="headerlink" title="33、rfind"></a>33、rfind</h2><p>rfind():返回字符串最后一次出现的位置（下标），如果没有匹配项则返回-1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfghjklfg'</span>.rfind(<span class="string">'fg'</span>))  <span class="comment"># 9</span></span><br></pre></td></tr></table></figure><h2 id="34、index"><a href="#34、index" class="headerlink" title="34、index"></a>34、index</h2><p>index():方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，该方法与 python find()方法相似，但是没有匹配项时，报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfghjkl'</span>.index(<span class="string">'fg'</span>))  <span class="comment"># 3</span></span><br><span class="line">print(<span class="string">'asdfghjkl'</span>.index(<span class="string">'fg1'</span>))  <span class="comment"># ValueError: substring not found</span></span><br></pre></td></tr></table></figure><h2 id="35、rindex"><a href="#35、rindex" class="headerlink" title="35、rindex"></a>35、rindex</h2><p>rindex():返回子字符串 str 在字符串中最后出现的位置（下标），该方法与 python rfind()方法相似，但是没有匹配项时，报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfghjklfg'</span>.rindex(<span class="string">'fg'</span>))  <span class="comment"># 9</span></span><br><span class="line">print(<span class="string">'asdfghjkl'</span>.rindex(<span class="string">'fg1'</span>))  <span class="comment"># ValueError: substring not found</span></span><br></pre></td></tr></table></figure><h2 id="36、strip"><a href="#36、strip" class="headerlink" title="36、strip"></a>36、strip</h2><p>strip():用于移除字符串头尾指定的字符（默认为空格）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'      asd   '</span>.strip())  <span class="comment"># 'asd'</span></span><br></pre></td></tr></table></figure><h2 id="37、lstrip"><a href="#37、lstrip" class="headerlink" title="37、lstrip"></a>37、lstrip</h2><p>lstrip():方法用于截掉字符串左边的空格或指定字符（默认为空格）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'      asd   '</span>.lstrip())  <span class="comment"># 'asd   '</span></span><br></pre></td></tr></table></figure><h2 id="38、rstrip"><a href="#38、rstrip" class="headerlink" title="38、rstrip"></a>38、rstrip</h2><p>rstrip():删除 string 字符串末尾的指定字符（默认为空格）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'      asd   '</span>.rstrip())  <span class="comment"># '      asd'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常见的字符串函数&quot;&gt;&lt;a href=&quot;#常见的字符串函数&quot; class=&quot;headerlink&quot; title=&quot;常见的字符串函数&quot;&gt;&lt;/a&gt;常见的字符串函数&lt;/h1&gt;&lt;h2 id=&quot;1、split&quot;&gt;&lt;a href=&quot;#1、split&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="字符串函数" scheme="http://alexyanglong.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（7）——流程控制：分支与循环</title>
    <link href="http://alexyanglong.github.io/2018/04/03/Python%E5%9F%BA%E7%A1%80%EF%BC%887%EF%BC%89%E2%80%94%E2%80%94%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%88%86%E6%94%AF%E4%B8%8E%E5%BE%AA%E7%8E%AF/"/>
    <id>http://alexyanglong.github.io/2018/04/03/Python基础（7）——流程控制：分支与循环/</id>
    <published>2018-04-02T16:00:00.000Z</published>
    <updated>2018-06-05T02:02:22.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程控制：分支与循环"><a href="#流程控制：分支与循环" class="headerlink" title="流程控制：分支与循环"></a>流程控制：分支与循环</h1><p>流程控制语句主要分为三种：</p><p>​    1、顺序语句：顾名思义，就是按照顺序从头一句一句往下执行。</p><p>​    2、分支语句</p><p>​    3、循环语句</p><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。</p><p>结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">语句<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">2</span>:</span><br><span class="line">语句<span class="number">2</span></span><br><span class="line">[...]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句n</span><br></pre></td></tr></table></figure><p>执行顺序：先判断<code>表达式1</code> 的值，如果为<code>True</code> ，则执行<code>语句1</code> ，然后结束分支。如果为<code>False</code> ，则判断<code>表达式2</code> 的值，如果为<code>True</code> ，则执行<code>语句2</code> ，然后结束分支。[…] 如果所有的表达式都为<code>False</code> ，则执行<code>else</code>中的<code>语句n</code> 。</p><p>练习：英制单位与公制单位互换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">value = float(input(<span class="string">'请输入长度:'</span>))</span><br><span class="line">unit = input(<span class="string">'请输入单位:'</span>)</span><br><span class="line"><span class="keyword">if</span> unit == <span class="string">'in'</span> <span class="keyword">or</span> unit == <span class="string">'英寸'</span>:</span><br><span class="line">    print(<span class="string">'%f英寸 = %f厘米'</span> % (value, value * <span class="number">2.54</span>))</span><br><span class="line"><span class="keyword">elif</span> unit == <span class="string">'cm'</span> <span class="keyword">or</span> unit == <span class="string">'厘米'</span>:</span><br><span class="line">    print(<span class="string">'%f厘米 = %f英寸'</span> % (value, value / <span class="number">2.54</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'请输入有效的单位'</span>)</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>构造循环语句要使用 <code>for...in...</code> 或者 <code>while</code> 关键字。</p><p>1、<code>for...in...</code>结构，依次把可迭代容器中的每个元素迭代出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代容器:</span><br><span class="line">语句...</span><br></pre></td></tr></table></figure><p>eg：求1-100的和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">    sum += x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>2、<code>while</code>结构，只要条件满足，就不断循环，条件不满足时退出循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 表达式：</span><br><span class="line">语句...</span><br></pre></td></tr></table></figure><p>eg：猜数字游戏    </p><p>​    规则：计算机出一个1~100之间的随机数由人来猜<br>​           计算机根据人猜的数字分别给出提示大一点/小一点/猜对了，当猜的次数大于7，再提示智商不足</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">answer = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    number = int(input(<span class="string">'请输入:'</span>))</span><br><span class="line">    <span class="keyword">if</span> number &lt; answer:</span><br><span class="line">        print(<span class="string">'大一点'</span>)</span><br><span class="line">    <span class="keyword">elif</span> number &gt; answer:</span><br><span class="line">        print(<span class="string">'小一点'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'恭喜你猜对了!'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">'你总共猜了%d次'</span> % counter)</span><br><span class="line"><span class="keyword">if</span> counter &gt; <span class="number">7</span>:</span><br><span class="line">    print(<span class="string">'你的智商余额明显不足'</span>)</span><br></pre></td></tr></table></figure><p>练习：打印九九乘法表，要使用双层循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'%d*%d=%d'</span> % (i, j, i * j), end=<span class="string">'\t'</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;流程控制：分支与循环&quot;&gt;&lt;a href=&quot;#流程控制：分支与循环&quot; class=&quot;headerlink&quot; title=&quot;流程控制：分支与循环&quot;&gt;&lt;/a&gt;流程控制：分支与循环&lt;/h1&gt;&lt;p&gt;流程控制语句主要分为三种：&lt;/p&gt;
&lt;p&gt;​    1、顺序语句：顾名思义，
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="分支循环" scheme="http://alexyanglong.github.io/tags/%E5%88%86%E6%94%AF%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（6）——list、tuple、dict、set之间的转换</title>
    <link href="http://alexyanglong.github.io/2018/04/02/Python%E5%9F%BA%E7%A1%80%EF%BC%886%EF%BC%89%E2%80%94%E2%80%94list%E3%80%81tuple%E3%80%81dict%E3%80%81set%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>http://alexyanglong.github.io/2018/04/02/Python基础（6）——list、tuple、dict、set之间的转换/</id>
    <published>2018-04-01T16:00:00.000Z</published>
    <updated>2018-06-05T02:02:01.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础（6）——list、tuple、dict与set之间的转换"><a href="#Python基础（6）——list、tuple、dict与set之间的转换" class="headerlink" title="Python基础（6）——list、tuple、dict与set之间的转换"></a>Python基础（6）——list、tuple、dict与set之间的转换</h1><h2 id="list、tuple、dict与set之间的转换"><a href="#list、tuple、dict与set之间的转换" class="headerlink" title="list、tuple、dict与set之间的转换"></a>list、tuple、dict与set之间的转换</h2><p>list和tuple是有序的，dict和set是无序的。</p><p>list和dict是可变的，tuple和set是“不可变的”。</p><p>dict具有极快的查找速度，不会因为元素个数的增多而变慢，相应的，占用的空间大；</p><p>而list占用的空间较小，但是查找速度会随着元素个数的增多而变慢。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#list-&gt;set</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line">set1 = set(list1)</span><br><span class="line">print(set1)</span><br><span class="line">print(type(set1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set-&gt;list</span></span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">list2 = list(set2)</span><br><span class="line">print(list2)</span><br><span class="line">print(type(list2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># tuple-&gt;set</span></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">set3 = set(tuple1)</span><br><span class="line">print(set3)</span><br><span class="line">print(type(set3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set-&gt;tuple</span></span><br><span class="line">set4 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">tuple2 = tuple(set4)</span><br><span class="line">print(tuple2)</span><br><span class="line">print(type(tuple2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict-&gt;set</span></span><br><span class="line">dict1 = &#123;<span class="string">'Alex'</span>: <span class="number">88</span>, <span class="string">'xiaoming'</span> : <span class="number">99</span>, <span class="string">'Ala'</span>: <span class="number">96</span>, <span class="string">'Tom'</span>: <span class="number">85</span>, <span class="string">'Jhon'</span>: <span class="number">77</span>&#125;</span><br><span class="line">set5 = set(dict1)</span><br><span class="line">print(set5)</span><br><span class="line">print(type(set5))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set-dict  注意：set不能转换成dict，因为set只有key，而dict是key-value形式存储的</span></span><br><span class="line"><span class="comment"># set6 = &#123;2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># dict2 = dict(set6)</span></span><br><span class="line"><span class="comment"># print(dict2)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础（6）——list、tuple、dict与set之间的转换&quot;&gt;&lt;a href=&quot;#Python基础（6）——list、tuple、dict与set之间的转换&quot; class=&quot;headerlink&quot; title=&quot;Python基础（6）——list、
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="list" scheme="http://alexyanglong.github.io/tags/list/"/>
    
      <category term="tuple" scheme="http://alexyanglong.github.io/tags/tuple/"/>
    
      <category term="dict" scheme="http://alexyanglong.github.io/tags/dict/"/>
    
      <category term="set" scheme="http://alexyanglong.github.io/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（5）——集合set</title>
    <link href="http://alexyanglong.github.io/2018/04/02/Python%E5%9F%BA%E7%A1%80%EF%BC%885%EF%BC%89%E2%80%94%E2%80%94%E9%9B%86%E5%90%88set/"/>
    <id>http://alexyanglong.github.io/2018/04/02/Python基础（5）——集合set/</id>
    <published>2018-04-01T16:00:00.000Z</published>
    <updated>2018-06-05T02:01:41.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础（5）——集合set"><a href="#Python基础（5）——集合set" class="headerlink" title="Python基础（5）——集合set"></a>Python基础（5）——集合set</h1><h2 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h2><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</p><p>作用: 一般是对<code>list</code> ，<code>tuple</code>中的元素进行去重的，求交集、并集、差集等</p><p>set的一些常用操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得set</span></span><br><span class="line">set1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">print(set1)</span><br><span class="line">print(type(set1))</span><br><span class="line">set2 = set((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(set2)</span><br><span class="line">print(type(set2))</span><br><span class="line">set3 = set(&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>&#125;)</span><br><span class="line">print(set3)</span><br><span class="line">print(type(set3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">set4 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">set4.add(<span class="number">55</span>)  <span class="comment"># add() #可以添加重复的值,但是没效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set4.add([10, 9]) #直接报错,不能添加list</span></span><br><span class="line">set4.add((<span class="number">10</span>, <span class="number">9</span>))</span><br><span class="line"><span class="comment"># set4.add(&#123;'a':1&#125;) #直接报错,不能添加字典</span></span><br><span class="line"><span class="comment"># 总结:list和dict是可改变的, 而tuple是不可改变</span></span><br><span class="line">print(set4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">set5 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># 将list dict tuple 等等整个插入进去</span></span><br><span class="line">set5.update([<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line">set5.update(&#123;<span class="number">9</span> : <span class="string">'a'</span>, <span class="number">10</span> : <span class="string">'b'</span>&#125;)  <span class="comment">#注意：插入字典时，是将key插进去</span></span><br><span class="line">set5.update((<span class="number">11</span>, <span class="number">56</span>))</span><br><span class="line">print(set5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">set6= set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">set6.remove(<span class="number">4</span>)</span><br><span class="line">print(set6)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历</span></span><br><span class="line">set7 = set((<span class="number">231</span>, <span class="number">323.14</span>, <span class="string">'asddf'</span>, <span class="keyword">None</span>, <span class="keyword">True</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> set7:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集  &amp;  并集  |  差集 -  对称差 ^</span></span><br><span class="line">set8 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">set9 = set([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">set10 = set8 &amp; set9</span><br><span class="line">set11 = set8 | set9</span><br><span class="line">print(set10)</span><br><span class="line">print(type(set10))</span><br><span class="line">print(set11)</span><br><span class="line">print(type(set11))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础（5）——集合set&quot;&gt;&lt;a href=&quot;#Python基础（5）——集合set&quot; class=&quot;headerlink&quot; title=&quot;Python基础（5）——集合set&quot;&gt;&lt;/a&gt;Python基础（5）——集合set&lt;/h1&gt;&lt;h2 id=&quot;集
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="set" scheme="http://alexyanglong.github.io/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（4）——字典dict</title>
    <link href="http://alexyanglong.github.io/2018/04/01/Python%E5%9F%BA%E7%A1%80%EF%BC%884%EF%BC%89%E2%80%94%E2%80%94%E5%AD%97%E5%85%B8dict/"/>
    <id>http://alexyanglong.github.io/2018/04/01/Python基础（4）——字典dict/</id>
    <published>2018-03-31T16:00:00.000Z</published>
    <updated>2018-06-05T02:01:22.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础（4）——字典dict"><a href="#Python基础（4）——字典dict" class="headerlink" title="Python基础（4）——字典dict"></a>Python基础（4）——字典dict</h1><h2 id="字典dict"><a href="#字典dict" class="headerlink" title="字典dict"></a>字典dict</h2><p>Python内置了字典：dict的支持，dict全称dictionary，使用键-值（key-value）存储，具有极快的查找速度。</p><p>注意事项:<br>​    1、在字典中键(key)的值必须是唯一<br>​    2、在字典中可以存放多个键值对<br>​    3、在字典中键(key)必须是不可变类型，字符串 、整数等都可以作为键(key)</p><p>下面是字典dict的一些常用操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义字典</span></span><br><span class="line">dict1 = &#123;<span class="string">'Alex'</span>: <span class="number">88</span>, <span class="string">'xiaoming'</span> : <span class="number">99</span>, <span class="string">'Ala'</span>: <span class="number">96</span>, <span class="string">'Tom'</span>: <span class="number">85</span>, <span class="string">'Jhon'</span>: <span class="number">77</span>&#125;</span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素的访问</span></span><br><span class="line"><span class="comment"># 获取的方式: 字典名[key]</span></span><br><span class="line">print(dict1[<span class="string">'xiaoming'</span>])</span><br><span class="line">print(dict1.get(<span class="string">'Alex'</span>))</span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">dict1[<span class="string">'HanMeimei'</span>] = <span class="number">89</span></span><br><span class="line">print(dict1)</span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">dict1[<span class="string">'HanMeimei'</span>] = <span class="string">'90'</span></span><br><span class="line">print(dict1)</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">dict1.pop(<span class="string">'HanMeimei'</span>)</span><br><span class="line">print(dict1)</span><br><span class="line"><span class="comment"># 遍历</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dict1:</span><br><span class="line">    print(k, dict1[k])</span><br><span class="line"><span class="comment"># 获取字典所有的value和key</span></span><br><span class="line">print(dict1.values())</span><br><span class="line">print(dict1.keys())</span><br><span class="line"><span class="comment"># 遍历value值</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> dict1.values():</span><br><span class="line">    print(v)</span><br><span class="line"><span class="comment">#遍历key值</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dict1.keys():</span><br><span class="line">    print(k)</span><br><span class="line"><span class="comment">#遍历key-value值</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dict1.items():</span><br><span class="line">    print(k, v)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> enumerate(dict1):</span><br><span class="line">    print(k, v)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础（4）——字典dict&quot;&gt;&lt;a href=&quot;#Python基础（4）——字典dict&quot; class=&quot;headerlink&quot; title=&quot;Python基础（4）——字典dict&quot;&gt;&lt;/a&gt;Python基础（4）——字典dict&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="dict" scheme="http://alexyanglong.github.io/tags/dict/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（3）——元组tuple</title>
    <link href="http://alexyanglong.github.io/2018/03/31/Python%E5%9F%BA%E7%A1%80%EF%BC%883%EF%BC%89%E2%80%94%E2%80%94%E5%85%83%E7%BB%84tuple/"/>
    <id>http://alexyanglong.github.io/2018/03/31/Python基础（3）——元组tuple/</id>
    <published>2018-03-30T16:00:00.000Z</published>
    <updated>2018-06-05T02:01:03.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础（3）——元组tuple"><a href="#Python基础（3）——元组tuple" class="headerlink" title="Python基础（3）——元组tuple"></a>Python基础（3）——元组tuple</h1><h2 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h2><p>Python还有另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改。</p><p>下面是元组tuple的一些常见操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空元祖</span></span><br><span class="line">tuple1 = ()</span><br><span class="line">print(tuple1)</span><br><span class="line">print(type(tuple1))</span><br><span class="line"><span class="comment"># tuple和list一样也可以保存任意数据类型的数据</span></span><br><span class="line">tuple2 = (<span class="number">231</span>, <span class="number">323.14</span>, <span class="string">'asddf'</span>, <span class="keyword">None</span>, <span class="keyword">True</span>)</span><br><span class="line">print(tuple2)</span><br><span class="line"><span class="comment"># 注意：当创建的元组只有一个元素时，需要在元素后面加一个逗号</span></span><br><span class="line">tuple3 = (<span class="number">34</span>, ) <span class="comment"># ===&gt; tuple类型       # tuple3 = (34)  # ===&gt; int类型</span></span><br><span class="line">print(tuple3)</span><br><span class="line"><span class="comment"># 获取元组的元素和list一样，通过下标来获取</span></span><br><span class="line">tuple4 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">print(tuple4[<span class="number">-1</span>])</span><br><span class="line"><span class="comment"># 注意：元组定义好之后是不能修改的</span></span><br><span class="line">tuple5 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>])</span><br><span class="line"><span class="comment"># tuple5[0] = 150  # 报错</span></span><br><span class="line">print(tuple5[<span class="number">-1</span>][<span class="number">-2</span>]) <span class="comment">#  ==&gt; print(tuple5[4][1])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组进行操作</span></span><br><span class="line"><span class="comment"># 将两个元组合并成一个新的元组</span></span><br><span class="line">tuple7 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">tuple8 = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">tuple9 = tuple7 + tuple8</span><br><span class="line">print(tuple9)</span><br><span class="line">print(tuple7, tuple8)</span><br><span class="line"><span class="comment"># 将元组重复n次,最后返回一个新的元组</span></span><br><span class="line">tuple10 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">print(tuple10 * <span class="number">3</span>)</span><br><span class="line"><span class="comment"># in 判断一个元素是否在一个元组中,如果在返回True,否则返回False</span></span><br><span class="line">tuple11 = (<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line">print(<span class="number">3</span> <span class="keyword">in</span> tuple11)</span><br><span class="line">print(<span class="number">4</span> <span class="keyword">in</span> tuple11)</span><br><span class="line"><span class="comment"># 元组的截取</span></span><br><span class="line"><span class="comment"># 格式: 元组名[start:end:step]</span></span><br><span class="line">tuple12 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line">print(tuple12[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line">print(tuple12[<span class="number">3</span>:])</span><br><span class="line">print(tuple12[:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 将元组进行逆序排列</span></span><br><span class="line">print(tuple12[::<span class="number">-1</span>])</span><br><span class="line"><span class="comment"># 二维元组</span></span><br><span class="line">tuple13 = ((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>))</span><br><span class="line">print(tuple13)</span><br><span class="line">print(tuple13[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组的方法</span></span><br><span class="line"><span class="comment"># len(): 求一个元组的长度</span></span><br><span class="line">tuple14 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(len(tuple14))</span><br><span class="line"><span class="comment"># max(): 求一个元组的元素的最大值</span></span><br><span class="line">print(max(tuple14))</span><br><span class="line"><span class="comment"># min(): 求一个元组的元素的最小值</span></span><br><span class="line">print(min(tuple14))</span><br><span class="line"><span class="comment">#遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tuple14:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础（3）——元组tuple&quot;&gt;&lt;a href=&quot;#Python基础（3）——元组tuple&quot; class=&quot;headerlink&quot; title=&quot;Python基础（3）——元组tuple&quot;&gt;&lt;/a&gt;Python基础（3）——元组tuple&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="tuple" scheme="http://alexyanglong.github.io/tags/tuple/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（2）——列表list</title>
    <link href="http://alexyanglong.github.io/2018/03/30/Python%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E5%88%97%E8%A1%A8list/"/>
    <id>http://alexyanglong.github.io/2018/03/30/Python基础（2）——列表list/</id>
    <published>2018-03-29T16:00:00.000Z</published>
    <updated>2018-06-05T02:00:33.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础（2）——列表list"><a href="#Python基础（2）——列表list" class="headerlink" title="Python基础（2）——列表list"></a>Python基础（2）——列表list</h1><h2 id="列表list"><a href="#列表list" class="headerlink" title="列表list"></a>列表list</h2><p>Python还内置了一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。</p><p>下面是列表list的一些常见操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空列表</span></span><br><span class="line">list1 = []</span><br><span class="line">print(list1)</span><br><span class="line">print(type(list1))</span><br><span class="line"><span class="comment"># 创建带有元素的列表</span></span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">print(list2)</span><br><span class="line"><span class="comment"># 列表元素的类型可以不同</span></span><br><span class="line">list3 = [<span class="number">12</span>, <span class="string">'qwe'</span>, <span class="number">0.87</span>, <span class="keyword">False</span>, <span class="keyword">None</span>]</span><br><span class="line">print(list3)</span><br><span class="line"><span class="comment"># 访问列表中的元素  格式: 列表名[元素的下标] 注意：下标不能超出列表的范围，最大为len(list)-1，超出下标会报一个IndexError错误</span></span><br><span class="line">list4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">print(list4[<span class="number">5</span>])</span><br><span class="line"><span class="comment"># 修改元素</span></span><br><span class="line">list4[<span class="number">3</span>] = <span class="number">10</span></span><br><span class="line">print(list4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的操作</span></span><br><span class="line"><span class="comment"># 列表拼接</span></span><br><span class="line">list5 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list6 = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">list7 = list5 + list6</span><br><span class="line">print(list7)</span><br><span class="line"><span class="comment"># 列表的重复</span></span><br><span class="line">list8 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">print(list8 * <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 判断一个元素是否在列表中</span></span><br><span class="line">list9 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># 返回的结果是布尔值 存在为True  不存在为False</span></span><br><span class="line">print(<span class="number">7</span> <span class="keyword">in</span> list9)</span><br><span class="line">print(<span class="number">4</span> <span class="keyword">in</span> list9)</span><br><span class="line"><span class="comment"># 截取列表 list[start:end:step]</span></span><br><span class="line">list10 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">print(list10[:<span class="number">6</span>])  <span class="comment"># 从左截取，从头开始，到下标为5的元素</span></span><br><span class="line">print(list10[<span class="number">5</span>:])  <span class="comment"># 从左截取，从下标为5的元素，到末尾</span></span><br><span class="line">print(list10[::<span class="number">-1</span>])  <span class="comment"># 将list倒序排列</span></span><br><span class="line">print(list10[::<span class="number">-2</span>])  <span class="comment"># 从右截取，末尾开始，每隔一个元素截取一个</span></span><br><span class="line"><span class="comment"># 二维列表</span></span><br><span class="line">list11 = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="comment"># 获取元素</span></span><br><span class="line">print(list11[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 列表的方法</span></span><br><span class="line"><span class="comment"># append(): 在列表的末尾添加一个元素</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list1.append(<span class="number">8</span>)</span><br><span class="line">print(list1)</span><br><span class="line">list1.append([<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line">print(list1)</span><br><span class="line"><span class="comment"># extend(): 在列表的末尾一次性追加另外一个列表中的多个值</span></span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list2.extend([<span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>])</span><br><span class="line">print(list2)</span><br><span class="line"><span class="comment">#insert(index, val):在指定下标处添加一个元素,原来此处的元素往后移动  index：表示列表下标，val：表示下标对应的值</span></span><br><span class="line">list3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list3.insert(<span class="number">1</span>, <span class="number">250</span>)</span><br><span class="line">print(list3)</span><br><span class="line"><span class="comment"># pop([index]):将列表中指定下标的元素删除, 如果不传递参数,则删除的是最后一个元素  index：表示列表下标，返回值：删除的该元素</span></span><br><span class="line">list4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">print(list4.pop())</span><br><span class="line">list4.pop()</span><br><span class="line">print(list4)</span><br><span class="line">list4.pop(<span class="number">1</span>)</span><br><span class="line">print(list4)</span><br><span class="line"><span class="comment"># remove(val): 移除列表中指定的元素，从左开始，移除第一个  val：表示列表中的值</span></span><br><span class="line">list5 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>]</span><br><span class="line">list5.remove(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># list5.remove(3)</span></span><br><span class="line">print(list5)</span><br><span class="line"><span class="comment"># clear(): 清除列表中所有的元素</span></span><br><span class="line">list6 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list6.clear()</span><br><span class="line">print(list6)</span><br><span class="line"><span class="comment"># index(val): 获取列表中该元素所对应的下标  val：列表中的某一个元素  返回值：列表中元素所对应的下标</span></span><br><span class="line">list7 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">index1 = list7.index(<span class="number">3</span>)</span><br><span class="line">print(index1)</span><br><span class="line"><span class="comment"># len(list): 获取列表的长度</span></span><br><span class="line">print(len([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]))</span><br><span class="line"><span class="comment"># max(list): 获取列表中的最大值</span></span><br><span class="line">print(max([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]))</span><br><span class="line"><span class="comment"># min(list): 获取列表中的最小值</span></span><br><span class="line">print(min([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]))</span><br><span class="line"><span class="comment"># count(val): 计算列表中元素出现的次数  val：列表中的某一个元素</span></span><br><span class="line">list8 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">print(list8.count(<span class="number">3</span>))</span><br><span class="line"><span class="comment"># reverse(): 将列表进行倒序排列</span></span><br><span class="line">list9 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">list9.reverse()</span><br><span class="line">print(list9)</span><br><span class="line"><span class="comment"># sort(): 将列表中的元素进行升序排列</span></span><br><span class="line">list10 = [<span class="number">10</span>, <span class="number">90</span>, <span class="number">78</span>, <span class="number">23</span>, <span class="number">65</span>, <span class="number">43</span>]</span><br><span class="line">list10.sort()</span><br><span class="line">print(list10)</span><br><span class="line"></span><br><span class="line"><span class="comment"># enumerate(list[, start = 0]):将列表中元素和其对应的下标一一展示出来</span></span><br><span class="line"><span class="comment"># list: 列表</span></span><br><span class="line"><span class="comment"># start: [start = 下标值]</span></span><br><span class="line"></span><br><span class="line">list16 = list(enumerate(list15))</span><br><span class="line">list17 = list(enumerate(list15, start = <span class="number">1</span>))</span><br><span class="line">print(list16)</span><br><span class="line">print(list17)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环遍历</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> list16:</span><br><span class="line">    print(i, v)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础（2）——列表list&quot;&gt;&lt;a href=&quot;#Python基础（2）——列表list&quot; class=&quot;headerlink&quot; title=&quot;Python基础（2）——列表list&quot;&gt;&lt;/a&gt;Python基础（2）——列表list&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="list" scheme="http://alexyanglong.github.io/tags/list/"/>
    
  </entry>
  
</feed>
