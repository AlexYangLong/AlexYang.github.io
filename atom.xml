<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AlexYang&#39;s World</title>
  
  <subtitle>AlexYang的博客世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://alexyanglong.github.io/"/>
  <updated>2018-06-25T07:36:15.796Z</updated>
  <id>http://alexyanglong.github.io/</id>
  
  <author>
    <name>AlexYang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django -- 在CentOS 7上部署Django项目</title>
    <link href="http://alexyanglong.github.io/2018/05/31/Django----%E5%9C%A8CentOS-7%E4%B8%8A%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/"/>
    <id>http://alexyanglong.github.io/2018/05/31/Django----在CentOS-7上部署Django项目/</id>
    <published>2018-05-30T16:00:00.000Z</published>
    <updated>2018-06-25T07:36:15.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-在CentOS-7上部署Django项目"><a href="#Django-–-在CentOS-7上部署Django项目" class="headerlink" title="Django – 在CentOS 7上部署Django项目"></a>Django – 在CentOS 7上部署Django项目</h1><p>在部署之前，要确保CentOS 7系统已经安装了MySQL 5.x数据库、Python 3.6.x和Nginx。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>在CentOS 7的根目录 <code>/</code> 下创建一个<code>project</code> 目录，该目录用于存放所有要部署的项目。在<code>project</code> 下在创建<code>conf</code> （用户存放所有的配置文件）、 <code>env</code> （用户存放所有的虚拟环境）、 <code>src</code> （用于存放所有项目的源码）、 <code>logs</code>（用于存放所有的日志文件）。</p><h3 id="同步数据"><a href="#同步数据" class="headerlink" title="同步数据"></a>同步数据</h3><p>使用navicat 将Windows上的数据库同步到CentOS上。首先要确保CentOS上的MySQL可以支持远程连接。</p><h3 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 切换目录</span><br><span class="line">cd /project/env</span><br><span class="line"># 安装虚拟环境  参数：指定虚拟环境中Python的版本（-p 本地Python3的安装目录）</span><br><span class="line">virtualenv --no-site-packages -p /usr/local/python3.6 axfvenv</span><br><span class="line"># 进入虚拟环境目录</span><br><span class="line">cd venv</span><br><span class="line"># 激活虚拟环境</span><br><span class="line">source bin/activate</span><br><span class="line"># 安装环境所需要的包 其中re_install.txt文件中记录的是需要安装包的名称以及对应的版本</span><br><span class="line">pip3 install -r re_install.txt</span><br></pre></td></tr></table></figure><p>Django的项目中，在工程目录下settings.py文件中有一个DEBUG=True参数，如果DEBUG=False则会出现js，css，img无法加载的情况出现。</p><p>原因如下：</p><p>Django框架仅在开发模式下提供静态文件服务。当开启DEBUG模式时，Django内置的服务器是提供静态文件的服务的，所以css等文件访问都没有问题，但是关闭DEBUG模式后，Django便不提供静态文件服务了。</p><h3 id="部署在测试环境中"><a href="#部署在测试环境中" class="headerlink" title="部署在测试环境中"></a>部署在测试环境中</h3><p>在测试环境中一般都直接使用python manage.py runserver的方式去运行项目。其中就涉及到DEBUG=False的修改，静态目录的修改等，具体修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改settings.py配置文件中的DEBUG=False模式，修改ALLOEWD_HOST=[&apos;*&apos;]</span><br></pre></td></tr></table></figure><p>修改项目目录下的urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 引入包</span><br><span class="line">from django.views.static import serve</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...,</span><br><span class="line"></span><br><span class="line"># 增加以下的url路由</span><br><span class="line">    url(r&apos;^static/(?P&lt;path&gt;.*)$&apos;, serve, &#123;&quot;document_root&quot;: settings.STATICFILES_DIRS[0]&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>使用<code>python manage.py runserver</code> 运行项目。</p><h3 id="部署在正式环境中"><a href="#部署在正式环境中" class="headerlink" title="部署在正式环境中"></a>部署在正式环境中</h3><p>使用 uwsgi + Nginx + MySQL 来部署项目。</p><h4 id="配置nginx-conf文件"><a href="#配置nginx-conf文件" class="headerlink" title="配置nginx.conf文件"></a>配置nginx.conf文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /project/conf</span><br></pre></td></tr></table></figure><p>先编写自己项目的nginx.conf文件如下：</p><p>每一个项目对应有一个自己定义的nginx的配置文件，比如爱鲜蜂项目，定义为axf_nginx.conf 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen       80;  # 端口</span><br><span class="line">     server_name xx.xx.xx.xx localhost;  # 公网ip、域名</span><br><span class="line"></span><br><span class="line">     access_log /project/logs/axf_access.log;  # 连接成功日志文件</span><br><span class="line">     error_log /project/logs/axf_error.log;  # 错误日志</span><br><span class="line"></span><br><span class="line">     location / &#123;</span><br><span class="line">         include uwsgi_params;</span><br><span class="line">         uwsgi_pass 127.0.0.1:8090;  # 和uwsgi通信的端口</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     location /static/ &#123;</span><br><span class="line">         alias /project/src/axf/static/;  # 静态文件</span><br><span class="line">         expires 30d;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>再修改总的nginx的配置文件，让总的nginx文件包含我们自定义的项目的axf_nginx.conf 文件。</p><p>总的nginx配置文件在：/etc/nginx/nginx.conf 中</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_centos_nginx1.png" alt="django_centos_nginx1" title="">                </div>                <div class="image-caption">django_centos_nginx1</div>            </figure><p>以上步骤操作完成以后，需要重启nginx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br><span class="line"></span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><p>如果自定义的axf_nginx.conf文件没有错误的话，查看nginx的运行状态会有如下的结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_centos_nginx2.png" alt="django_centos_nginx2" title="">                </div>                <div class="image-caption">django_centos_nginx2</div>            </figure><h4 id="配置uwsgi文件"><a href="#配置uwsgi文件" class="headerlink" title="配置uwsgi文件"></a>配置uwsgi文件</h4><p>先安装uwsgi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install uwsgi</span><br></pre></td></tr></table></figure><p>然后进行环境变量的配置， 建立软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/python3.6/bin/uwsgi /usr/bin/uwsgi</span><br></pre></td></tr></table></figure><p>在 /project/conf 文件夹下除了包含自定义的axf_nginx.conf文件，还有我们自定义的axf_uwsgi.ini 配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">projectname = axf</span><br><span class="line">base = /project/src</span><br><span class="line"></span><br><span class="line"># 守护进程</span><br><span class="line">master = true</span><br><span class="line"></span><br><span class="line"># 进程个数</span><br><span class="line">processes = 4</span><br><span class="line"></span><br><span class="line"># 虚拟环境</span><br><span class="line">pythonhome = /project/env/axfvenv</span><br><span class="line"></span><br><span class="line"># 项目地址</span><br><span class="line">chdir = %(base)/%(projectname)</span><br><span class="line"></span><br><span class="line"># 指定python版本</span><br><span class="line">pythonpath = /usr/local/python3/bin/python3</span><br><span class="line"></span><br><span class="line"># 指定uwsgi文件</span><br><span class="line">module = %(projectname).wsgi</span><br><span class="line"></span><br><span class="line"># 和nginx通信地址:端口</span><br><span class="line">socket = 127.0.0.1:8090</span><br><span class="line"></span><br><span class="line"># 日志文件地址</span><br><span class="line">logto = /project/logs/axf_uwsgi.log</span><br></pre></td></tr></table></figure><p>运行项目:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /project/conf</span><br><span class="line"></span><br><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-在CentOS-7上部署Django项目&quot;&gt;&lt;a href=&quot;#Django-–-在CentOS-7上部署Django项目&quot; class=&quot;headerlink&quot; title=&quot;Django – 在CentOS 7上部署Django项目&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django -- 分页、中间件、验证码、文件上传</title>
    <link href="http://alexyanglong.github.io/2018/05/29/Django%20--%20%E5%88%86%E9%A1%B5%E3%80%81%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%81%E9%AA%8C%E8%AF%81%E7%A0%81%E3%80%81%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://alexyanglong.github.io/2018/05/29/Django -- 分页、中间件、验证码、文件上传/</id>
    <published>2018-05-28T16:00:00.000Z</published>
    <updated>2018-06-25T08:21:01.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-分页、中间件、验证码、文件上传"><a href="#Django-–-分页、中间件、验证码、文件上传" class="headerlink" title="Django – 分页、中间件、验证码、文件上传"></a>Django – 分页、中间件、验证码、文件上传</h1><h2 id="中间件Middleware"><a href="#中间件Middleware" class="headerlink" title="中间件Middleware"></a>中间件Middleware</h2><p>中间件：</p><p>a) 是一个轻量级的，底层的插件，可以介入Django的请求和响应的过程（面向切面编程)</p><p>b) 中间件的本质就是一个python类</p><p>c) 面向切面编程(Aspect Oriented Programming)简称AOP，AOP的主要实现目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获取逻辑过程中各部分之间低耦合的隔离效果</p><h3 id="中间件的处理函数"><a href="#中间件的处理函数" class="headerlink" title="中间件的处理函数"></a>中间件的处理函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__init__：没有参数，在服务器响应的第一个请求的时候自动调用，用户确定时候启动该中间件</span><br><span class="line"></span><br><span class="line">process_request(self, request): 在执行视图前被调用，每个请求上都会被调用，不主动进行返回或返回HttpResponse对象</span><br><span class="line"></span><br><span class="line">process_view(self, request, view_func,view_args, view_kwargs):调用视图之前执行，每个请求都会调用，不主动进行返回或返回HttpResponse对象</span><br><span class="line"></span><br><span class="line">process_template_response(self, request, response)：在视图刚好执行完后进行调用，每个请求都会调用，不主动进行返回或返回HttpResponse对象</span><br><span class="line"></span><br><span class="line">process_response(self, request, response):所有响应返回浏览器之前调用，每个请求都会调用，不主动进行返回或返回HttpResponse对象</span><br><span class="line"></span><br><span class="line">process_exception(self, request, exception):当视图抛出异常时调用，不主动进行返回或返回HttpResponse对象</span><br></pre></td></tr></table></figure><h3 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_middleware1.png" alt="django_middleware1" title="">                </div>                <div class="image-caption">django_middleware1</div>            </figure><h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><ol><li><p>在工程目录下创建middleware目录</p></li><li><p>目录中创建一个python文件</p></li><li><p>在根据功能需求，创建切入需求类，重写切入点方法</p></li><li><p>编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthUserMiddleWare</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line"> print(‘xxxx’)</span><br></pre></td></tr></table></figure></li><li><p>启动中间件，在settings中进行配置，MIDDLEWARE中添加middleware.文件名.类名    </p><p><img src="./django_middleware2.png" alt="django_middleware2"></p></li></ol><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h3 id="分页库Paginator的基本语法"><a href="#分页库Paginator的基本语法" class="headerlink" title="分页库Paginator的基本语法"></a>分页库Paginator的基本语法</h3><p>django提供了分页的工具，存在于django.core中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Paginator： 数据分页工具</span><br><span class="line">Page：具体的某一页</span><br></pre></td></tr></table></figure><p>Paginator：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象创建： Paginator(数据集，每一页数据的条数)</span><br></pre></td></tr></table></figure><p>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">count  计算和</span><br><span class="line">num_pages: 页面总和</span><br><span class="line">page_range: 页码列表，从1开始</span><br></pre></td></tr></table></figure><p>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page(页码)：获取的一个page对象，页码不存在则抛出invalidPage的异常</span><br></pre></td></tr></table></figure><p>常见错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">invalidPage：page()传递无效页码</span><br><span class="line">PageNotAnInteger：Page()传递的不是整数</span><br><span class="line">Empty:page()传递的值有效，但是没有数据</span><br></pre></td></tr></table></figure></p><h3 id="page对象"><a href="#page对象" class="headerlink" title="page对象"></a>page对象</h3><p>page：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象获取，通过Paginator的page()方法获得</span><br></pre></td></tr></table></figure><p>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object_list: 当前页面上所有的数据对象</span><br><span class="line">number： 当前页的页码值</span><br><span class="line">paginator: 当前page关联的Paginator对象</span><br></pre></td></tr></table></figure><p>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">has_next()   判断是否有下一页</span><br><span class="line">has_previous():  判断是否有上一页</span><br><span class="line">has_other_pages():  判断是否有上一页或下一页</span><br><span class="line">next_page_number();  返回下一页的页码</span><br><span class="line">previous_page_number(): 返回上一页的页码</span><br><span class="line">len(): 返回当前也的数据的个数</span><br></pre></td></tr></table></figure></p><h3 id="Paginator对象和Page对象的关系"><a href="#Paginator对象和Page对象的关系" class="headerlink" title="Paginator对象和Page对象的关系"></a>Paginator对象和Page对象的关系</h3><p>如下有学生表，学生表中有25条数据，通过分页，每一个6条数据，去实现分页的功能:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_paginator1.png" alt="django_paginator1" title="">                </div>                <div class="image-caption">django_paginator1</div>            </figure><p>代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_paginator2.png" alt="django_paginator1" title="">                </div>                <div class="image-caption">django_paginator1</div>            </figure><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><p>在用户登录，注册以及一些敏感操作的时候，我们为了防止服务器被暴力请求，或爬虫爬取，我们可以使用验证码进行过滤，减轻服务器的压力。</p><p>验证码需要使用绘图Pillow</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pip install Pillow</span><br></pre></td></tr></table></figure><p>核心：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image.ImageDraw.ImageFont</span><br></pre></td></tr></table></figure><p>绘制流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">background = (10,20,30)  RGB颜色</span><br><span class="line"></span><br><span class="line">初始化画布 </span><br><span class="line"></span><br><span class="line">image = Image.new(‘RGB’,(100,50), background)</span><br><span class="line"></span><br><span class="line">获取画布中画笔对象</span><br><span class="line"></span><br><span class="line">draw = ImageDraw.Draw(image, ‘RGB’)</span><br><span class="line"></span><br><span class="line">绘制验证码，随机四个</span><br><span class="line"></span><br><span class="line">导入字体文件path表示路径</span><br><span class="line"></span><br><span class="line">font = ImageFont.truetype(‘path’, size)</span><br><span class="line"></span><br><span class="line">fontcolor = (20,40,60)</span><br><span class="line"></span><br><span class="line">draw.text((x,y), ‘R’, font.fontcolor)  x,y是文字左上角坐标</span><br></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>以上传图片为例，同样也需要安装Pillow库。</p><h3 id="在Model中定义保存图片的字段"><a href="#在Model中定义保存图片的字段" class="headerlink" title="在Model中定义保存图片的字段"></a>在Model中定义保存图片的字段</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, null=<span class="keyword">False</span>)</span><br><span class="line">    gender = models.BooleanField(default=<span class="keyword">True</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    avatar = models.ImageField(upload_to=<span class="string">'upload'</span>)  <span class="comment"># 头像</span></span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>注意：在指定字段为ImageField类型的时候，要指定upload_to参数，表示上传的图片的保存路径。</p><h3 id="配置上传图片的保存路径"><a href="#配置上传图片的保存路径" class="headerlink" title="配置上传图片的保存路径"></a>配置上传图片的保存路径</h3><p>先在根目录下创建media目录。</p><p>在工程目录下的settings.py中配置media_url和media_root路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'/media/'</span>)</span><br></pre></td></tr></table></figure><p>在工程目录下的urls.py文件中配置media的目录为静态目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入static包</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.staticfiles.urls <span class="keyword">import</span> static</span><br><span class="line"><span class="comment"># 导入settings</span></span><br><span class="line"><span class="keyword">from</span> test_p <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    ...,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置media</span></span><br><span class="line">urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><h3 id="实现保存图片"><a href="#实现保存图片" class="headerlink" title="实现保存图片"></a>实现保存图片</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_upload_file1.png" alt="django_paginator1" title="">                </div>                <div class="image-caption">django_paginator1</div>            </figure><p>注意：上传的时候，需要指定form表单的enctype=‘multipart/form-data’</p><h3 id="页面中解析上传的图片信息"><a href="#页面中解析上传的图片信息" class="headerlink" title="页面中解析上传的图片信息"></a>页面中解析上传的图片信息</h3><p>在数据库中用于保存图片的字段s_content的字段中存的是media下的upload/xxx.jpg地址，所以在页面解析的时候，需要加上media的目录，这样才能解析到图片在服务器中的路径。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_upload_file2.png" alt="django_paginator1" title="">                </div>                <div class="image-caption">django_paginator1</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-分页、中间件、验证码、文件上传&quot;&gt;&lt;a href=&quot;#Django-–-分页、中间件、验证码、文件上传&quot; class=&quot;headerlink&quot; title=&quot;Django – 分页、中间件、验证码、文件上传&quot;&gt;&lt;/a&gt;Django – 分页、中间
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django -- 视图</title>
    <link href="http://alexyanglong.github.io/2018/05/28/Django----%E8%A7%86%E5%9B%BE/"/>
    <id>http://alexyanglong.github.io/2018/05/28/Django----视图/</id>
    <published>2018-05-27T16:00:00.000Z</published>
    <updated>2018-06-25T08:58:47.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-视图"><a href="#Django-–-视图" class="headerlink" title="Django – 视图"></a>Django – 视图</h1><p>MVT模式中的V，V代表视图，在Django中的视图主要用来接受web请求，并做出响应。视图的本质就是一个python中的函数 视图的响应分为：以json数据形式返回、以网页的形式返回、重定向到另一个网页、错误视图页面（404,500等）。视图响应的过程：浏览器输入 → django获取信息并去掉ip：端口，身下路径 → urls路由匹配 → 视图响应 → 回馈到浏览器。</p><h2 id="url配置"><a href="#url配置" class="headerlink" title="url配置"></a>url配置</h2><h3 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">settings中制定根级url配置文件，对应的属性ROOT_URLCONF</span><br></pre></td></tr></table></figure><h3 id="urlpatterns"><a href="#urlpatterns" class="headerlink" title="urlpatterns"></a>urlpatterns</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个url实例的对象，全在根配置搞定</span><br><span class="line">    内部由url组成（正则匹配路径）</span><br><span class="line">    url(r&apos;^learn/&apos;, views.learn)</span><br></pre></td></tr></table></figure><h3 id="导入其他的url配置"><a href="#导入其他的url配置" class="headerlink" title="导入其他的url配置"></a>导入其他的url配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在应用中创建urls.py 文件，编写配置规则，在工程urls.py中进行</span><br><span class="line">导入包含</span><br><span class="line">    From django.conf.urls import include</span><br><span class="line">    urlpatterns = [url(r&apos;^xxx/&apos;, include(&apos;app.urls&apos;))]</span><br><span class="line">注意：</span><br><span class="line">    url配置正则注意事项：</span><br><span class="line">        正则匹配时从上到下进行遍历，匹配到就不会继续向后查找了</span><br><span class="line">        匹配的正则前方不需要加反斜杠</span><br><span class="line">        正则钱需要加（r）表示字符串不转义</span><br></pre></td></tr></table></figure><h2 id="获取url路径的参数"><a href="#获取url路径的参数" class="headerlink" title="获取url路径的参数"></a>获取url路径的参数</h2><h3 id="url传递一个参数"><a href="#url传递一个参数" class="headerlink" title="url传递一个参数"></a>url传递一个参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">果需要从url中获取一个值，需要对正则加小括号</span><br><span class="line">url(r&apos;^grade/(\d+)$&apos;, views.getStudent)</span><br><span class="line">注意，url匹配中添加了()取参，在请求调用的函数中必须接收 eg: def getStudent(request, classid)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_views1.png" alt="Django运行" title="">                </div>                <div class="image-caption">Django运行</div>            </figure><h3 id="url传递多个参数"><a href="#url传递多个参数" class="headerlink" title="url传递多个参数"></a>url传递多个参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果需要获取url路径中的多个参数，那就添加多个括号，默认按照顺序匹配路径名字，参数顺序必须固定</span><br><span class="line">定义url中传递三个参数的地址：</span><br><span class="line">    url(r&apos;^news/(\d&#123;4&#125;)/(\d)+/(\d+)$&apos;, views.getNews)</span><br><span class="line">    实现方法：匹配年月日 def getNews(requests, year, month, day)</span><br></pre></td></tr></table></figure><p>例子：查找计算机技术书籍下的脚本语言中的python的书籍信息 </p><p><img src="./django_views2.png" alt="Django运行"></p><h3 id="使用关键词获取参数"><a href="#使用关键词获取参数" class="headerlink" title="使用关键词获取参数"></a>使用关键词获取参数</h3><p>参数也可以使用关键字参数形式,参数顺序可以任意 <code>url(r&#39;news/(?P\d{4})/(?P\d+)/(?P\d+)$&#39;, views.getNews)</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_views3.png" alt="Django运行" title="">                </div>                <div class="image-caption">Django运行</div>            </figure><h2 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h2><h3 id="在模板中进行反解析"><a href="#在模板中进行反解析" class="headerlink" title="在模板中进行反解析"></a>在模板中进行反解析</h3><p><img src="./django_views4.png" alt="Django运行"></p><h3 id="在views中使用反向解析"><a href="#在views中使用反向解析" class="headerlink" title="在views中使用反向解析"></a>在views中使用反向解析</h3><p>使用反向解析优点 如果在视图中，模板中使用硬编码连接，在url配置发生改变时，需要变更的代码会非常多，这样导致我们的代码结构不是很容易维护，使用反向解析可以提高我们代码的扩展性和可维护性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpResponseRedirect(reverse(namespace:name, kwargs = &#123;key1 : value1, key2 : value2&#125;))</span><br><span class="line"># kwargs 是字典</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_views5.png" alt="Django运行" title="">                </div>                <div class="image-caption">Django运行</div>            </figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="错误视图"><a href="#错误视图" class="headerlink" title="错误视图"></a>错误视图</h3><p>位置：通常在应用下的views.py中定义 错误视图： 404视图（页面没有被找到 page not found） 400视图（客户端操作错误 bad request） 403视图（权限错误 403 forbidden ） 500视图（服务器内部错误 server error）</p><h3 id="自定义错误视图"><a href="#自定义错误视图" class="headerlink" title="自定义错误视图"></a>自定义错误视图</h3><p>####修改debug模式</p><p>在工程的settings中修改debug模式： 注意： 需要在debug=False的情况下才可以 没有关闭debug的情况下会在界面中直接显示错误的信息 </p><p><img src="./django_views6.png" alt="Django运行"></p><h4 id="在templates文件中定义自己的错误样式"><a href="#在templates文件中定义自己的错误样式" class="headerlink" title="在templates文件中定义自己的错误样式"></a>在templates文件中定义自己的错误样式</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_views7.png" alt="Django运行" title="">                </div>                <div class="image-caption">Django运行</div>            </figure><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><h3 id="HttpRequest定义"><a href="#HttpRequest定义" class="headerlink" title="HttpRequest定义"></a>HttpRequest定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">服务器在接收到http请求后，会根据报文创建HttpRequest对象</span><br><span class="line">视图中第一个参数就是HttpRequest对象</span><br><span class="line">Django框架会进行自己的包装，之后传递给视图</span><br><span class="line">属性：</span><br><span class="line">    path        请求的完整路径</span><br><span class="line">    method   请求的方法，通常get，post</span><br><span class="line">    Encoding 编码方式，常用utf-8</span><br><span class="line">    Get          类似字典的参数，包含了get的所有参数</span><br><span class="line">    post       类似字典的参数，包含了post的所有参数</span><br><span class="line">    Files         类似字典的参数，包含了上传的文件</span><br><span class="line">    Cookies    字典，包含了所有的COOKIES</span><br><span class="line">    Session    类似字典，表示会话</span><br><span class="line">    方法： is_ajax()   判断是否是ajax()，通常在移动端和js中</span><br></pre></td></tr></table></figure><h3 id="响应QueryDict类型"><a href="#响应QueryDict类型" class="headerlink" title="响应QueryDict类型"></a>响应QueryDict类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1）类似字典的结构数据，与字典的区别，可以存在相同的键</span><br><span class="line">2）GET和POST都是QueryDict对象</span><br><span class="line">3）QueryDict中数据获取方式</span><br><span class="line">    dict[&apos;name&apos;] 或者dict.get(&apos;name&apos;)</span><br><span class="line">    获取指定key对应的所有值</span><br><span class="line">    dict.getlist(&apos;name&apos;)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_views8.png" alt="Django运行" title="">                </div>                <div class="image-caption">Django运行</div>            </figure><p>如下，获取重复提交数据的方法： </p><p><img src="./django_views9.png" alt="Django运行"></p><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1）可以直接返回一个HttpResponse对象：</span><br><span class="line">    服务器返回给客户端的数据，HttpResponse由程序员自己创建</span><br><span class="line">    不使用模板，直接HttpResponse()</span><br><span class="line">2）可以返回模板</span><br><span class="line">调用模板，进行渲染，直接使用render一步到位</span><br><span class="line">返回表达式：</span><br><span class="line">    render(request, template_name, context)</span><br><span class="line">        request  请求体对象</span><br><span class="line">        template_name  模板路径</span><br><span class="line">        context  字典参数，用来填坑</span><br><span class="line"></span><br><span class="line">3）属性</span><br><span class="line">    Content   返回的内容</span><br><span class="line">    Charset   编码格式</span><br><span class="line">    status_code  响应状态码（200,4xx,5xx）</span><br><span class="line">        4xx 客户端的错误</span><br><span class="line">        5xx 服务端的错误</span><br><span class="line">    content_type   MIME类型，定义传输类型的，比如有xml，html，png等等，比如content_type=&apos;image/jpg&apos;</span><br><span class="line">4）方法</span><br><span class="line">    init    初始化内容</span><br><span class="line">    write(xxx) 直接写到文本</span><br><span class="line">    flush 冲刷缓冲区</span><br><span class="line">    set_cookie(key, value=&apos;&apos;, max_age=None, exprise=None)</span><br><span class="line">    delete_cookie(key)   删除cookie，上面是设置</span><br><span class="line">4）重定向</span><br><span class="line">    HttpResponseRedirect响应重定向：可以实现服务器内部的跳转</span><br><span class="line">    Return HttpResponseRedirect(&apos;/xxx/xxx&apos;)</span><br><span class="line">    使用的时候推荐使用反向解析</span><br><span class="line">    JsonResponse</span><br><span class="line">    使用json数据的请求，通常用在异步请求上jsonResponse(dict)</span><br><span class="line">    content_type是application/json</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-视图&quot;&gt;&lt;a href=&quot;#Django-–-视图&quot; class=&quot;headerlink&quot; title=&quot;Django – 视图&quot;&gt;&lt;/a&gt;Django – 视图&lt;/h1&gt;&lt;p&gt;MVT模式中的V，V代表视图，在Django中的视图主要用来接受we
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django -- 模型</title>
    <link href="http://alexyanglong.github.io/2018/05/27/Django----%E6%A8%A1%E5%9E%8B/"/>
    <id>http://alexyanglong.github.io/2018/05/27/Django----模型/</id>
    <published>2018-05-26T16:00:00.000Z</published>
    <updated>2018-06-25T08:39:38.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-模型"><a href="#Django-–-模型" class="headerlink" title="Django – 模型"></a>Django – 模型</h1><p>Django对数据库提供了很好的支持，对不同的数据库，django提供了统一调用的API，我们可以根据不同的业务需求使用不同是数据库。Django中引入了ORM(Objects Relational Mapping)对象关系映射，是一种程序技术，可以简化我们对数据库的操作。</p><h2 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h2><p>重要概念：模型，表，属性，字段</p><p>一个模型类在数据库中对应一张表，在模型类中定义的属性，对应模型对照表中的一个字段。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>在应用文件目录下的<code>models.py</code> 中创建<code>Student</code> 、<code>Grade</code> 两个Model。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grade</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">10</span>, null=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>, auto_now=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, null=<span class="keyword">False</span>)</span><br><span class="line">    gender = models.BooleanField(default=<span class="keyword">True</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>, auto_now=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    grade = models.ForeignKey(Grade)</span><br></pre></td></tr></table></figure><p>然后生成迁移文件、执行迁移文件。</p><p>注意：如果执行<code>python manage.py makemigrations</code>后并没有生成迁移文件，一直提示No changes detected这个结果的话，就要手动的去处理了。有两点处理方式：</p><p>1） 先删除掉<code>__pycache__</code>文件夹</p><p>2） 直接强制的去执行迁移命令，<code>python manage.py makemigrations xxx</code> (xxx就是app的名称)</p><p>3） 查看自动生成的数据库，查看表django_migrations，删掉app字段为xxx的数据(xxx就是app的名称)</p><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>ORM(Objects Relational Mapping)对象关系映射，是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。可以简单理解为翻译机。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_models_orm.jpg" alt="django_models_orm" title="">                </div>                <div class="image-caption">django_models_orm</div>            </figure><h3 id="模型查询"><a href="#模型查询" class="headerlink" title="模型查询"></a>模型查询</h3><p>a) 模型成员objects</p><p>Django默认通过模型的objects对象实现模型数据查询</p><p>b) 过滤器</p><p>查询集表示从数据库获取的对象集合</p><p>查询集可以有多个过滤器</p><p>过滤器就是一个函数，基于所给的参数限制查询的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">从SQL角度来说，查询集合和select语句等价，过滤器就像where条件</span><br><span class="line"></span><br><span class="line">Django有两种过滤器用于筛选记录</span><br><span class="line"></span><br><span class="line">filter  : 返回符合筛选条件的数据集</span><br><span class="line"></span><br><span class="line">exclude   : 返回不符合筛选条件的数据集</span><br></pre></td></tr></table></figure><p>多个filter和exclude可以连接在一起查询</p><p>当然还有如下这些过滤器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">all()            返回所有数据</span><br><span class="line"></span><br><span class="line">filter() 返回符合条件的数据</span><br><span class="line"></span><br><span class="line">exclude()        过滤掉符合条件的数据</span><br><span class="line"></span><br><span class="line">order_by()       排序</span><br><span class="line"></span><br><span class="line">values()         一条数据就是一个字典，返回一个列表</span><br></pre></td></tr></table></figure><p>c) 查询单个数据</p><p>get()：返回一个满足条件的对象。如果没有返回符合条件的对象，会应该模型类DoesNotExist异常，如果找到多个，会引发模型类MultiObjectsReturned异常</p><p>first()：返回查询集中的第一个对象</p><p>last()：返回查询集中的最后一个对象</p><p>count()：返回当前查询集中的对象个数</p><p>exists()：判断查询集中是否有数据，如果有数据返回True，没有返回False</p><p>d) 限制查询集</p><p>限制查询集，可以使用下表的方法进行限制，等同于sql中的limit</p><p>模型名.objects.all()[0:5] 小标不能为负数</p><p>e) 字段查询</p><p>对sql中的where实现，作为方法，filter(),exclude()，get()的参数</p><p>语法：属性名称__比较运算符 = 值</p><p>外键：属性名_id</p><p>注意：like语句中使用%表示通配符。比如sql语句查询 where name like ‘%xxx%’，等同于filter(name_contains=’xxx’)</p><p>f) 比较运算符</p><p>contains：是否包含，大小写敏感</p><p>startswith，endswith：以values开头或者结尾，大小写敏感 以上的运算符前加上i(ignore)就不区分大小写了</p><p>isnull，isnotnull：是否为空。filter(name__isnull=True)</p><p>in：是否包含在范围内。filter(id__in=[1,2,3])</p><p>gt，gte，lt，lte：大于，大于等于，小于，小于等于。filter(age__gt=10)</p><p>pk：代表主键，也就是id。filter(pk=1)</p><p>g) 聚合函数</p><p>agregate()函数返回聚合函数的值</p><p>Avg：平均值</p><p>Count：数量</p><p>Max：最大</p><p>Min：最小</p><p>Sum：求和</p><p>例如: Student.objects.aggregate(Max(‘age’))</p><p>h) F对象/Q对象</p><p><strong>F对象:</strong>可以使用模型的A属性与B属性进行比较</p><p>背景:在模型中有两个字段，分别表示学生成绩A与成绩B，要对成绩AB进行比较计算，就需要使用到F对象。</p><p>例如有如下例子1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 班级中有女生个数字段以及男生个数字段，统计女生数大于男生数的班级</span></span><br><span class="line"></span><br><span class="line">grades = Grade.objects.filter(girlnum__gt=F(<span class="string">'boynum'</span>))</span><br></pre></td></tr></table></figure><p>F对象支持算数运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grades = Grade.objects.filter(girlnum__gt=F(<span class="string">'boynum'</span>) + <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>例子2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询python班下语文成绩超过数学成绩10分的学生</span></span><br><span class="line"></span><br><span class="line">grade = Grade.objects.filter(g_name=<span class="string">'python'</span>).first()</span><br><span class="line">students = grade.student_set.all()</span><br><span class="line"></span><br><span class="line">stu = students.filter(s_yuwen__gt= F(<span class="string">'s_shuxue'</span>) + <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><strong>Q对象:</strong></p><p>Q()对象就是为了将过滤条件组合起来</p><p>当我们在查询的条件中需要组合条件时(例如两个条件“且”或者“或”)时。我们可以使用Q()查询对象</p><p>使用符号&amp;或者|将多个Q()对象组合起来传递给filter()，exclude()，get()等函数</p><p>Q()对象的前面使用字符“~”来代表意义“非”</p><p>例子1:</p><p>查询学生中不是12岁的或者姓名叫张三的学生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student = Student.objects.filter(~Q(age=<span class="number">12</span>) | Q(name=<span class="string">'张三'</span>))</span><br></pre></td></tr></table></figure><p>例子2：</p><p>查询python班语文小于80并且数学小于等于80的学生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grade = Grade.objects.filter(g_name=<span class="string">'python'</span>).first()</span><br><span class="line">students = grade.student_set.all()</span><br><span class="line">stu = students.filter(~Q(s_yuwen__gte=<span class="number">80</span>) &amp; Q(s_shuxue__lte=<span class="number">80</span>))</span><br></pre></td></tr></table></figure><p>例子3：</p><p>查询python班语文大于等于80或者数学小于等于80的学生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grade = Grade.objects.filter(g_name=<span class="string">'python'</span>).first()</span><br><span class="line">students = grade.student_set.all()</span><br><span class="line"></span><br><span class="line">stu = students.filter(Q(s_yuwen__gte=<span class="number">80</span>) | Q(s_shuxue__lte=<span class="number">80</span>))</span><br></pre></td></tr></table></figure><h3 id="模型字段定义属性"><a href="#模型字段定义属性" class="headerlink" title="模型字段定义属性"></a>模型字段定义属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">概述</span><br><span class="line">·django根据属性的类型确定以下信息</span><br><span class="line">·当前选择的数据库支持字段的类型</span><br><span class="line">·渲染管理表单时使用的默认html控件</span><br><span class="line">·在管理站点最低限度的验证</span><br><span class="line"></span><br><span class="line">·django会为表增加自动增长的主键列，每个模型只能有一个主键列，如果使用选项设置某属性为主键列后，则django不会再生成默认的主键列</span><br><span class="line"></span><br><span class="line">·属性命名限制</span><br><span class="line">·遵循标识符规则(不使用python预定义的标识符号，内置函数名，异常等。避免使用下划线等)</span><br><span class="line">·由于django的查询方式，不允许使用连续的下划线</span><br><span class="line"></span><br><span class="line">库</span><br><span class="line">·定义属性时，需要字段类型，字段类型被定义在django.db.models.fields目录下，为了方便使用，被导入到django.db.models中</span><br><span class="line"></span><br><span class="line">·使用方式</span><br><span class="line">·导入from django.db import models</span><br><span class="line">·通过models.Field创建字段类型的对象，赋值给属性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">逻辑删除</span><br><span class="line">·对于重要数据都做逻辑删除，不做物理删除，实现方法是定义isDelete属性，类型为BooleanField，默认值为False</span><br><span class="line"></span><br><span class="line">字段类型</span><br><span class="line">·AutoField</span><br><span class="line">·一个根据实际ID自动增长的IntegerField，通常不指定如果不指定，一个主键字段将自动添加到模型中</span><br><span class="line"></span><br><span class="line">·CharField(max_length=字符长度)</span><br><span class="line">·字符串，默认的表单样式是 TextInput</span><br><span class="line"></span><br><span class="line">·TextField</span><br><span class="line">·大文本字段，一般超过4000使用，默认的表单控件是Textarea</span><br><span class="line"></span><br><span class="line">·IntegerField</span><br><span class="line">·整数</span><br><span class="line"></span><br><span class="line">·DecimalField(max_digits=None, decimal_places=None)</span><br><span class="line">·使用python的Decimal实例表示的十进制浮点数</span><br><span class="line">·参数说明</span><br><span class="line">·DecimalField.max_digits</span><br><span class="line">·位数总数</span><br><span class="line">·DecimalField.decimal_places</span><br><span class="line">·小数点后的数字位数</span><br><span class="line"></span><br><span class="line">·FloatField</span><br><span class="line">·用Python的float实例来表示的浮点数</span><br><span class="line"></span><br><span class="line">·BooleanField</span><br><span class="line">·true/false 字段，此字段的默认表单控制是CheckboxInput</span><br><span class="line"></span><br><span class="line">·NullBooleanField</span><br><span class="line">·支持null、true、false三种值</span><br><span class="line"></span><br><span class="line">·DateField([auto_now=False, auto_now_add=False])</span><br><span class="line">·使用Python的datetime.date实例表示的日期</span><br><span class="line">·参数说明</span><br><span class="line">·DateField.auto_now</span><br><span class="line">·每次保存对象时，自动设置该字段为当前时间，用于&quot;最后一次修改&quot;的时间戳，它总是使用当前日期，默认为false</span><br><span class="line">·DateField.auto_now_add</span><br><span class="line">·当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为false</span><br><span class="line">·说明</span><br><span class="line">·该字段默认对应的表单控件是一个TextInput. 在管理员站点添加了一个JavaScript写的日历控件，和一个“Today&quot;的快捷按钮，包含了一个额外的invalid_date错误消息键</span><br><span class="line">·注意</span><br><span class="line">·auto_now_add, auto_now, and default 这些设置是相互排斥的，他们之间的任何组合将会发生错误的结果</span><br><span class="line"></span><br><span class="line">·TimeField</span><br><span class="line">·使用Python的datetime.time实例表示的时间，参数同DateField</span><br><span class="line"></span><br><span class="line">·DateTimeField</span><br><span class="line">·使用Python的datetime.datetime实例表示的日期和时间，参数同DateField</span><br><span class="line"></span><br><span class="line">·FileField</span><br><span class="line">·一个上传文件的字段</span><br><span class="line"></span><br><span class="line">·ImageField</span><br><span class="line">·继承了FileField的所有属性和方法，但对上传的对象进行校验，确保它是个有效的image</span><br><span class="line"></span><br><span class="line">字段选项</span><br><span class="line">·概述</span><br><span class="line">·通过字段选项，可以实现对字段的约束</span><br><span class="line">·在字段对象时通过关键字参数指定</span><br><span class="line"></span><br><span class="line">·null</span><br><span class="line">·如果为True，则该字段在数据库中是空数据，默认值是 False</span><br><span class="line"></span><br><span class="line">·blank</span><br><span class="line">·如果为True，则该字段允许为空白，默认值是 False</span><br><span class="line"></span><br><span class="line">·注意</span><br><span class="line">·null是数据库范畴的概念，blank是表单验证证范畴的</span><br><span class="line"></span><br><span class="line">·db_column</span><br><span class="line">·字段的名称，如果未指定，则使用属性的名称</span><br><span class="line"></span><br><span class="line">·db_index</span><br><span class="line">·若值为 True, 则在表中会为此字段创建索引</span><br><span class="line"></span><br><span class="line">·default</span><br><span class="line">·默认值</span><br><span class="line"></span><br><span class="line">·primary_key</span><br><span class="line">·若为 True, 则该字段会成为模型的主键字段</span><br><span class="line"></span><br><span class="line">·unique</span><br><span class="line">·如果为 True, 这个字段在表中必须有唯一值</span><br></pre></td></tr></table></figure><h2 id="模型间的关联关系"><a href="#模型间的关联关系" class="headerlink" title="模型间的关联关系"></a>模型间的关联关系</h2><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建学生的模型：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  stu_name = models.CharField(max_length=<span class="number">6</span>, unique=<span class="keyword">True</span>)</span><br><span class="line">  stu_sex = models.BooleanField(default=<span class="number">0</span>)</span><br><span class="line">  stu_birth = models.DateField()</span><br><span class="line">  stu_delete = models.BooleanField(default=<span class="number">0</span>)</span><br><span class="line">  stu_create_time = models.DateField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">  stu_operate_time = models.DateField(auto_now=<span class="keyword">True</span>)</span><br><span class="line">  stu_tel = models.CharField(max_length=<span class="number">11</span>)</span><br><span class="line"> stu_yuwen = models.DecimalField(max_digits=<span class="number">3</span>, decimal_places=<span class="number">1</span>, default=<span class="number">0</span>)</span><br><span class="line">  stu_shuxue = models.DecimalField(max_digits=<span class="number">3</span>, decimal_places=<span class="number">1</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">      db_table = <span class="string">'stu'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建学生拓展的模型：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StuInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">stu_addr = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">stu_age = models.IntegerField()</span><br><span class="line">stu = models.OneToOneField(Student)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">db_table = <span class="string">'stu_info'</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用models.OneToOneField()进行关联</span><br><span class="line">class StuInfo(models.Model):下是通过班级获取学生信</span><br><span class="line">    stu = models.OneToOneField(Student)</span><br><span class="line">注意：在数据中关联字段名称叫stu_id</span><br></pre></td></tr></table></figure><h4 id="通过学生拓展表去获取学生信息"><a href="#通过学生拓展表去获取学生信息" class="headerlink" title="通过学生拓展表去获取学生信息"></a>通过学生拓展表去获取学生信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stuinfo = StuInfo.objects.all().first()</span><br><span class="line">student = stuinfo.stu</span><br><span class="line"></span><br><span class="line">注意：通过拓展表去获取学生的信息的话，语法如下；</span><br><span class="line">    学生拓展表的单条对象.关联字段，即可获取到学生表的数据</span><br></pre></td></tr></table></figure><h4 id="通过学生获取扩展信息1"><a href="#通过学生获取扩展信息1" class="headerlink" title="通过学生获取扩展信息1"></a>通过学生获取扩展信息1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stu = Student.objects.all().first()</span><br><span class="line">stuInfo = stu.stuInfo</span><br><span class="line"></span><br><span class="line">注意：通过学生获取关联表的数据的话，语法如下：</span><br><span class="line">    学生对象.关联的表名，即可获取到关联表的数据</span><br></pre></td></tr></table></figure><h4 id="通过学生获取扩展信息2"><a href="#通过学生获取扩展信息2" class="headerlink" title="通过学生获取扩展信息2"></a>通过学生获取扩展信息2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在关联字段OneToOneField中加入参数related_name=&apos;xxx&apos;</span><br><span class="line"></span><br><span class="line">stu = Student.objects.all().first()</span><br><span class="line">stuInfo = stu.xxx</span><br><span class="line"></span><br><span class="line">注意：通过学生获取关联表的数据的话，语法如下：</span><br><span class="line">    学生对象.关联的字段中定义的related_name参数，即可获取到关联表的数据</span><br></pre></td></tr></table></figure><h4 id="设置对应关系的字段为保护模式"><a href="#设置对应关系的字段为保护模式" class="headerlink" title="设置对应关系的字段为保护模式"></a>设置对应关系的字段为保护模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">models.CASCADE                      默认值</span><br><span class="line">models.PROTECT                保护模式</span><br><span class="line">models.SET_NULL                 置空模式</span><br><span class="line">models.SET_DETAULT          置默认值</span><br><span class="line">models.SET()     删除的时候吃重新动态指向一个实体访问对象元素</span><br><span class="line">on_delete = models.PROTECT</span><br><span class="line"></span><br><span class="line">修改on_delete参数</span><br><span class="line">models.OneToOneField(&apos;Student&apos;, on_delete=models.SET_NULL, null=True)</span><br><span class="line"></span><br><span class="line">在删除student对象的时候，stuinfo的关联字段会设置为空null=True，如下命令去删除student的数据：</span><br><span class="line"></span><br><span class="line">Student.objects.filter(id=1).delete()</span><br></pre></td></tr></table></figure><h4 id="定义on-delete-models-PROTECT"><a href="#定义on-delete-models-PROTECT" class="headerlink" title="定义on_delete=models.PROTECT"></a>定义on_delete=models.PROTECT</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p =  Student.objects.all().first()</span><br><span class="line">p.delete()</span><br><span class="line"></span><br><span class="line">注意：这个时候去执行该业务逻辑的方法的时候会报错</span><br></pre></td></tr></table></figure><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><h4 id="模型-1"><a href="#模型-1" class="headerlink" title="模型"></a>模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个班级类还有学生类，实现一对多的关系：</span></span><br><span class="line"><span class="comment"># 先定义班级类</span></span><br><span class="line">Class Grade(models.Model):</span><br><span class="line">g_name = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义student</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">s_name = models.CharField(max_length=<span class="number">10</span>)</span><br><span class="line">s_age = models.IntegerField(default=<span class="number">1</span>)</span><br><span class="line">s_grade = models.ForeignKey(Grade, on_delete=PROTECT)</span><br></pre></td></tr></table></figure><p>注意：使用models.ForeignKey关联 获取对象元素 <code>grade.student_set</code></p><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><p>语法：通过一获取多的数据</p><p>公式： 一的对象.多的模型_set</p><p>然后在获取数据all(), get(), filter() 等等</p><p>如下先通过学生去获取班级信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stu = Student.objects.first()</span><br><span class="line">stu.stu_grade</span><br></pre></td></tr></table></figure><p>如下是通过班级获取学生信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = Grade.objects.all().first()</span><br><span class="line">g.stugrade.all()   ---&gt; 其中stugrade是定义的related_name参数</span><br></pre></td></tr></table></figure><p>重点： 定义了related_name字段以后，只能通过related_name去反向获取数据，在也不能通过_set方法去获取数据了</p><h4 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">获取班级的学生(通过一获取多)</span><br><span class="line">1. 低性能方法：</span><br><span class="line">g = Grade.objects.all().first()</span><br><span class="line">s = Student.objects.filter(s_grade=g)</span><br><span class="line"></span><br><span class="line">2. 高性能方法：</span><br><span class="line">g = Grate.objects.all().first()</span><br><span class="line">s = g.student_set.all()</span><br></pre></td></tr></table></figure><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><h5 id="获取python班下的所有学生的信息"><a href="#获取python班下的所有学生的信息" class="headerlink" title="获取python班下的所有学生的信息"></a>获取python班下的所有学生的信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class="line">allstu = gs.student_set.all()</span><br></pre></td></tr></table></figure><h5 id="获取python班下语文成绩大于80分的女学生"><a href="#获取python班下语文成绩大于80分的女学生" class="headerlink" title="获取python班下语文成绩大于80分的女学生"></a>获取python班下语文成绩大于80分的女学生</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class="line">allstu = gs.student_set.filter(stu_yuwen__gte=80)</span><br></pre></td></tr></table></figure><h5 id="获取python班下语文成绩超过数学成绩10分的男学生"><a href="#获取python班下语文成绩超过数学成绩10分的男学生" class="headerlink" title="获取python班下语文成绩超过数学成绩10分的男学生"></a>获取python班下语文成绩超过数学成绩10分的男学生</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class="line">allstu = gs.student_set.filter(stu_yuwen__gte=F(&apos;stu_shuxue&apos;) + 10)</span><br></pre></td></tr></table></figure><h5 id="获取出生在80后的男学生，查看他们的班级"><a href="#获取出生在80后的男学生，查看他们的班级" class="headerlink" title="获取出生在80后的男学生，查看他们的班级"></a>获取出生在80后的男学生，查看他们的班级</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gs = Grade.objects.filter(g_name=&apos;python&apos;)[0]</span><br><span class="line">allstu = gs.student_set.filter(stu_birth__gte=&apos;1980-01-01&apos;, stu_birth__lte=&apos;1990-01-01&apos;)</span><br></pre></td></tr></table></figure><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><h4 id="M-N-模型"><a href="#M-N-模型" class="headerlink" title="M:N 模型"></a>M:N 模型</h4><p>定义购物车，用户的例子实现多对多： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建用户模型: </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsUser</span><span class="params">(models.Model)</span>:</span> </span><br><span class="line">u_name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2. 创建商品模型:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">g_name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">g_user = models.ManyToManyField(User)</span><br></pre></td></tr></table></figure><h4 id="对多表结构"><a href="#对多表结构" class="headerlink" title="对多表结构"></a>对多表结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">多对多关系：</span><br><span class="line">1. 生成表的时候会多生成一张表（实际会有三张表）</span><br><span class="line">2. 生成的表是专门用来维护关系的</span><br><span class="line">3. 生成的表是使用两个外键来维护多对多的关系</span><br><span class="line">4. 两个一对多的关系来实现多对多的实现　　　</span><br><span class="line">5. 删除一个表的数据的话，中间关联表也要删除相关的信息</span><br></pre></td></tr></table></figure><h4 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h4><h5 id="获取第一个用户购买了那些商品"><a href="#获取第一个用户购买了那些商品" class="headerlink" title="获取第一个用户购买了那些商品"></a>获取第一个用户购买了那些商品</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gu = GoodsUser.objects.all().first()</span><br><span class="line">allstu = gu.goods_set.all()</span><br></pre></td></tr></table></figure><h5 id="获取指定商品的购买用户信息"><a href="#获取指定商品的购买用户信息" class="headerlink" title="获取指定商品的购买用户信息"></a>获取指定商品的购买用户信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = Goods.objects.filter(id=1)[0]</span><br><span class="line">g.g_user.all()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-模型&quot;&gt;&lt;a href=&quot;#Django-–-模型&quot; class=&quot;headerlink&quot; title=&quot;Django – 模型&quot;&gt;&lt;/a&gt;Django – 模型&lt;/h1&gt;&lt;p&gt;Django对数据库提供了很好的支持，对不同的数据库，django提
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django -- Admin管理模块的使用</title>
    <link href="http://alexyanglong.github.io/2018/05/25/Django----Admin%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://alexyanglong.github.io/2018/05/25/Django----Admin管理模块的使用/</id>
    <published>2018-05-24T16:00:00.000Z</published>
    <updated>2018-06-25T08:22:06.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-Admin管理模块的使用"><a href="#Django-–-Admin管理模块的使用" class="headerlink" title="Django – Admin管理模块的使用"></a>Django – Admin管理模块的使用</h1><p>Djang自身集成了管理后台，在管理后台中可以对我们自定义model进行CRUD操作，也能进行列表展示解析，分页等等。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>先创建一个项目test_p，在项目中创建应用testapp，将项目配置这些配置好。</p><h3 id="创建一个model"><a href="#创建一个model" class="headerlink" title="创建一个model"></a>创建一个model</h3><p>在应用文件目录下的<code>models.py</code> 中创建<code>Student</code> 、<code>Grade</code> 两个Model。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grade</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">10</span>, null=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>, auto_now=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, null=<span class="keyword">False</span>)</span><br><span class="line">    gender = models.BooleanField(default=<span class="keyword">True</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>, auto_now=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    grade = models.ForeignKey(Grade)</span><br></pre></td></tr></table></figure><h3 id="admin管理后台的url"><a href="#admin管理后台的url" class="headerlink" title="admin管理后台的url"></a>admin管理后台的url</h3><p>在项目文件目录下可以看到路由配置文件<code>urls.py</code>中有一个admin的url地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="创建admin后台的用户密码"><a href="#创建admin后台的用户密码" class="headerlink" title="创建admin后台的用户密码"></a>创建admin后台的用户密码</h3><p>在创建用户之前，先要在终端中使用命令迁移数据库。点击IDE最下方的Terminal，进入终端，先检查虚拟环境是否正确，若不正确，先配置虚拟环境。</p><p>在终端中输入命令：</p><p><code>python manage.py makemigrations</code> 生成迁移文件</p><p><code>python manage.py migrate</code> 执行迁移文件</p><p>数据库迁移成功后，开始创建用户，命令如下：</p><p><code>python manage.py createsuperuser</code>  创建超级用户</p><p>接着要填写用户名、邮箱、密码、确认密码。如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./Admin——创建用户.png" alt="Admin——创建用户" title="">                </div>                <div class="image-caption">Admin——创建用户</div>            </figure><p>创建用户名成功之后，在浏览器中输入 <code>127.0.0.1:8000/admin/</code> 或 <code>localhost:8000/admin/</code> 进行登录。</p><h2 id="在管理后台中管理模型对象"><a href="#在管理后台中管理模型对象" class="headerlink" title="在管理后台中管理模型对象"></a>在管理后台中管理模型对象</h2><p>需要在应用文件目录下的<code>admin.py</code> 文件中注册要进行管理的Model。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># admin.site.register(模型名)</span></span><br><span class="line"></span><br><span class="line">admin.site.register(Grade)</span><br><span class="line">admin.site.register(Student)</span><br></pre></td></tr></table></figure><p>当然也可以继承admin.ModelAdmin，编写自己的admin，来自定义Model的后台管理展示界面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_gender</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.gender:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'男'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'女'</span></span><br><span class="line"></span><br><span class="line">    set_gender.short_description = <span class="string">'性别'</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'name'</span>, set_gender]</span><br><span class="line">    list_filter = [<span class="string">'gender'</span>]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>]</span><br><span class="line">    list_per_page = <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">admin.site.register(Student, StudentAdmin)</span><br></pre></td></tr></table></figure><p>说明：</p><p><code>short_description</code> ：表示此字段在界面显示的名称</p><p><code>list_display</code> ：表示需要显示的字段</p><p><code>list_filter</code> ：表示可以进行过滤的字段</p><p><code>search_fields</code> ：表示可以进行搜索的字段</p><p><code>list_per_page</code> ：表示分页的条数</p><p><code>ordering</code> ：表示排序的字段</p><p>界面显示如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./Admin——Model管理界面.png" alt="Admin——Model管理界面" title="">                </div>                <div class="image-caption">Admin——Model管理界面</div>            </figure><p>此外，还可以使用装饰器来实现自定义Model的后台管理展示界面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @admin.register(模型名)</span></span><br><span class="line"><span class="meta">@admin.register(Student)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_gender</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.gender:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'男'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'女'</span></span><br><span class="line"></span><br><span class="line">    set_gender.short_description = <span class="string">'性别'</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'name'</span>, set_gender]</span><br><span class="line">    list_filter = [<span class="string">'gender'</span>]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>]</span><br><span class="line">    list_per_page = <span class="number">10</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-Admin管理模块的使用&quot;&gt;&lt;a href=&quot;#Django-–-Admin管理模块的使用&quot; class=&quot;headerlink&quot; title=&quot;Django – Admin管理模块的使用&quot;&gt;&lt;/a&gt;Django – Admin管理模块的使用&lt;/
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django -- 创建应用、修改配置</title>
    <link href="http://alexyanglong.github.io/2018/05/23/Django%20--%20%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8%E3%80%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE/"/>
    <id>http://alexyanglong.github.io/2018/05/23/Django -- 创建应用、修改配置/</id>
    <published>2018-05-22T16:00:00.000Z</published>
    <updated>2018-06-25T07:36:22.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-创建应用、修改配置"><a href="#Django-–-创建应用、修改配置" class="headerlink" title="Django – 创建应用、修改配置"></a>Django – 创建应用、修改配置</h1><h2 id="在黑屏终端中创建应用"><a href="#在黑屏终端中创建应用" class="headerlink" title="在黑屏终端中创建应用"></a>在黑屏终端中创建应用</h2><p>在创建应用APP之前，先创建一个Django的项目。</p><p>开启黑屏终端，进入项目所在目录，执行创建APP命令（注意要在虚拟环境中执行）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;project directory&gt;</span><br><span class="line">python manage.py startapp app-name</span><br></pre></td></tr></table></figure><p>这样，一个应用就创建成功。但是这个应用APP还不能应用于项目，需要在Django项目目录中进行配置（稍后再说）。</p><h2 id="使用PyCharm创建项目与应用"><a href="#使用PyCharm创建项目与应用" class="headerlink" title="使用PyCharm创建项目与应用"></a>使用PyCharm创建项目与应用</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>打开PyCharm软件，点击“Create New Project”</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./创建项目1.png" alt="创建项目1" title="">                </div>                <div class="image-caption">创建项目1</div>            </figure><p>选择左侧“Django”选项，在右侧选择项目存放路径以及给项目命名，之后选择项目的解释器环境，这里推荐使用自己创建的虚拟环境，不要使用本地环境或者默认创建的虚拟环境。最后是让Django自动创建templates模板目录，当然这里也可以直接创建应用APP。也可以稍后通过命令创建。接下来点击“Create”按钮，开始创建项目。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./创建项目2.png" alt="创建项目2" title="">                </div>                <div class="image-caption">创建项目2</div>            </figure><p>等待项目创建成功，项目在创建时，会下载一些第三方库，比如django框架的库，所以会花费一些时间。耐心等待…… 出现下面界面，项目创建成功。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./创建项目3.png" alt="创建项目3" title="">                </div>                <div class="image-caption">创建项目3</div>            </figure><p>项目文件说明：</p><p><code>manage.py</code>  是Django用于管理本项目的管理集工具，之后站点运行，数据库自动生成，数据表的修改等都是通过运行该文件完成。</p><p><code>__init__.py</code> 指明该目录结构是一个python包，暂无内容，在后期会初始化一些工具会使用到。</p><p><code>seetings.py</code> Django项目的配置文件，其中定义了本项目的引用组件，项目名，数据库，静态资源，调试模式，域名限制等。</p><p><code>urls.py</code> 项目的URL路由映射，实现客户端请求url由哪个模块进行响应。</p><p><code>wsgi.py</code> 定义WSGI接口信息，通常本文件生成后无需改动</p><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>项目创建好以后，就可以创建应用了（如果之前在选项中填写了应用，就会由Django自动创建应用）。在PyCharm界面的最下方，点击“Terminal”选项，进入终端，注意查看虚拟环境是否是正确的。之后在命令行中输入<code>python manage.py startapp app-name</code> 就创建了一个应用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./创建应用1.png" alt="创建应用1" title="">                </div>                <div class="image-caption">创建应用1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./创建应用2.png" alt="创建应用2" title="">                </div>                <div class="image-caption">创建应用2</div>            </figure><h3 id="激活应用"><a href="#激活应用" class="headerlink" title="激活应用"></a>激活应用</h3><p>刚创建的应用，需要在项目配置文件中进行配置才能使用。首先需要在项目目录中的“settings.py”文件中的<code>INSTALLED_APPS</code> 中添加应用的名字。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./配置1.png" alt="配置1" title="">                </div>                <div class="image-caption">配置1</div>            </figure><h3 id="配置语言与时区"><a href="#配置语言与时区" class="headerlink" title="配置语言与时区"></a>配置语言与时区</h3><p>还是在项目目录中的“settings.py”文件中进行配置。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./配置2.png" alt="配置2" title="">                </div>                <div class="image-caption">配置2</div>            </figure><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><p>在“settings.py”文件中找到 <code>DATABASES</code> </p><p><img src="./配置3.png" alt="配置3"></p><p>改为：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./配置4.png" alt="配置4" title="">                </div>                <div class="image-caption">配置4</div>            </figure><p>其中 ENGINE 表示数据库引擎，即使用哪种数据库，这里使用mysql数据库，NAME 表示数据库名，USER 表示用登录mysql的用户名，PASSWORD 表示登录的密码，HOST 表示服务器主机的地址，PORT 表示端口。</p><p>注意：如果要使用mysql，需要在虚拟环境中安装第三方库<code>pip install PyMySQL</code> ，同时需要在项目文件目录（不是应用文件目录）中的<code>__init__.py</code> 文件中做如下修改，完成数据库的驱动加载：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h3 id="配置模板目录"><a href="#配置模板目录" class="headerlink" title="配置模板目录"></a>配置模板目录</h3><p>这里的模板就是HTML页面。在“settings.py”文件中找到 <code>TEMPLATES</code> ，给 DIRS 字段添加如下信息。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./配置5.png" alt="配置5" title="">                </div>                <div class="image-caption">配置5</div>            </figure><h3 id="配置静态文件目录"><a href="#配置静态文件目录" class="headerlink" title="配置静态文件目录"></a>配置静态文件目录</h3><p>现在项目的根目录下创建一个 <code>static</code> 目录，之后在“settings.py”文件中进行配置。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./配置6.png" alt="配置6" title="">                </div>                <div class="image-caption">配置6</div>            </figure><p>到这里，就可以在应用中编写<code>models</code>，生成迁移：<code>python manage.py makemigrations 应用名</code> ，执行迁移：<code>python manage.py migrate</code> ，编写<code>views</code> ，修改<code>urls</code> ，创建<code>template</code> 来实现自己的Web应用了。</p><p>当然，如果需要添加自己定义的中间件也可以在 “setting.py” 文件中的 <code>MIDDLEWARE</code> 中进行添加；如果需要保存用户上传的图片、音视频文件也是要在 “setting.py” 文件中添加配置（一般写在配置静态文件的后面）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 现在项目根目录下创建 media 目录</span></span><br><span class="line"><span class="comment"># 配置上传的媒体文件路径 （图片、音视频）</span></span><br><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'media'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在项目目录下的urls中配置：</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.staticfiles.urls <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> stu_pro.settings <span class="keyword">import</span> MEDIA_URL, MEDIA_ROOT</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">urlpatterns += static(MEDIA_URL, document_root=MEDIA_ROOT)</span><br></pre></td></tr></table></figure><p>还有在开发环境中要将 “setting.py” 文件中的 <code>DEBUG</code> 设置为 <code>True</code> ，表示启用Debug模式，这样可以详细的看到在在开发过程中出现的错误，以便于修改。在生产环境中将 <code>DEBUG</code> 设置为 <code>False</code> 。此外还有 <code>ALLOWED_HOSTS</code> 表示允许访问的主机列表，一般设为<code>ALLOWED_HOSTS = [&#39;*&#39;]</code> 。</p><p>还有一个最重要的，就是日志，也需要在  “setting.py”  中进行配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建存储日志文件地址</span></span><br><span class="line">LOG_PATH = os.path.join(BASE_DIR, <span class="string">'log'</span>)</span><br><span class="line"><span class="comment"># 判断log目录存不存在，不存在就创建</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(LOG_PATH):</span><br><span class="line">    os.mkdir(LOG_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="comment"># version 只能为1</span></span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment"># disable_existing_loggers 的值默认为True，那么配置中的所有 logger 都将被禁用</span></span><br><span class="line">    <span class="comment"># logger 的禁用与删除不同，logger任然存在，但是将默默丢弃任何传递给它的信息，也不会传播到上一级</span></span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="keyword">False</span>,</span><br><span class="line">    <span class="string">'formatters'</span>: &#123;</span><br><span class="line">        <span class="string">'verbose'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(levelname)s %(asctime)s %(module)s %(process)s %(thread)s %(message)s'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'simple'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(levelname)s %(message)s'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'stu_handlers'</span>: &#123;</span><br><span class="line">            <span class="comment"># 如果loggers的处理级别小于handlers的处理级别，则handler忽略该信息</span></span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="comment"># 指定文件类型为RotatingFileHandler，当日志文件大小超过maxBytes后，会自动切割</span></span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,</span><br><span class="line">            <span class="comment"># 输出文件地址</span></span><br><span class="line">            <span class="string">'filename'</span>: <span class="string">'%s/log.txt'</span> % LOG_PATH,</span><br><span class="line">            <span class="comment"># 使用哪一种日志配置格式</span></span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'verbose'</span>,</span><br><span class="line">            <span class="comment"># 指定每个日志文件的大小</span></span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'loggers'</span>:&#123;</span><br><span class="line">        <span class="string">'console'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'stu_handlers'</span>],</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</span><br><span class="line">            <span class="comment"># propagate=0，表示输出日志，但不传递消息</span></span><br><span class="line">            <span class="comment"># propagate=1，表示输出日志，同时消息往更高级别的地方传递。root为最高级别。</span></span><br><span class="line">            <span class="string">'propagate'</span>: <span class="keyword">False</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>logging模块可以收集记录错误，警告等调试信息，在程序中可以捕获这些信息，并且甚至可以将错误的重要信息等都可以通过邮件发送给开发者。</p><p>logging的组成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Loggers</span><br><span class="line">Handlers</span><br><span class="line">Filters</span><br><span class="line">Formatters</span><br></pre></td></tr></table></figure><p>Loggers：</p><p>Logger 为日志系统的入口。每个logger 是一个具名的容器，可以向它写入需要处理的消息。</p><p>每个logger 都有一个日志级别。日志级别表示该logger 将要处理的消息的严重性。</p><p>Python 定义以下几种日志级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG：用于调试目的的底层系统信息</span><br><span class="line">INFO：普通的系统信息</span><br><span class="line">WARNING：表示出现一个较小的问题。</span><br><span class="line">ERROR：表示出现一个较大的问题。</span><br><span class="line">CRITICAL：表示出现一个致命的问题。</span><br></pre></td></tr></table></figure><p>日志级别等级CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET</p><p>Handlers：</p><p>Handler 决定如何处理logger 中的每条消息。它表示一个特定的日志行为。</p><p>与logger 一样，handler 也有一个日志级别。如果消息的日志级别小于handler 的级别，handler 将忽略该消息。</p><p>Logger 可以有多个handler，而每个handler 可以有不同的日志级别。</p><p>Filters：</p><p>Filter 用于对从logger 传递给handler 的日志记录进行额外的控制。</p><p>Formatters：</p><p>日志记录需要转换成文本。</p><p>Formatter 表示文本的格式。Fomatter 通常由包含日志记录属性的Python 格式字符串组成；</p><p>你也可以编写自定义的fomatter 来实现自己的格式。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./django_logging1.png" alt="django_logging1" title="">                </div>                <div class="image-caption">django_logging1</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-创建应用、修改配置&quot;&gt;&lt;a href=&quot;#Django-–-创建应用、修改配置&quot; class=&quot;headerlink&quot; title=&quot;Django – 创建应用、修改配置&quot;&gt;&lt;/a&gt;Django – 创建应用、修改配置&lt;/h1&gt;&lt;h2 id=&quot;在
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django -- 创建第一个Django项目</title>
    <link href="http://alexyanglong.github.io/2018/05/22/Django----%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AADjango%E9%A1%B9%E7%9B%AE/"/>
    <id>http://alexyanglong.github.io/2018/05/22/Django----创建第一个Django项目/</id>
    <published>2018-05-21T16:00:00.000Z</published>
    <updated>2018-06-25T07:36:44.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-–-创建第一个Django项目"><a href="#Django-–-创建第一个Django项目" class="headerlink" title="Django – 创建第一个Django项目"></a>Django – 创建第一个Django项目</h1><p>在开始创建Django项目之前，先要理解两个概念：请求与响应、MVC（在Django中称为MTV）。</p><h2 id="什么是请求与响应"><a href="#什么是请求与响应" class="headerlink" title="什么是请求与响应"></a>什么是请求与响应</h2><p>请求：又称为HTTP请求，指从客户端到服务器端的请求消息。包括：请求行、请求头、消息体。消息行中，有对资源的请求方法、资源的标识符及使用的协议。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST http://xg.mediportal.com.cn/health/sms/verify/telephone HTTP/1.1</span><br></pre></td></tr></table></figure><p>请求头中包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: DGroupPatient/1.052701.230/Dalvik/2.1.0 (Linux; U; Android 5.1.1; KIW-AL10 Build/HONORKIW-AL10)</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line">Host: xg.mediportal.com.cn</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">Content-Length: 33</span><br></pre></td></tr></table></figure><p>请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户端要向服务器端发送的信息，当然如果不需要向服务器端发送信息，也可以没有。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">telephone=15527177736&amp;userType=1&amp;</span><br></pre></td></tr></table></figure><p>响应：也成为HTTP响应，指从服务器端到客户端的响应消息。与HTTP请求相似，HTTP响应也由3个部分构成，分别是：状态行、响应头、响应正文。状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure><p>响应头主要包含服务器发送的数据相关信息，比如返回数据的类型、长度等等。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Date: Tue, 31 May 2016 02:09:24 GMT</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Headers: X-Requested-With,access_token,access-token,content-type,multipart/form-data,application/x-www-form-urlencoded</span><br><span class="line">Access-Control-Allow-Methods: GET,POST,OPTIONS</span><br><span class="line">Content-Length: 49</span><br></pre></td></tr></table></figure><p>响应头和响应正文之间也有一个空行，表示响应头结束。响应正文包含了服务器端向客户端发送的数据。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;&quot;resultCode&quot;:1,&quot;resultMsg&quot;:&quot;手机号未注册&quot;&#125;</span><br></pre></td></tr></table></figure><p>通过下面的图理解请求与响应的流程：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./请求与响应.jpeg" alt="请求与响应" title="">                </div>                <div class="image-caption">请求与响应</div>            </figure><h2 id="什么是MVC"><a href="#什么是MVC" class="headerlink" title="什么是MVC"></a>什么是MVC</h2><p>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。</p><p>目标：将模型（数据）和视图（显示）解耦合。</p><p>通过控制器，将数据和显示分离，好处是同一个视图可以加载不同的模型，同一个模型也可以显示成不同的视图。</p><p>稍具规模的系统都会使用MVC架构或者它的变体（MVP、MVVM等）。</p><p>通过下面的图来理解MVC的工作模式：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./MVC.jpeg" alt="MVC" title="">                </div>                <div class="image-caption">MVC</div>            </figure><p>在Django中将这种模式称为MTV ：模型（Model）- 模板（Template，对应视图） - 视图（View，对应控制器）</p><h2 id="创建第一个Django项目"><a href="#创建第一个Django项目" class="headerlink" title="创建第一个Django项目"></a>创建第一个Django项目</h2><p>Windows下步骤：</p><p>（在黑屏终端中执行）</p><p><code>python -m venv 虚拟环境名</code>        创建项目虚拟环境</p><p><code>cd 虚拟环境文件名/Scripts</code>        进入虚拟环境</p><p><code>activate.bat</code>                       激活虚拟环境</p><p><code>pip install django==版本号</code>            在虚拟环境下安装django      <code>django-admin --version</code>  查看版本</p><p><code>django-admin startproject 项目名 .</code>  创建django项目</p><p><code>python manage.py runserver</code>         开启服务</p><p>Linux下步骤：</p><p><code>mk 项目目录</code>                    创建django项目目录</p><p><code>cd 项目目录</code>                    进入项目目录</p><p><code>python -m venv 虚拟环境名</code>        创建项目虚拟环境</p><p><code>source 虚拟环境目录/bin/activate</code>    激活虚拟环境</p><p><code>python -m pip install --upgrade pip</code>    更新pip</p><p><code>pip install django==版本号</code>        在虚拟环境下安装django       <code>django-admin --version</code>  查看版本</p><p><code>django-admin startproject 项目名 .</code>    创建django项目</p><p><code>python manage.py runserver</code>         开启服务</p><p>开启了服务之后，在浏览器中输入 <code>127.0.0.1:8000</code> 或 <code>localhost:8000</code> 回车，出现Django界面，第一个Django项目就创建成功了。如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./Django运行.png" alt="Django运行" title="">                </div>                <div class="image-caption">Django运行</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-–-创建第一个Django项目&quot;&gt;&lt;a href=&quot;#Django-–-创建第一个Django项目&quot; class=&quot;headerlink&quot; title=&quot;Django – 创建第一个Django项目&quot;&gt;&lt;/a&gt;Django – 创建第一个Django
      
    
    </summary>
    
      <category term="Django" scheme="http://alexyanglong.github.io/categories/Django/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://alexyanglong.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>使用Python代码操作Redis</title>
    <link href="http://alexyanglong.github.io/2018/05/19/%E4%BD%BF%E7%94%A8Python%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CRedis/"/>
    <id>http://alexyanglong.github.io/2018/05/19/使用Python代码操作Redis/</id>
    <published>2018-05-18T16:00:00.000Z</published>
    <updated>2018-06-05T11:29:34.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Python代码操作Redis"><a href="#使用Python代码操作Redis" class="headerlink" title="使用Python代码操作Redis"></a>使用Python代码操作Redis</h1><p>Redis是一款非关系型存储数据库，具有读取速度快的特性，所以常用于做高速缓存。</p><h2 id="连接Redis"><a href="#连接Redis" class="headerlink" title="连接Redis"></a>连接Redis</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    config = &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'localhost'</span>,<span class="comment"># redis服务器地址</span></span><br><span class="line">        <span class="string">'port'</span>: <span class="number">6379</span>,<span class="comment"># redis服务器端口</span></span><br><span class="line">        <span class="string">'db'</span>: <span class="number">0</span>,<span class="comment"># 使用的数据库编号</span></span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'123456'</span><span class="comment"># 密码</span></span><br><span class="line">    &#125;</span><br><span class="line">    client = redis.Redis(**config)</span><br><span class="line">    <span class="keyword">if</span> client.ping():<span class="comment"># 判断是否连接成功</span></span><br><span class="line">        client.set(<span class="string">'name'</span>, <span class="string">'alex'</span>)</span><br><span class="line">        print(client.get(<span class="string">'name'</span>))<span class="comment"># b'alex'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在这里我们使用redis.Redis连接本地Redis服务，传入的四个参数分别为<code>Redis的地址</code>、<code>运行端口</code>、<code>使用的数据库</code>、<code>密码</code>，这里使用的Redis其实是继承了StrictRedis，所以在默认情况下不传这四个参数时，参数值会有默认值分别为localhost、6379、0、None。</p><p>在Python中使用Redis其实很方便，Redis操作数据的命令(命令详细情况可以参照<a href="http://redisdoc.com/" target="_blank" rel="noopener">Redis命令参考</a>)在Python中都能找到相应的方法，这里引用<a href="https://cuiqingcai.com/" target="_blank" rel="noopener">崔庆才老师</a>对Redis的总结，介绍了Key(键)、String(字符串)、Hash(哈希表)、List(列表)、Set(集合)、SortedSet(有序集合)的相关操作。</p><h2 id="Key-键"><a href="#Key-键" class="headerlink" title="Key(键)"></a>Key(键)</h2><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>exists(name)</td><td>判断一个key是否存在</td><td>name: key名</td><td>redis.exists(‘name’)</td><td>是否存在name这个key</td><td>True</td></tr><tr><td>delete(name)</td><td>删除一个key</td><td>name: key名</td><td>redis.delete(‘name’)</td><td>删除name这个key</td><td>1</td></tr><tr><td>type(name)</td><td>判断key类型</td><td>name: key名</td><td>redis.type(‘name’)</td><td>判断name这个key类型</td><td>b’string’</td></tr><tr><td>keys(pattern)</td><td>获取所有符合规则的key</td><td>pattern: 匹配规则</td><td>redis.keys(‘n*’)</td><td>获取所有以n开头的key</td><td>[b’name’]</td></tr><tr><td>randomkey()</td><td>获取随机的一个key</td><td></td><td>randomkey()</td><td>获取随机的一个key</td><td>b’name’</td></tr><tr><td>rename(src, dst)</td><td>将key重命名</td><td>src: 原key名 dst: 新key名</td><td>redis.rename(‘name’, ‘nickname’)</td><td>将name重命名为nickname</td><td>True</td></tr><tr><td>dbsize()</td><td>获取当前数据库中key的数目</td><td></td><td>dbsize()</td><td>获取当前数据库中key的数目</td><td>100</td></tr><tr><td>expire(name, time)</td><td>设定key的过期时间，单位秒</td><td>name: key名 time: 秒数</td><td>redis.expire(‘name’, 2)</td><td>将name这key的过期时间设置2秒</td><td>True</td></tr><tr><td>ttl(name)</td><td>获取key的过期时间，单位秒，-1为永久不过期</td><td>name: key名</td><td>redis.ttl(‘name’)</td><td>获取name这key的过期时间</td><td>-1</td></tr><tr><td>move(name, db)</td><td>将key移动到其他数据库</td><td>name: key名 db: 数据库代号</td><td>move(‘name’, 2)</td><td>将name移动到2号数据库</td><td>True</td></tr><tr><td>flushdb()</td><td>删除当前选择数据库中的所有key</td><td></td><td>flushdb()</td><td>删除当前选择数据库中的所有key</td><td>True</td></tr><tr><td>flushall()</td><td>删除所有数据库中的所有key</td><td></td><td>flushall()</td><td>删除所有数据库中的所有key</td><td>True</td></tr></tbody></table><h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h2><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>set(name, value)</td><td>给数据库中key为name的string赋予值value</td><td>name: key名 value: 值</td><td>redis.set(‘name’, ‘Bob’)</td><td>给name这个key的value赋值为Bob</td><td>True</td></tr><tr><td>get(name)</td><td>返回数据库中key为name的string的value</td><td>name: key名</td><td>redis.get(‘name’)</td><td>返回name这个key的value</td><td>b’Bob’</td></tr><tr><td>getset(name, value)</td><td>给数据库中key为name的string赋予值value并返回上次的value</td><td>name: key名 value: 新值</td><td>redis.getset(‘name’, ‘Mike’)</td><td>赋值name为Mike并得到上次的value</td><td>b’Bob’</td></tr><tr><td>mget(keys, *args)</td><td>返回多个key对应的value</td><td>keys: key的列表</td><td>redis.mget([‘name’, ‘nickname’])</td><td>返回name和nickname的value</td><td>[b’Mike’, b’Miker’]</td></tr><tr><td>setnx(name, value)</td><td>如果key不存在才设置value</td><td>name: key名</td><td>redis.setnx(‘newname’, ‘James’)</td><td>如果newname这key不存在则设置值为James</td><td>第一次运行True，第二次False</td></tr><tr><td>setex(name, time, value)</td><td>设置可以对应的值为string类型的value，并指定此键值对应的有效期</td><td>name: key名 time: 有效期 value: 值</td><td>redis.setex(‘name’, 1, ‘James’)</td><td>将name这key的值设为James，有效期1秒</td><td>True</td></tr><tr><td>setrange(name, offset, value)</td><td>设置指定key的value值的子字符串</td><td>name: key名 offset: 偏移量 value: 值</td><td>redis.set(‘name’, ‘Hello’) redis.setrange(‘name’, 6, ‘World’)</td><td>设置name为Hello字符串，并在index为6的位置补World</td><td>11，修改后的字符串长度</td></tr><tr><td>mset(mapping)</td><td>批量赋值</td><td>mapping: 字典</td><td>redis.mset({‘name1’: ‘Durant’, ‘name2’: ‘James’})</td><td>将name1设为Durant，name2设为James</td><td>True</td></tr><tr><td>msetnx(mapping)</td><td>key均不存在时才批量赋值</td><td>mapping: 字典</td><td>redis.msetnx({‘name3’: ‘Smith’, ‘name4’: ‘Curry’})</td><td>在name3和name4均不存在的情况下才设置二者值</td><td>True</td></tr><tr><td>incr(name, amount=1)</td><td>key为name的value增值操作，默认1，key不存在则被创建并设为amount</td><td>name: key名 amount:增长的值</td><td>redis.incr(‘age’, 1)</td><td>age对应的值增1，若不存在则会创建并设置为1</td><td>1，即修改后的值</td></tr><tr><td>decr(name, amount=1)</td><td>key为name的value减值操作，默认1，key不存在则被创建并设置为-amount</td><td>name: key名 amount:减少的值</td><td>redis.decr(‘age’, 1)</td><td>age对应的值减1，若不存在则会创建并设置为-1</td><td>-1，即修改后的值</td></tr><tr><td>append(key, value)</td><td>key为name的string的值附加value</td><td>key: key名</td><td>redis.append(‘nickname’, ‘OK’)</td><td>向key为nickname的值后追加OK</td><td>13，即修改后的字符串长度</td></tr><tr><td>substr(name, start, end=-1)</td><td>返回key为name的string的value的子串</td><td>name: key名 start: 起始索引 end: 终止索引，默认-1截取到末尾</td><td>redis.substr(‘name’, 1, 4)</td><td>返回key为name的值的字符串，截取索引为1-4的字符</td><td>b’ello’</td></tr><tr><td>getrange(key, start, end)</td><td>获取key的value值从start到end的子字符串</td><td>key: key名 start: 起始索引 end: 终止索引</td><td>redis.getrange(‘name’, 1, 4)</td><td>返回key为name的值的字符串，截取索引为1-4的字符</td><td>b’ello’</td></tr></tbody></table><h2 id="Hash-哈希表"><a href="#Hash-哈希表" class="headerlink" title="Hash(哈希表)"></a>Hash(哈希表)</h2><p>Hash，即哈希，可以用name指定一个哈希表的名称，然后表内存储了各个键值对，用法总结如下：</p><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>hset(name, key, value)</td><td>向key为name的hash中添加映射</td><td>name: key名 key: 映射键名 value: 映射键值</td><td>hset(‘price’, ‘cake’, 5)</td><td>向key为price的hash中添加映射关系，cake的值为5</td><td>1，即添加的映射个数</td></tr><tr><td>hsetnx(name, key, value)</td><td>向key为name的hash中添加映射，如果映射键名不存在</td><td>name: key名 key: 映射键名 value: 映射键值</td><td>hsetnx(‘price’, ‘book’, 6)</td><td>向key为price的hash中添加映射关系，book的值为6</td><td>1，即添加的映射个数</td></tr><tr><td>hget(name, key)</td><td>返回key为name的hash中field对应的value</td><td>name: key名 key: 映射键名</td><td>redis.hget(‘price’, ‘cake’)</td><td>获取key为price的hash中键名为cake的value</td><td>5</td></tr><tr><td>hmget(name, keys, *args)</td><td>返回key为name的hash中各个键对应的value</td><td>name: key名 keys: 映射键名列表</td><td>redis.hmget(‘price’, [‘apple’, ‘orange’])</td><td>获取key为price的hash中apple和orange的值</td><td>[b’3’, b’7’]</td></tr><tr><td>hmset(name, mapping)</td><td>向key为name的hash中批量添加映射</td><td>name: key名 mapping: 映射字典</td><td>redis.hmset(‘price’, {‘banana’: 2, ‘pear’: 6})</td><td>向key为price的hash中批量添加映射</td><td>True</td></tr><tr><td>hincrby(name, key, amount=1)</td><td>将key为name的hash中映射的value增加amount</td><td>name: key名 key: 映射键名 amount: 增长量</td><td>redis.hincrby(‘price’, ‘apple’, 3)</td><td>key为price的hash中apple的值增加3</td><td>6，修改后的值</td></tr><tr><td>hexists(name, key)</td><td>key为namehash中是否存在键名为key的映射</td><td>name: key名 key: 映射键名</td><td>redis.hexists(‘price’, ‘banana’)</td><td>key为price的hash中banana的值是否存在</td><td>True</td></tr><tr><td>hdel(name, *keys)</td><td>key为namehash中删除键名为key的映射</td><td>name: key名 key: 映射键名</td><td>redis.hdel(‘price’, ‘banana’)</td><td>从key为price的hash中删除键名为banana的映射</td><td>True</td></tr><tr><td>hlen(name)</td><td>从key为name的hash中获取映射个数</td><td>name: key名</td><td>redis.hlen(‘price’)</td><td>从key为price的hash中获取映射个数</td><td>6</td></tr><tr><td>hkeys(name)</td><td>从key为name的hash中获取所有映射键名</td><td>name: key名</td><td>redis.hkeys(‘price’)</td><td>从key为price的hash中获取所有映射键名</td><td>[b’cake’, b’book’, b’banana’, b’pear’]</td></tr><tr><td>hvals(name)</td><td>从key为name的hash中获取所有映射键值</td><td>name: key名</td><td>redis.hvals(‘price’)</td><td>从key为price的hash中获取所有映射键值</td><td>[b’5’, b’6’, b’2’, b’6’]</td></tr><tr><td>hgetall(name)</td><td>从key为name的hash中获取所有映射键值对</td><td>name: key名</td><td>redis.hgetall(‘price’)</td><td>从key为price的hash中获取所有映射键值对</td><td>{b’cake’: b’5’, b’book’: b’6’, b’orange’: b’7’, b’pear’: b’6’}</td></tr></tbody></table><h2 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h2><p>列表内的元素可以重复，而且可以从两端插入和取值。</p><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>rpush(name, *values)</td><td>在key为name的list尾添加值为value的元素，可以传多个</td><td>name: key名 values: 值</td><td>redis.rpush(‘list’, 1, 2, 3)</td><td>给list这个key的list尾添加1、2、3</td><td>3，list大小</td></tr><tr><td>lpush(name, *values)</td><td>在key为name的list头添加值为value的元素，可以传多个</td><td>name: key名 values: 值</td><td>redis.lpush(‘list’, 0)</td><td>给list这个key的list头添加0</td><td>4，list大小</td></tr><tr><td>llen(name)</td><td>返回key为name的list的长度</td><td>name: key名</td><td>redis.llen(‘list’)</td><td>返回key为list的列表的长度</td><td>4</td></tr><tr><td>lrange(name, start, end)</td><td>返回key为name的list中start至end之间的元素</td><td>name: key名 start: 起始索引 end: 终止索引</td><td>redis.lrange(‘list’, 1, 3)</td><td>返回起始为1终止为3的索引范围对应的list</td><td><code>[b&#39;3&#39;, b&#39;2&#39;, b&#39;1&#39;]</code></td></tr><tr><td>ltrim(name, start, end)</td><td>截取key为name的list，保留索引为start到end的内容</td><td>name:key名 start: 起始索引 end: 终止索引</td><td>ltrim(‘list’, 1, 3)</td><td>保留key为list的索引为1到3的元素</td><td>True</td></tr><tr><td>lindex(name, index)</td><td>返回key为name的list中index位置的元素</td><td>name: key名 index: 索引</td><td>redis.lindex(‘list’, 1)</td><td>返回key为list的列表index为1的元素</td><td>b’2’</td></tr><tr><td>lset(name, index, value)</td><td>给key为name的list中index位置的元素赋值，越界则报错</td><td>name: key名 index: 索引位置 value: 值</td><td>redis.lset(‘list’, 1, 5)</td><td>将key为list的list索引1位置赋值为5</td><td>True</td></tr><tr><td>lrem(name, count, value)</td><td>删除count个key的list中值为value的元素</td><td>name: key名 count: 删除个数 value: 值</td><td>redis.lrem(‘list’, 2, 3)</td><td>将key为list的列表删除2个3</td><td>1，即删除的个数</td></tr><tr><td>lpop(name)</td><td>返回并删除key为name的list中的首元素</td><td>name: key名</td><td>redis.lpop(‘list’)</td><td>返回并删除名为list的list第一个元素</td><td>b’5’</td></tr><tr><td>rpop(name)</td><td>返回并删除key为name的list中的尾元素</td><td>name: key名</td><td>redis.rpop(‘list’)</td><td>返回并删除名为list的list最后一个元素</td><td>b’2’</td></tr><tr><td>blpop(keys, timeout=0)</td><td>返回并删除名称为在keys中的list中的首元素，如果list为空，则会一直阻塞等待</td><td>keys: key列表 timeout: 超时等待时间，0为一直等待</td><td>redis.blpop(‘list’)</td><td>返回并删除名为list的list的第一个元素</td><td>[b’5’]</td></tr><tr><td>brpop(keys, timeout=0)</td><td>返回并删除key为name的list中的尾元素，如果list为空，则会一直阻塞等待</td><td>keys: key列表 timeout: 超时等待时间，0为一直等待</td><td>redis.brpop(‘list’)</td><td>返回并删除名为list的list的最后一个元素</td><td>[b’2’]</td></tr><tr><td>rpoplpush(src, dst)</td><td>返回并删除名称为src的list的尾元素，并将该元素添加到名称为dst的list的头部</td><td>src: 源list的key dst: 目标list的key</td><td>redis.rpoplpush(‘list’, ‘list2’)</td><td>将key为list的list尾元素删除并返回并将其添加到key为list2的list头部</td><td>b’2’</td></tr></tbody></table><h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h2><p>集合中的元素都是不重复的。</p><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>sadd(name, *values)</td><td>向key为name的set中添加元素</td><td>name: key名 values: 值，可为多个</td><td>redis.sadd(‘tags’, ‘Book’, ‘Tea’, ‘Coffee’)</td><td>向key为tags的set中添加Book、Tea、Coffee三个内容</td><td>3，即插入的数据个数</td></tr><tr><td>srem(name, *values)</td><td>从key为name的set中删除元素</td><td>name: key名 values: 值，可为多个</td><td>redis.srem(‘tags’, ‘Book’)</td><td>从key为tags的set中删除Book</td><td>1，即删除的数据个数</td></tr><tr><td>spop(name)</td><td>随机返回并删除key为name的set中一个元素</td><td>name: key名</td><td>redis.spop(‘tags’)</td><td>从key为tags的set中随机删除并返回该元素</td><td>b’Tea’</td></tr><tr><td>smove(src, dst, value)</td><td>从src对应的set中移除元素并添加到dst对应的set中</td><td>src: 源set dst: 目标set value: 元素值</td><td>redis.smove(‘tags’, ‘tags2’, ‘Coffee’)</td><td>从key为tags的set中删除元素Coffee并添加到key为tags2的set</td><td>True</td></tr><tr><td>scard(name)</td><td>返回key为name的set的元素个数</td><td>name: key名</td><td>redis.scard(‘tags’)</td><td>获取key为tags的set中元素个数</td><td>3</td></tr><tr><td>sismember(name, value)</td><td>测试member是否是key为name的set的元素</td><td>name:key值</td><td>redis.sismember(‘tags’, ‘Book’)</td><td>判断Book是否为key为tags的set元素</td><td>True</td></tr><tr><td>sinter(keys, *args)</td><td>返回所有给定key的set的交集</td><td>keys: key列表</td><td>redis.sinter([‘tags’, ‘tags2’])</td><td>返回key为tags的set和key为tags2的set的交集</td><td>{b’Coffee’}</td></tr><tr><td>sinterstore(dest, keys, *args)</td><td>求交集并将交集保存到dest的集合</td><td>dest:结果集合 keys:key列表</td><td>redis.sinterstore(‘inttag’, [‘tags’, ‘tags2’])</td><td>求key为tags的set和key为tags2的set的交集并保存为inttag</td><td>1</td></tr><tr><td>sunion(keys, *args)</td><td>返回所有给定key的set的并集</td><td>keys: key列表</td><td>redis.sunion([‘tags’, ‘tags2’])</td><td>返回key为tags的set和key为tags2的set的并集</td><td>{b’Coffee’, b’Book’, b’Pen’}</td></tr><tr><td>sunionstore(dest, keys, *args)</td><td>求并集并将并集保存到dest的集合</td><td>dest:结果集合 keys:key列表</td><td>redis.sunionstore(‘inttag’, [‘tags’, ‘tags2’])</td><td>求key为tags的set和key为tags2的set的并集并保存为inttag</td><td>3</td></tr><tr><td>sdiff(keys, *args)</td><td>返回所有给定key的set的差集</td><td>keys: key列表</td><td>redis.sdiff([‘tags’, ‘tags2’])</td><td>返回key为tags的set和key为tags2的set的差集</td><td>{b’Book’, b’Pen’}</td></tr><tr><td>sdiffstore(dest, keys, *args)</td><td>求差集并将差集保存到dest的集合</td><td>dest:结果集合 keys:key列表</td><td>redis.sdiffstore(‘inttag’, [‘tags’, ‘tags2’])</td><td>求key为tags的set和key为tags2的set的差集并保存为inttag</td><td>3</td></tr><tr><td>smembers(name)</td><td>返回key为name的set的所有元素</td><td>name: key名</td><td>redis.smembers(‘tags’)</td><td>返回key为tags的set的所有元素</td><td>{b’Pen’, b’Book’, b’Coffee’}</td></tr><tr><td>srandmember(name)</td><td>随机返回key为name的set的一个元素，但不删除元素</td><td>name: key值</td><td>redis.srandmember(‘tags’)</td><td>随机返回key为tags的set的一个元素</td></tr></tbody></table><h2 id="SortedSet-有序集合"><a href="#SortedSet-有序集合" class="headerlink" title="SortedSet(有序集合)"></a>SortedSet(有序集合)</h2><p>有序集合，它相比集合多了一个分数字段，利用它可以对集合中的数据进行排序。</p><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>zadd(name, *args, **kwargs)</td><td>向key为name的zset中添加元素member，score用于排序。如果该元素存在，则更新其顺序</td><td>name: key名 args: 可变参数</td><td>redis.zadd(‘grade’, 100, ‘Bob’, 98, ‘Mike’)</td><td>向key为grade的zset中添加Bob，score为100，添加Mike，score为98</td><td>2，即添加的元素个数</td></tr><tr><td>zrem(name, *values)</td><td>删除key为name的zset中的元素</td><td>name: key名 values: 元素</td><td>redis.zrem(‘grade’, ‘Mike’)</td><td>从key为grade的zset中删除Mike</td><td>1，即删除的元素个数</td></tr><tr><td>zincrby(name, value, amount=1)</td><td>如果在key为name的zset中已经存在元素value，则该元素的score增加amount，否则向该集合中添加该元素，其score的值为amount</td><td>name: key名 value: 元素 amount: 增长的score值</td><td>redis.zincrby(‘grade’, ‘Bob’, -2)</td><td>key为grade的zset中Bob的score减2</td><td>98.0，即修改后的值</td></tr><tr><td>zrank(name, value)</td><td>返回key为name的zset中元素的排名（按score从小到大排序）即下标</td><td>name: key名 value: 元素值</td><td>redis.zrank(‘grade’, ‘Amy’)</td><td>得到key为grade的zset中Amy的排名</td><td>1</td></tr><tr><td>zrevrank(name, value)</td><td>返回key为name的zset中元素的倒数排名（按score从大到小排序）即下标</td><td>name: key名 value: 元素值</td><td>redis.zrevrank(‘grade’, ‘Amy’)</td><td>得到key为grade的zset中Amy的倒数排名</td><td>2</td></tr><tr><td>zrevrange(name, start, end, withscores=False)</td><td>返回key为name的zset（按score从大到小排序）中的index从start到end的所有元素</td><td>name: key值 start: 开始索引 end: 结束索引 withscores: 是否带score</td><td>redis.zrevrange(‘grade’, 0, 3)</td><td>返回key为grade的zset前四名元素</td><td>[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td>zrangebyscore(name, min, max, start=None, num=None, withscores=False)</td><td>返回key为name的zset中score在给定区间的元素</td><td>name:key名 min: 最低score max:最高score start: 起始索引 num: 个数 withscores: 是否带score</td><td>redis.zrangeby score(‘grade’, 80, 95)</td><td>返回key为grade的zset中score在80和95之间的元素</td><td>[b’Amy’, b’James’]</td></tr><tr><td>zcount(name, min, max)</td><td>返回key为name的zset中score在给定区间的数量</td><td>name:key名 min: 最低score max: 最高score</td><td>redis.zcount(‘grade’, 80, 95)</td><td>返回key为grade的zset中score在80到95的元素个数</td><td>2</td></tr><tr><td>zcard(name)</td><td>返回key为name的zset的元素个数</td><td>name: key名</td><td>redis.zcard(‘grade’)</td><td>获取key为grade的zset中元素个数</td><td>3</td></tr><tr><td>zremrangebyrank(name, min, max)</td><td>删除key为name的zset中排名在给定区间的元素</td><td>name:key名 min: 最低位次 max: 最高位次</td><td>redis.zremran gebyrank(‘grade’, 0, 0)</td><td>删除key为grade的zset中排名第一的元素</td><td>1，即删除的元素个数</td></tr><tr><td>zremrangebyscore(name, min, max)</td><td>删除key为name的zset中score在给定区间的元素</td><td>name:key名 min: 最低score max:最高score</td><td>redis.zremran gebyscore (‘grade’, 80, 90)</td><td>删除score在80到90之间的元素</td><td>1，即删除的元素个数</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用Python代码操作Redis&quot;&gt;&lt;a href=&quot;#使用Python代码操作Redis&quot; class=&quot;headerlink&quot; title=&quot;使用Python代码操作Redis&quot;&gt;&lt;/a&gt;使用Python代码操作Redis&lt;/h1&gt;&lt;p&gt;Redis是一款非关
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="Redis" scheme="http://alexyanglong.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>使用Python代码操作MySQL5.x数据库</title>
    <link href="http://alexyanglong.github.io/2018/05/17/%E4%BD%BF%E7%94%A8Python%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CMySQL5.x%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://alexyanglong.github.io/2018/05/17/使用Python代码操作MySQL5.x数据库/</id>
    <published>2018-05-16T16:00:00.000Z</published>
    <updated>2018-06-05T11:11:32.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Python代码操作MySQL5-x数据库"><a href="#使用Python代码操作MySQL5-x数据库" class="headerlink" title="使用Python代码操作MySQL5.x数据库"></a>使用Python代码操作MySQL5.x数据库</h1><p>要使用Python代码操作数据库需要安装一个第三方库PyMySQL。（注：Python版本为3.x）</p><p>可以使用pip管理工具安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyMySQL</span><br></pre></td></tr></table></figure><h2 id="连接MySQL数据库"><a href="#连接MySQL数据库" class="headerlink" title="连接MySQL数据库"></a>连接MySQL数据库</h2><h3 id="编写代码，连接数据库"><a href="#编写代码，连接数据库" class="headerlink" title="编写代码，连接数据库"></a>编写代码，连接数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Connection 创建连接</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">'localhost'</span>,</span><br><span class="line">   user=<span class="string">'root'</span>,</span><br><span class="line">   password=<span class="string">'root'</span>,</span><br><span class="line">   database=<span class="string">'test'</span>,</span><br><span class="line">   port=<span class="number">3306</span>,</span><br><span class="line">   charset=<span class="string">'utf8'</span>,</span><br><span class="line">   autocommit=<span class="keyword">False</span>,</span><br><span class="line">   cursorclass: pymysql.cursors.DictCursor)</span><br></pre></td></tr></table></figure><p><code>host</code> ：主机名/主机IP</p><p><code>port</code> ：端口</p><p><code>user</code> ：MySQL的登录用户名</p><p><code>password</code> ：MySQL的登录密码</p><p><code>database</code> ：要使用的数据库，可以简写成 <code>db</code> </p><p><code>charset</code> ：连接数据库采用的字符编码</p><p><code>autocommit</code> ：默认值是False，表示DML(数据操纵语言)不会自动提交，如果为True则会自动提交</p><p><code>cursorclass</code> ：cursorclass设置cursor游标的类型，这里设置的是dict类型，表示查询返回的结果是以字典的方式，这一项是不必须的。</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>connection对象常用的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cursor()        使用该连接创建并返回游标对象</span><br><span class="line">commit()        提交当前事务</span><br><span class="line">rollback()      回滚当前事务</span><br><span class="line">close()         关闭连接</span><br></pre></td></tr></table></figure><p>cursor对象常用的方法和属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">execute(sql)    执行一个SQL命令</span><br><span class="line">fetchone()      取得结果集的下一行</span><br><span class="line">fetchmany(size) 获取结果集的下几行</span><br><span class="line">fetchall()      获取结果集中的所有行</span><br><span class="line">rowcount      返回数据条数或影响行数</span><br><span class="line">close()         关闭游标对象</span><br></pre></td></tr></table></figure><h2 id="使用Python代码实现增删改查"><a href="#使用Python代码实现增删改查" class="headerlink" title="使用Python代码实现增删改查"></a>使用Python代码实现增删改查</h2><h3 id="在MySQL中建库建表"><a href="#在MySQL中建库建表" class="headerlink" title="在MySQL中建库建表"></a>在MySQL中建库建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建库 test</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span> <span class="keyword">default</span> <span class="keyword">charset</span> utf8;</span><br><span class="line"><span class="comment">-- 切换/使用test库</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">dno <span class="built_in">int</span> primary <span class="keyword">key</span>,<span class="comment">-- 部门编号</span></span><br><span class="line">dname <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,<span class="comment">-- 部门名称</span></span><br><span class="line">dlocation <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span><span class="comment">-- 部门位置</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="得到数据库连接"><a href="#得到数据库连接" class="headerlink" title="得到数据库连接"></a>得到数据库连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line">    config = &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'db'</span>: <span class="string">'test'</span>,</span><br><span class="line">        <span class="string">'charset'</span>: <span class="string">'utf8'</span>,</span><br><span class="line">        <span class="string">'autocommit'</span>: <span class="keyword">False</span>,  <span class="comment"># 默认不自动提交</span></span><br><span class="line">        <span class="string">'cursorclass'</span>: pymysql.cursors.DictCursor  <span class="comment"># 设置游标的类型,查询返回的结果是以字典的方式</span></span><br><span class="line">    &#125;</span><br><span class="line">    conn = pymysql.connect(**config)  <span class="comment"># **config 语法是将config字典拆分成键值对的形式</span></span><br><span class="line">    <span class="keyword">return</span> conn</span><br></pre></td></tr></table></figure><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    插入</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 得到Connection(连接) / Cursor(游标)</span></span><br><span class="line">    conn = get_conn()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建Cursor对象,支持上下文语法,可以放在with中</span></span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            <span class="comment"># 向数据库发出sql语句</span></span><br><span class="line">            dno = input(<span class="string">'部门编号:'</span>)</span><br><span class="line">            dname = input(<span class="string">'部门名称:'</span>)</span><br><span class="line">            dloc = input(<span class="string">'部门地址:'</span>)</span><br><span class="line">            <span class="comment"># 如果使用字符串格式化的方式来组装SQL语句，最大的风险是用被SQL注射攻击</span></span><br><span class="line">            <span class="comment"># sql = "insert into dept values (%d, '%s', '%s')" % (dno, dname, dloc)</span></span><br><span class="line">            <span class="comment"># result = cursor.execute(sql)</span></span><br><span class="line">            <span class="comment"># result = cursor.execute('insert into dept values (%s, %s, %s)', (dno, dname, dloc))</span></span><br><span class="line">            <span class="comment"># 这个方式传参是以字典的方式,但是要注意的是在占位的时候用%(name)s</span></span><br><span class="line">            result = cursor.execute(</span><br><span class="line">                <span class="string">'insert into dept values (%(dno)s, %(dname)s, %(dloc)s)'</span>,</span><br><span class="line">                &#123;<span class="string">'dno'</span>: dno, <span class="string">'dname'</span>: dname, <span class="string">'dloc'</span>: dloc&#125;</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># print('成功插入', cursor.rowcount, '条数据') # 这里cursor.rowcount是获取到受影响的行</span></span><br><span class="line">            print(<span class="string">'成功插入'</span>, result, <span class="string">'条数据'</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果事务中的所有操作全部成功了最后手动提交</span></span><br><span class="line">            conn.commit()</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">      print(e)</span><br><span class="line"><span class="comment"># 如果事务操作有任何一个操作发生异常,那么就会回滚事务</span></span><br><span class="line">        conn.rollback()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    修改</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    conn = get_conn()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            dno = input(<span class="string">'部门编号:'</span>)</span><br><span class="line">            dname = input(<span class="string">'部门名称:'</span>)</span><br><span class="line">            <span class="comment"># 这个方式传参是以字典的方式,但是要注意的是在占位的时候用%(name)s</span></span><br><span class="line">            result = cursor.execute(</span><br><span class="line">                <span class="string">'update dept set dname=%(dname)s where dno=%(dno)s'</span>,</span><br><span class="line">                &#123;<span class="string">'dno'</span>: dno, <span class="string">'dname'</span>: dname&#125;</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># print('成功插入', cursor.rowcount, '条数据') # 这里cursor.rowcount是获取到受影响的行</span></span><br><span class="line">            print(<span class="string">'成功修改'</span>, result, <span class="string">'条数据'</span>)</span><br><span class="line">            conn.commit()</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">      print(e)</span><br><span class="line">      conn.rollback()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(dno)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据编号删除</span></span><br><span class="line"><span class="string">    :param dno: 编号</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    conn = get_conn()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">          dno = input(<span class="string">'部门编号:'</span>)</span><br><span class="line">            <span class="comment"># 向数据库发出sql语句</span></span><br><span class="line">            <span class="comment"># execute方法中占位后传参除了元组和字典外,还可以是列表</span></span><br><span class="line">            result = cursor.execute(<span class="string">'delete from dept where dno=%s'</span>, [dno])</span><br><span class="line">            conn.commit()</span><br><span class="line">            print(<span class="string">'删除成功'</span> <span class="keyword">if</span> result == <span class="number">1</span> <span class="keyword">else</span> <span class="string">'删除失败'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        conn.rollback()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    查询</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    conn = get_conn()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建Cursor对象</span></span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            <span class="comment"># 向数据库发出sql语句</span></span><br><span class="line">            cursor.execute(<span class="string">'select dno, dname, dlocation from dept'</span>)</span><br><span class="line">            result = cursor.fetchone()</span><br><span class="line">            <span class="comment"># 程序中最好不要使用fetchall(),如果库中数据量很大,查询的性能就很低</span></span><br><span class="line">            <span class="keyword">while</span> result:</span><br><span class="line">                print(result)</span><br><span class="line">                <span class="comment"># 取出部门名称</span></span><br><span class="line">                <span class="comment"># 在这里我上面连接数据时,使用了cursorclass参数,查询时返回的结果是以字典的方式</span></span><br><span class="line">                print(result[<span class="string">'dname'</span>])</span><br><span class="line">                result = cursor.fetchone()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><p>上面就是对MySQL数据库简单的增删查改操作。</p><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>编写一个类，将上面的操作数据库的方法都包含在里面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySqlHelper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""MySQLHelper"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, connect_config)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        构造器</span></span><br><span class="line"><span class="string">        :param connect_config: 连接配置，传入一个dict</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.connect_config = connect_config</span><br><span class="line">        self.conn = <span class="keyword">None</span></span><br><span class="line">        self.cursor = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect_db</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""创建数据库连接"""</span></span><br><span class="line">        self.conn = pymysql.connect(**self.connect_config)</span><br><span class="line">        <span class="comment"># self.cursor = self.conn.cursor()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_db</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""关闭数据库连接"""</span></span><br><span class="line">        <span class="comment"># if self.cursor:</span></span><br><span class="line">        <span class="comment">#     self.cursor.close()</span></span><br><span class="line">        <span class="keyword">if</span> self.conn:</span><br><span class="line">            self.conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute_dql</span><span class="params">(self, sql, *, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        执行dql操作，即 select 语句</span></span><br><span class="line"><span class="string">        :param sql: sql语句，string</span></span><br><span class="line"><span class="string">        :param param: 参数列表，dict</span></span><br><span class="line"><span class="string">        :return: 查询结果，tuple</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># res = ''</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.connect_db()</span><br><span class="line">            <span class="keyword">with</span> self.conn.cursor() <span class="keyword">as</span> self.cursor:</span><br><span class="line">                self.cursor.execute(sql, param)</span><br><span class="line">                res = self.cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.close_db()</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute_dml</span><span class="params">(self, sql, *, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        执行dql操作，即 update、delete、insert 语句</span></span><br><span class="line"><span class="string">        :param sql: sql语句，string</span></span><br><span class="line"><span class="string">        :param param: 参数列表，dict</span></span><br><span class="line"><span class="string">        :return: 查询结果，int [1：成功，0：正常失败，-1：错误失败]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.connect_db()</span><br><span class="line">            <span class="keyword">with</span> self.conn.cursor() <span class="keyword">as</span> self.cursor:</span><br><span class="line">                count = self.cursor.execute(sql, param)</span><br><span class="line">                self.conn.commit()</span><br><span class="line">                <span class="keyword">if</span> count:</span><br><span class="line">                    res = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            res = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.close_db()</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    config = &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'database'</span>: <span class="string">'test'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'charset'</span>: <span class="string">'utf8'</span>,</span><br><span class="line">        <span class="string">'autocommit'</span>: <span class="keyword">False</span>,</span><br><span class="line">        <span class="string">'cursorclass'</span>: pymysql.cursors.DictCursor  <span class="comment"># cursorclass设置cursor游标的类型，这里设置的是dict类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    sqlhelper = MySqlHelper(config)</span><br><span class="line">    sql = <span class="string">'select dno, dname, dlocation from dept where dno=%(no)s'</span></span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">'no'</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = sqlhelper.execute_dql(sql, param=param)</span><br><span class="line">    print(res)</span><br><span class="line"></span><br><span class="line">    sql = <span class="string">'insert into dept values (%(no)s, %(name)s, %(location)s)'</span></span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">'no'</span>: <span class="number">88</span>,</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'sda88'</span>,</span><br><span class="line">        <span class="string">'location'</span>: <span class="string">'DSfcz88'</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = sqlhelper.execute_dml(sql, param=param)</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用Python代码操作MySQL5-x数据库&quot;&gt;&lt;a href=&quot;#使用Python代码操作MySQL5-x数据库&quot; class=&quot;headerlink&quot; title=&quot;使用Python代码操作MySQL5.x数据库&quot;&gt;&lt;/a&gt;使用Python代码操作MySQL
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="MySQL" scheme="http://alexyanglong.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Linux防火墙服务firewalld的基本使用</title>
    <link href="http://alexyanglong.github.io/2018/05/15/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E6%9C%8D%E5%8A%A1firewalld%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://alexyanglong.github.io/2018/05/15/Linux防火墙服务firewalld的基本使用/</id>
    <published>2018-05-14T16:00:00.000Z</published>
    <updated>2018-06-07T08:22:13.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux防火墙服务firewalld的基本使用"><a href="#Linux防火墙服务firewalld的基本使用" class="headerlink" title="Linux防火墙服务firewalld的基本使用"></a>Linux防火墙服务firewalld的基本使用</h1><p>​    防火墙是一种位于内部网络与外部网络之间的网络安全系统。一项信息安全的防护系统，依照特定的规则，允许或是限制传输的数据通过。防火墙通常工作在网络层，即IPv4或IPv6的IP包上。</p><h2 id="什么是firewalld"><a href="#什么是firewalld" class="headerlink" title="什么是firewalld"></a>什么是firewalld</h2><p>​    firewalld即Dynamic Firewall Manager of Linux systems，Linux系统的动态防火墙管理器。firewalld是一个服务，用于配置网络连接，从而哪些内外部网络的数据包可以允许穿过网络或阻止穿过网络。</p><p>​    firewalld允许两种类型的配置：永久类型和运行时类型。运行时类型的配置在防火墙被重启后会丢失相应的规则配置；而永久类型的配置即使遇到系统重启，也会保留生效。</p><p>​    对应于上面两种类型的配置，firewalld相应的有两个目录：针对运行时类型配置的目录/usr/lib/firewall；以及针对永久类型配置的目录/etc/firewall。</p><h2 id="firewalld的基本使用"><a href="#firewalld的基本使用" class="headerlink" title="firewalld的基本使用"></a>firewalld的基本使用</h2><p>启动服务： <code>systemctl start firewalld.service</code> 或 <code>systemctl start firewalld</code></p><p>查看状态：<code>systemctl status firewalld.service</code> 或 <code>systemctl status firewalld</code></p><p>停止服务：<code>systemctl stop firewalld.service</code> 或 <code>systemctl stop firewalld</code></p><p>重启服务：<code>systemctl restart firewalld.service</code> 或 <code>systemctl restart firewalld</code></p><p>设置开机自启：<code>systemctl enable firewalld.service</code> 或 <code>systemctl enable firewalld</code></p><p>取消开机自启：<code>systemctl disable firewalld.service</code> 或 <code>systemctl disable firewalld</code></p><p>查看是否开机自启：<code>systemctl is-enabled firewalld.service</code> 或 <code>systemctl is-enabled firewalld</code></p><p>systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</p><h2 id="使用firewalld-cmd配置防火墙"><a href="#使用firewalld-cmd配置防火墙" class="headerlink" title="使用firewalld-cmd配置防火墙"></a>使用firewalld-cmd配置防火墙</h2><p>查看版本： <code>firewall-cmd --version</code></p><p>查看帮助：<code>firewall-cmd --help</code></p><p>显示状态： <code>firewall-cmd --state</code></p><p>查看所有打开的端口： <code>firewall-cmd --zone=public --list-ports</code></p><p>重新加载防火墙规则： <code>firewall-cmd --reload</code></p><p>查看区域信息:  <code>firewall-cmd --get-active-zones</code></p><p>查看指定接口所属区域： <code>firewall-cmd --get-zone-of-interface=eth0</code></p><p>拒绝所有包：<code>firewall-cmd --panic-on</code></p><p>取消拒绝状态：<code>firewall-cmd --panic-off</code></p><p>查看是否拒绝： <code>firewall-cmd --query-panic</code></p><h2 id="如何添加-删除一个端口（在防火墙上凿洞）"><a href="#如何添加-删除一个端口（在防火墙上凿洞）" class="headerlink" title="如何添加/删除一个端口（在防火墙上凿洞）"></a>如何添加/删除一个端口（在防火墙上凿洞）</h2><p>添加端口（凿洞）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=端口/tcp --permanent</span><br></pre></td></tr></table></figure><p>–permanent永久生效，没有此参数重启后失效</p><p>重新载入防火墙配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>查看端口在防火墙配置中的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone= public --query-port=端口/tcp</span><br></pre></td></tr></table></figure><p>删除端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone= public --remove-port=端口/tcp --permanent</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux防火墙服务firewalld的基本使用&quot;&gt;&lt;a href=&quot;#Linux防火墙服务firewalld的基本使用&quot; class=&quot;headerlink&quot; title=&quot;Linux防火墙服务firewalld的基本使用&quot;&gt;&lt;/a&gt;Linux防火墙服务fire
      
    
    </summary>
    
      <category term="Linux" scheme="http://alexyanglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="firewalld" scheme="http://alexyanglong.github.io/tags/firewalld/"/>
    
  </entry>
  
  <entry>
    <title>在Linux（CentOS7）下安装Redis</title>
    <link href="http://alexyanglong.github.io/2018/05/13/%E5%9C%A8Linux%EF%BC%88CentOS7%EF%BC%89%E4%B8%8B%E5%AE%89%E8%A3%85Redis/"/>
    <id>http://alexyanglong.github.io/2018/05/13/在Linux（CentOS7）下安装Redis/</id>
    <published>2018-05-12T16:00:00.000Z</published>
    <updated>2018-06-05T02:34:12.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Linux（CentOS7）下安装Redis"><a href="#在Linux（CentOS7）下安装Redis" class="headerlink" title="在Linux（CentOS7）下安装Redis"></a>在Linux（CentOS7）下安装Redis</h1><p>Redis是一款非关系型存储数据库。</p><h2 id="1、下载软件归档压缩包"><a href="#1、下载软件归档压缩包" class="headerlink" title="1、下载软件归档压缩包"></a>1、下载软件归档压缩包</h2><p>从<a href="https://redis.io" target="_blank" rel="noopener">redis官网</a>上下载软件归档压缩包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-3.2.11.tar.gz</span><br></pre></td></tr></table></figure><h2 id="2、解压缩解归档"><a href="#2、解压缩解归档" class="headerlink" title="2、解压缩解归档"></a>2、解压缩解归档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gunzip redis-3.2.11.tar.gz</span><br><span class="line">tar -xvf redis-3.2.11.tar.gz</span><br></pre></td></tr></table></figure><h2 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h2><p>切换至redis解压目录，执行下列命令进行配置和安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="4、配置redis-conf配置文件"><a href="#4、配置redis-conf配置文件" class="headerlink" title="4、配置redis.conf配置文件"></a>4、配置redis.conf配置文件</h2><p>配置redis.conf配置文件，注意备份</p><h3 id="4-1、绑定ip"><a href="#4-1、绑定ip" class="headerlink" title="4.1、绑定ip"></a>4.1、绑定ip</h3><p>在命令模式下， 61gg 定位至61行，进行绑定ip [注意：使用内网ip，可以在末行模式下输入 :!ifconfig  查看内网ip]</p><h3 id="4-2、配置端口"><a href="#4-2、配置端口" class="headerlink" title="4.2、配置端口"></a>4.2、配置端口</h3><p>在命令模式下， 84gg 定位至84行，配置端口，默认是 6379</p><h3 id="4-3、配置连接密码"><a href="#4-3、配置连接密码" class="headerlink" title="4.3、配置连接密码"></a>4.3、配置连接密码</h3><p>在命令模式下输入  /requirepass 查找，按 n 查找下一个，大概在480行，修改后</p><p>保存退出</p><h2 id="5、后台启动服务，并设置日志文件"><a href="#5、后台启动服务，并设置日志文件" class="headerlink" title="5、后台启动服务，并设置日志文件"></a>5、后台启动服务，并设置日志文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server 配置文件的路径/配置文件名 &gt; 日志文件 &amp;</span><br></pre></td></tr></table></figure><p>需要停止后台服务，请先把redis放在前台运行 (使用jobs查看后台运行编号num，再使用fg %num就将编号是num的服务放在前台运行了)，再使用 Ctrl C 停止redis服务。或者使用 kill 进程编号</p><p>同样，如果要将前台运行的服务放到后台运行，先使用Ctrl Z，再使用jobs查看状态，是处于Stopped停止状态，之后使用bg %num就可以将编号是num的服务放在后台运行了</p><p>基准测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark -h ip -p 端口 -a 密码</span><br></pre></td></tr></table></figure><h2 id="6、连接redis"><a href="#6、连接redis" class="headerlink" title="6、连接redis"></a>6、连接redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h ip [-p 端口号]-  端口号为默认的6379可以不写</span><br><span class="line">auth 密码-  输入密码</span><br><span class="line">ping-  测试连接，回复pong成功</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Linux（CentOS7）下安装Redis&quot;&gt;&lt;a href=&quot;#在Linux（CentOS7）下安装Redis&quot; class=&quot;headerlink&quot; title=&quot;在Linux（CentOS7）下安装Redis&quot;&gt;&lt;/a&gt;在Linux（CentOS7）下安
      
    
    </summary>
    
      <category term="Linux" scheme="http://alexyanglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="Redis" scheme="http://alexyanglong.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>在Linux（CentOS7）下安装MySQL5.x</title>
    <link href="http://alexyanglong.github.io/2018/05/12/%E5%9C%A8Linux%EF%BC%88CentOS7%EF%BC%89%E4%B8%8B%E5%AE%89%E8%A3%85MySQL5.x/"/>
    <id>http://alexyanglong.github.io/2018/05/12/在Linux（CentOS7）下安装MySQL5.x/</id>
    <published>2018-05-11T16:00:00.000Z</published>
    <updated>2018-06-05T02:26:53.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Linux（CentOS7）下安装MySQL5-x"><a href="#在Linux（CentOS7）下安装MySQL5-x" class="headerlink" title="在Linux（CentOS7）下安装MySQL5.x"></a>在Linux（CentOS7）下安装MySQL5.x</h1><p>MySQL是一款数据库，用于存储数据。</p><h2 id="1、先使用wget下载mysql安装包"><a href="#1、先使用wget下载mysql安装包" class="headerlink" title="1、先使用wget下载mysql安装包"></a>1、先使用wget下载mysql安装包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="2、创建组、用户"><a href="#2、创建组、用户" class="headerlink" title="2、创建组、用户"></a>2、创建组、用户</h2><p>后面mysql就使用这个用户来运行（注意这也是mysql启动脚本中默认的用户，因此最好不要改名）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql mysql   -  （使用-r参数表示mysql用户是一个系统用户，不能登录）</span><br></pre></td></tr></table></figure><h2 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h2><h3 id="3-1-解压"><a href="#3-1-解压" class="headerlink" title="3.1 解压"></a>3.1 解压</h3><p>将前面得到的mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz 解压、解归档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gunzip mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">tar -xvf mysql-5.7.22-linux-glibc2.12-x86_64.tar</span><br></pre></td></tr></table></figure><p>将解压后的目录移动至 /usr/local ，并重命名为 mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mysql-5.7.22-linux-glibc2.12-x86_64 /usr/local/mysql</span><br></pre></td></tr></table></figure><p>此后 /usr/local/mysql 就是安装目录了</p><p>注意，如果mysql目录下没有data和tmp目录，手动新建，并修改权限</p><h3 id="3-2-目录权限设置"><a href="#3-2-目录权限设置" class="headerlink" title="3.2 目录权限设置"></a>3.2 目录权限设置</h3><p>将mysql及其下所有的目录所有者和组均设为mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql</span><br><span class="line">chown mysql:mysql -R .</span><br></pre></td></tr></table></figure><h3 id="3-3-初始化"><a href="#3-3-初始化" class="headerlink" title="3.3 初始化"></a>3.3 初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data --basedir=/usr/local/mysql</span><br></pre></td></tr></table></figure><p>初始化成功后出现如下信息：</p><p>201x-xx-xxT07:10:13.583130Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use –explicit_defaults_for_timestamp server option (see documentation for more details).</p><p>201x-xx-xx T07:10:13.976219Z 0 [Warning] InnoDB: New log files created, LSN=45790</p><p>201x-xx-xx T07:10:14.085666Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.</p><p>201x-xx-xx T07:10:14.161899Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 1fa941f9-effd-11e5-b67d-000c2958cdc8.</p><p>201x-xx-xx T07:10:14.165534Z 0 [Warning] Gtid table is not ready to be used. Table ‘mysql.gtid_executed’ cannot be opened.</p><p>201x-xx-xx T07:10:14.168555Z 1 [Note] A temporary password is generated for root@localhost: xxxxxxxxx.</p><p><strong>注意最后一行，它给了root一个初始密码(xxxxxxxxx)，后面要登录的时候要用到这个密码。</strong></p><h3 id="3-4-配置"><a href="#3-4-配置" class="headerlink" title="3.4 配置"></a>3.4 配置</h3><p>配置 /etc 下的 my.cnf 文件，如果没有请创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /usr/local/mysql/data</span><br><span class="line">port = 3306</span><br><span class="line">socket = /usr/local/mysql/tmp/mysql.sock</span><br><span class="line"> </span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">socket = /usr/local/mysql/tmp/mysql.sock</span><br></pre></td></tr></table></figure><h2 id="4、后台运行服务端"><a href="#4、后台运行服务端" class="headerlink" title="4、后台运行服务端"></a>4、后台运行服务端</h2><p>注意：请将{mysql} 替换成 您的mysql安装路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;mysql&#125;/bin/mysqld_safe &amp;</span><br></pre></td></tr></table></figure><p>使用<code>ps -ef | grep mysql</code>  或者  <code>netstat -nap | grep 3306</code>   - 查看进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;mysql&#125;/bin/mysqladmin -uroot -p          - 停止</span><br></pre></td></tr></table></figure><p>如果出现错误，请检查前面几步是否出错。</p><h2 id="5、设置mysql以服务运行并且开机启动"><a href="#5、设置mysql以服务运行并且开机启动" class="headerlink" title="5、设置mysql以服务运行并且开机启动"></a>5、设置mysql以服务运行并且开机启动</h2><p>将{mysql}/ support-files/mysql.server 拷贝为/etc/init.d/mysql并设置运行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp mysql.server /etc/init.d/mysql</span><br><span class="line">chmod +x /etc/init.d/mysql</span><br></pre></td></tr></table></figure><p>把mysql注册为开机启动的服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --add mysql</span><br></pre></td></tr></table></figure><p>当然也可以手动进行服务的开启和关闭：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start</span><br><span class="line">/etc/init.d/mysql stop</span><br></pre></td></tr></table></figure><h2 id="6、连接客户端"><a href="#6、连接客户端" class="headerlink" title="6、连接客户端"></a>6、连接客户端</h2><p>创建客户端的软链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#123;mysql&#125;/bin/mysql /usr/local/bin/mysql</span><br></pre></td></tr></table></figure><p>客户端连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>输入刚才的初始化密码进入</p><p>进入之后，修改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;您的新密码&apos;;</span><br></pre></td></tr></table></figure><p>配置远程可以连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql                # 打开mysql数据库  </span><br><span class="line">update user set host=&apos;%&apos; where user=&apos;root&apos; and host=&apos;localhost&apos;;   # 将host设置为%表示任何ip都能连接mysql，当然也可以将host指定为某个ip  </span><br><span class="line">flush privileges;        # 刷新权限表，使配置生效</span><br></pre></td></tr></table></figure><p>关闭远程连接，恢复mysql的默认设置（只能本地连接）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set host=&apos;localhost&apos; where user=&apos;root&apos;;   #将host设置为localhost表示只能本地连接mysql</span><br></pre></td></tr></table></figure><p>也可以添加一个用户名为aaa，密码为xxx，权限为%（表示任意ip都能连接）的远程连接用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to &apos;aaa&apos;@&apos;%&apos; identified by &apos;xxx&apos;;</span><br></pre></td></tr></table></figure><p>至此，MySQL5.7安装完毕。</p><p>当然也可以使用Mariadb，它是MySQL5.x的一个分支，命令用法和MySQL5.x是一样的，安装（可以使用yum安装）步骤如下：</p><p>1、在安装之前可以先搜索yum管理工具中有没有mariadb的软件包，在命令行下：</p><p>yum search mariadb-server mariadb</p><p>2、如果存在，就可以使用yum管理工具来安装，在命令行下：</p><p>yum install mariadb-server mariadb</p><p>等待安装完成</p><p>4、启动/停止/重启数据库服务</p><p>systemctl start/stop/restart mariadb</p><p>设置开机自启</p><p>systemctl enable mariadb</p><p>取消开机自启</p><p>systemctl disable mariadb</p><p>4、连接数据库</p><p>mysql -u root -p</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Linux（CentOS7）下安装MySQL5-x&quot;&gt;&lt;a href=&quot;#在Linux（CentOS7）下安装MySQL5-x&quot; class=&quot;headerlink&quot; title=&quot;在Linux（CentOS7）下安装MySQL5.x&quot;&gt;&lt;/a&gt;在Linux（C
      
    
    </summary>
    
      <category term="Linux" scheme="http://alexyanglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="MySQL" scheme="http://alexyanglong.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>在Linux（CentOS7）下Git安装与简单使用</title>
    <link href="http://alexyanglong.github.io/2018/05/10/%E5%9C%A8Linux%EF%BC%88CentOS7%EF%BC%89%E4%B8%8BGit%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://alexyanglong.github.io/2018/05/10/在Linux（CentOS7）下Git安装与简单使用/</id>
    <published>2018-05-09T16:00:00.000Z</published>
    <updated>2018-06-05T09:33:41.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Linux（CentOS7）下Git安装与简单使用"><a href="#在Linux（CentOS7）下Git安装与简单使用" class="headerlink" title="在Linux（CentOS7）下Git安装与简单使用"></a>在Linux（CentOS7）下Git安装与简单使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载与解压"><a href="#下载与解压" class="headerlink" title="下载与解压"></a>下载与解压</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.17.0.tar.gz</span><br><span class="line">tar -xvf git-2.17.0.tar.gz</span><br><span class="line">cd git-2.17.0</span><br></pre></td></tr></table></figure><h3 id="移除旧版本"><a href="#移除旧版本" class="headerlink" title="移除旧版本"></a>移除旧版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure><h3 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install libcurl-devel</span><br><span class="line">yum install autoconf automake libtool</span><br></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make configure</span><br></pre></td></tr></table></figure><p>显示：</p><p>GIT_VERSION = 2.17.0</p><p>GEN configure</p><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/git --with-iconv --with-curl --with-expat=/usr/local/lib</span><br></pre></td></tr></table></figure><p>构建安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>在文件末尾追加上下面命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH=$PATH:/usr/local/git/bin</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><h3 id="重新加载环境变量"><a href="#重新加载环境变量" class="headerlink" title="重新加载环境变量"></a>重新加载环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><h3 id="测试，查看git版本"><a href="#测试，查看git版本" class="headerlink" title="测试，查看git版本"></a>测试，查看git版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>出现Git的版本信息则安装成功。</p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="建立本地仓库"><a href="#建立本地仓库" class="headerlink" title="建立本地仓库"></a>建立本地仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir &lt;directory&gt;</span><br><span class="line">cd &lt;directory&gt;</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="把文件纳入版本控制"><a href="#把文件纳入版本控制" class="headerlink" title="把文件纳入版本控制"></a>把文件纳入版本控制</h3><p>先将要进行版本控制的文件放入本地仓库，再将文件放入暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;warehouse directory&gt;</span><br><span class="line">git add &lt;filename&gt;   # 将修改后的文件加入暂存区</span><br><span class="line">或者 git add .       #  将该目录下所有文件、目录加入暂存区</span><br></pre></td></tr></table></figure><h3 id="查看放入暂存区文件的状态"><a href="#查看放入暂存区文件的状态" class="headerlink" title="查看放入暂存区文件的状态"></a>查看放入暂存区文件的状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="提交暂存区文件到本地仓库"><a href="#提交暂存区文件到本地仓库" class="headerlink" title="提交暂存区文件到本地仓库"></a>提交暂存区文件到本地仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;本次提交文件的相关描述信息&apos;    # -m 后面添加的是本次提交的描述</span><br></pre></td></tr></table></figure><p>如果提交报错,看否是没有配置全局用户名和邮箱（<code>user.name</code>、<code>user.email</code> ），可执行下面的命令解决:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &apos;your-name&apos;</span><br><span class="line">git config --global user.email &apos;your-email&apos;</span><br></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><h3 id="回滚到某个版本"><a href="#回滚到某个版本" class="headerlink" title="回滚到某个版本"></a>回滚到某个版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号   # 版本号可在日志文件中查看</span><br></pre></td></tr></table></figure><h3 id="显示版本包括历史版本"><a href="#显示版本包括历史版本" class="headerlink" title="显示版本包括历史版本"></a>显示版本包括历史版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line">git reflog --pretty=oneline # 单行显示</span><br></pre></td></tr></table></figure><h3 id="撤回暂存区内容"><a href="#撤回暂存区内容" class="headerlink" title="撤回暂存区内容"></a>撤回暂存区内容</h3><p>把暂存区的内容全撤回来(可以在本地做修改，然后再次add进暂存区做提交)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout --   #  撤回所有暂存区的文件、目录，这样就可以重新修改内容，让后在添加、提交</span><br><span class="line">git checkout -- [文件/目录]  #  将暂存区的该文件/目录撤回，这样就可以重新修改内容，让后在添加、提交</span><br></pre></td></tr></table></figure><h3 id="添加远端仓库"><a href="#添加远端仓库" class="headerlink" title="添加远端仓库"></a>添加远端仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 远端仓库地址</span><br></pre></td></tr></table></figure><h3 id="将本地仓库和远端仓库同步"><a href="#将本地仓库和远端仓库同步" class="headerlink" title="将本地仓库和远端仓库同步"></a>将本地仓库和远端仓库同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [branch name]</span><br></pre></td></tr></table></figure><h3 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a>查看所有分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branch name]</span><br></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [branch name]</span><br></pre></td></tr></table></figure><h3 id="删除仓库中的文件"><a href="#删除仓库中的文件" class="headerlink" title="删除仓库中的文件"></a>删除仓库中的文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm [filename]</span><br></pre></td></tr></table></figure><h3 id="克隆项目到本地"><a href="#克隆项目到本地" class="headerlink" title="克隆项目到本地"></a>克隆项目到本地</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 远端仓库地址</span><br></pre></td></tr></table></figure><h3 id="推送到服务器"><a href="#推送到服务器" class="headerlink" title="推送到服务器"></a>推送到服务器</h3><p>提交到远程仓库，origin是原始名字，master是分支，第一次需要加参数 -u ，以后不用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br><span class="line">或</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="拉取服务器代码"><a href="#拉取服务器代码" class="headerlink" title="拉取服务器代码"></a>拉取服务器代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Linux（CentOS7）下Git安装与简单使用&quot;&gt;&lt;a href=&quot;#在Linux（CentOS7）下Git安装与简单使用&quot; class=&quot;headerlink&quot; title=&quot;在Linux（CentOS7）下Git安装与简单使用&quot;&gt;&lt;/a&gt;在Linux（C
      
    
    </summary>
    
      <category term="Linux" scheme="http://alexyanglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="Git使用" scheme="http://alexyanglong.github.io/tags/Git%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>在Linux（CentOS7）下构建安装Python3.x</title>
    <link href="http://alexyanglong.github.io/2018/05/10/%E5%9C%A8Linux%EF%BC%88CentOS7%EF%BC%89%E4%B8%8B%E6%9E%84%E5%BB%BA%E5%AE%89%E8%A3%85Python3.x/"/>
    <id>http://alexyanglong.github.io/2018/05/10/在Linux（CentOS7）下构建安装Python3.x/</id>
    <published>2018-05-09T16:00:00.000Z</published>
    <updated>2018-06-05T02:27:46.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Linux（CentOS7）下构建安装Python3-x"><a href="#在Linux（CentOS7）下构建安装Python3-x" class="headerlink" title="在Linux（CentOS7）下构建安装Python3.x"></a>在Linux（CentOS7）下构建安装Python3.x</h1><p>Linux环境自带了Python 2.x版本，但是如果要使用3.x的版本，可以先在<a href="https://www.python.org/" target="_blank" rel="noopener">Python的官方网站</a>下载Python的源代码并通过源代码构建安装的方式进行安装，具体的步骤如下所示。</p><h2 id="1、安装依赖库"><a href="#1、安装依赖库" class="headerlink" title="1、安装依赖库"></a>1、安装依赖库</h2><p>因为没有这些依赖库可能在源代码构件安装时因为缺失底层依赖库而失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure><h2 id="2、下载Python源代码并解压缩到指定目录"><a href="#2、下载Python源代码并解压缩到指定目录" class="headerlink" title="2、下载Python源代码并解压缩到指定目录"></a>2、下载Python源代码并解压缩到指定目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz</span><br><span class="line">xz -d Python-3.6.1.tar.xz</span><br><span class="line">tar -xvf Python-3.6.1.tar</span><br></pre></td></tr></table></figure><h2 id="3、配置和安装"><a href="#3、配置和安装" class="headerlink" title="3、配置和安装"></a>3、配置和安装</h2><p>先切换至Python源代码目录并执行下面的命令进行配置和安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Python-3.6.1</span><br><span class="line">./configure --prefix=/usr/local/python36 --enable-optimizations</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="4、创建软链接"><a href="#4、创建软链接" class="headerlink" title="4、创建软链接"></a>4、创建软链接</h2><p>这样就可以直接通过python3直接启动Python解释器，pip管理工具，2to3转换工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/python36/bin/python3 /usr/bin/python3</span><br><span class="line">ln -s /usr/local/python36/bin/pip3 /usr/bin/pip3</span><br><span class="line">ln -s /usr/local/python36/bin/2to3 /usr/bin/2to3</span><br></pre></td></tr></table></figure><h2 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3-  进入python3.X的交互环境</span><br><span class="line">pip3 -V-  查看pip的版本</span><br><span class="line">2to3-  查看2to3</span><br></pre></td></tr></table></figure><p>如果没有报错，就安装成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Linux（CentOS7）下构建安装Python3-x&quot;&gt;&lt;a href=&quot;#在Linux（CentOS7）下构建安装Python3-x&quot; class=&quot;headerlink&quot; title=&quot;在Linux（CentOS7）下构建安装Python3.x&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Linux" scheme="http://alexyanglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>在Linux（CentOS7）下安装Nginx服务器</title>
    <link href="http://alexyanglong.github.io/2018/05/10/%E5%9C%A8Linux%EF%BC%88CentOS7%EF%BC%89%E4%B8%8B%E5%AE%89%E8%A3%85Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://alexyanglong.github.io/2018/05/10/在Linux（CentOS7）下安装Nginx服务器/</id>
    <published>2018-05-09T16:00:00.000Z</published>
    <updated>2018-06-05T02:08:30.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Linux（CentOS7）下安装Nginx服务器"><a href="#在Linux（CentOS7）下安装Nginx服务器" class="headerlink" title="在Linux（CentOS7）下安装Nginx服务器"></a>在Linux（CentOS7）下安装Nginx服务器</h1><p>nginx是一款高性能的web服务器，在Linux中可以使用 yum 来安装，安装步骤如下：</p><h2 id="1、检查yum包管理工具中有没有Nginx"><a href="#1、检查yum包管理工具中有没有Nginx" class="headerlink" title="1、检查yum包管理工具中有没有Nginx"></a>1、检查yum包管理工具中有没有Nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search nginx</span><br></pre></td></tr></table></figure><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><h2 id="3、启动nginx服务器"><a href="#3、启动nginx服务器" class="headerlink" title="3、启动nginx服务器"></a>3、启动nginx服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx-  如果没有报错，就OK</span><br></pre></td></tr></table></figure><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p>在浏览器地址栏输入主机公网ip，进行测试查看。注意：先确保主机的80端口[web服务默认80端口]是开启的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Linux（CentOS7）下安装Nginx服务器&quot;&gt;&lt;a href=&quot;#在Linux（CentOS7）下安装Nginx服务器&quot; class=&quot;headerlink&quot; title=&quot;在Linux（CentOS7）下安装Nginx服务器&quot;&gt;&lt;/a&gt;在Linux（C
      
    
    </summary>
    
      <category term="Linux" scheme="http://alexyanglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
      <category term="Nginx" scheme="http://alexyanglong.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell的基本使用</title>
    <link href="http://alexyanglong.github.io/2018/05/05/Linux%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://alexyanglong.github.io/2018/05/05/Linux的基本使用/</id>
    <published>2018-05-04T16:00:00.000Z</published>
    <updated>2018-06-05T02:45:32.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-Shell的基本使用"><a href="#Linux-Shell的基本使用" class="headerlink" title="Linux Shell的基本使用"></a>Linux Shell的基本使用</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./Linux简介.jpg" alt="Linux简介" title="">                </div>                <div class="image-caption">Linux简介</div>            </figure><p>操作系统发展史图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./操作系统发展史.png" alt="操作系统发展史" title="">                </div>                <div class="image-caption">操作系统发展史</div>            </figure><h2 id="Linux的基本命令（centos7）"><a href="#Linux的基本命令（centos7）" class="headerlink" title="Linux的基本命令（centos7）"></a>Linux的基本命令（centos7）</h2><p><code>who</code> 或 <code>w</code>：查看当前登录的所有用户</p><p><code>who am i</code> 或 <code>whoami</code>：查看当前登录用户</p><p><code>last</code>：查看之前登录过的用户历史记录</p><p><code>clear</code>：清屏</p><p><code>ps</code>：查看进程状态</p><p>​    <code>ps -ef</code>：查看进程</p><p>​    <code>ps -aux</code>：查看进程</p><p><code>kill</code> ： 进程号：杀掉进程</p><p><code>netstat -nap</code>：查看进程、端口、进程号</p><p><code>adduser 用户名</code>：创建新用户</p><p><code>userdel 用户名</code>：删除用户</p><p><code>passwd [用户名]</code>：修改用户密码，不加用户名是修改的root的密码</p><p><code>ssh 用户名@ip地址</code>：远程安全连接其他的服务器</p><p><code>logout</code> 或 <code>exit</code>：退出</p><p><code>reboot</code>：重启服务器</p><p><code>shutdown</code>：关闭服务器</p><p><code>init 0</code>：关机</p><p><code>init 6</code>：重启</p><p><code>uname</code>：查看当前系统</p><p><code>hostname</code>：查看主机名</p><p><code>history</code>：查看历史命令，默认保存最近1000条，可以使用 HISTSIZE=新值 来修改保存的条数</p><p>​    <code>!num(命令行号)</code>：重新执行改行命令</p><p><code>man 命令</code>：查看’命令‘的使用方式</p><p><code>info 命令</code>：查看’命令‘的使用方式，更详细</p><p><code>命令 --help</code>：查看’命令‘的参数使用方法</p><p><code>whatis 命令</code>：查看命令的简短描述</p><p><code>pwd</code>：打印当前工作目录路径 - print working directory</p><p><code>whereis 命令</code>：查找包含 ’命令‘ 所有的目录路径</p><p><code>which 命令</code>：查找到第一个含有 ’命令‘ 的目录路径</p><p><code>su 用户名</code>：切换到该用户，但是不会切换到该用户的文件目录</p><p><code>su - 用户名</code>：切换到该用户，并且切换到该用户的文件目录</p><p><code>sudo 命令操作</code>：以管理员身份执行</p><p><code>mkdir 目录名</code>：创建目录</p><p><code>rmdir 目录名</code>：删除空目录</p><p><code>rm 目录名/文件名</code>：删除目录或者文件，可以加参数</p><p>​    -i：交互式删除，有提示 interactive</p><p>​    -f：不用提示，直接删除 force</p><p>​    -r：递归删除目录下的内容  recursive</p><p><code>ls</code>：查看当前目录下的所有文件和目录（非隐藏），可以加参数</p><p>​    -l：查看当前目录下的所有文件和目录，长格式（非隐藏）</p><p>​    -a：查看当前目录下的所有文件和目录</p><p>​    -al  或 -l -a：查看当前目录下的所有文件和目录，长格式</p><p>​    -r：反转显示目录下的文件和目录，按字母表降序</p><p>​    -R：递归显示目录下的文件和目录</p><p><code>touch 文件名</code>：没有该文件就创建一个空文件，有只是改变其时间戳，可以修改文件的三个时间：修改内容的时间，更改权限的时间，最后访问的时间</p><p><code>cd 目录</code>：切换目录  - change directory</p><p>​    <code>cd /root</code>：回到root主目录 （/root  绝对路径） （/root：root用户主目录，/etc：放置配置文件目录</p><p>/home：其他用户的用户主目录，/usr：用户数据、用户应用目录）</p><p>​    <code>cd ~</code>：回到当前用户主目录</p><p>​    <code>cd ..</code>：回到上一级</p><p>​    <code>cd /</code>：回到根目录</p><p><code>cp 文件名 路径</code>：将文件拷贝到路径下，可以重命名</p><p><code>scp 本地文件 用户名@ip地址:路径</code>：将本地文件安全拷贝到目标服务器的某路径下</p><p><code>sftp 用户名@ip地址</code>：安全的远程文件传输</p><p><code>mv 文件名/目录 路径</code>：将文件/目录剪切（移动）到路径下，可以重命名</p><p><code>cat 文件名</code>：查看文件所有内容</p><p>​    <code>cat 文件名 -n</code>：查看文件内容并显示行号</p><p>​    <code>cat 文件名| more 或 less</code>：一页一页查看</p><p>​    <code>cat 文件名| grep pattern</code>：搜索文件中的内容，匹配模式pattern匹配的字符串</p><p><code>head  -n 文件</code>：查看文件前 n 行</p><p><code>tail -n 文件</code>：查看文件最后 n 行</p><p><code>wget 资源路径</code>：联网获取资源</p><p>​    <code>wget -O filename 资源路径</code>：获取资源并给资源重命名</p><p><code>grep pattern 文件1</code>：搜索文件1中的内容，匹配模式pattern匹配的字符串</p><p><code>find</code>：查找文件或目录</p><p><code>jobs</code>：查看正在执行的后台任务列表</p><p><code>fg %n</code>：将编号为 n 的后台任务拿到前台执行</p><p><code>bg %n</code>：将编号为 n 的后台暂停任务继续在后台执行</p><p><code>top</code>：查看CPU的状态</p><p><code>wc 文件</code>：统计文件的行数、单词数、字符数，可以加参数</p><p>​    -l：行数</p><p>​    -w：单词数</p><p><code>uniq 文件</code>：将文件中的内容去重显示，注意只能去相邻的重复的，不改变原文件内容</p><p><code>sort 文件</code>：将文件中的内容进行排序显示，不改变原文件内容</p><p><code>diff 文件1 文件2</code>：比较两个文件的差异，并显示不同之处</p><p><code>file 文件</code>：显示文件的性质</p><p><code>date</code>：查看当前时间</p><p><code>cal</code>：查看日历</p><p><code>echo</code>：回声命令</p><p>​    <code>echo string</code>：在屏幕上输出string</p><p>​    <code>echo string &gt; 文件</code>：将string输出到文件中</p><p>​    <code>echo $a</code>：在屏幕上打印变量a的值</p><p><code>ln</code>：创建链接</p><p><code>ln 路径1/文件1 路径2/文件2</code>：给路径1下的文件1在路径2下创建名为文件2的硬链接，存储的是文件1内容的引用，相当于备份，但是不会占用空间</p><p><code>ln -s 路径1/文件1 路径2/文件2</code>：给路径1下的文件1在路径2下创建名为文件2的软链接，相当于快捷方式，不是引用</p><p><code>gzip 文件名</code>：压缩</p><p><code>gunzip 文件名</code>：解压缩</p><p><code>xz</code>：压缩、解压缩，可以加参数</p><p>​    <code>xz -z 文件名</code>：压缩</p><p>​    -0 … -9：压缩比，值越大，压缩率越大</p><p>​    <code>xz -d 文件名</code>：解压缩</p><p><code>tar</code>：归档</p><p>​    -x：抽取，解归档</p><p>​    -v：显示解归档的过程</p><p>​    -f：指定文件名</p><p>​    <code>tar -xvf 文件名</code>：解归档使用</p><p>​    -t：查看归档文件的内容</p><p>​    -c：归档</p><p>​    <code>tar -cvf 归档文件名 源文件路径</code>：归档使用</p><p><code>alias 名称=&#39;命令 [参数]&#39;</code>：给 ‘命令 参数’ 起别名</p><p><code>unalias 名称</code>：取消别名</p><p><code>!v</code>：把刚刚以v开头的命令在执行一遍</p><p>&amp;：后台执行</p><p>>文件2：输出重定向，将运行结果输出到文件2</p><p>2&gt; 文件3：错误重定向，将错误输出到文件3</p><p>>&gt; 文件4：追加输出重定向，将运行结果追加输出到文件4</p><p>&lt;：输入重定向</p><h2 id="vi-vim-编辑器的使用："><a href="#vi-vim-编辑器的使用：" class="headerlink" title="vi / vim 编辑器的使用："></a>vi / vim 编辑器的使用：</h2><p><code>i</code> 或 <code>a</code>：进入编辑模式</p><p><code>ESC</code>：退出编辑模式，进入命令模式</p><p><code>:</code> ：在命令模式下，按 : 键进入末行模式</p><h3 id="在命令模式下："><a href="#在命令模式下：" class="headerlink" title="在命令模式下："></a>在命令模式下：</h3><p><code>yy</code>：复制本行</p><p><code>num yy</code>：复制num行</p><p><code>p</code>：粘贴</p><p><code>dd</code>：删除本行</p><p><code>num dd</code>：删除num行</p><p><code>dw</code>：删除一个单词</p><p><code>dG</code>：删除所有内容</p><p><code>d$</code>：从当前位置删除到行末尾</p><p><code>u</code>：撤销</p><p><code>G</code>：去到最后一行</p><p><code>num G</code>：去到num行</p><p><code>gg</code>：回到第一行</p><p><code>Ctrl y</code>：向上翻一行</p><p><code>Ctrl e</code>：向下翻一行</p><p><code>Ctrl f</code>：向下翻一页</p><p><code>Ctrl b</code>：向上翻一页</p><p><code>ZZ</code>：保存并退出</p><h3 id="在末行模式下："><a href="#在末行模式下：" class="headerlink" title="在末行模式下："></a>在末行模式下：</h3><p><code>:!系统命令</code>：在vim编辑器执行系统命令，执行完后回车，回到vim编辑器  eg： :!cal </p><p><code>:wq</code>：保存并退出</p><p><code>:q!</code>：不保存退出</p><p><code>:set nu</code>：显示行号</p><p><code>:set nonu</code>：取消行号</p><p><code>:syntax off</code>：关闭高亮语法    :syntax on：开启高亮语法</p><p><code>:set ts=4</code>：将制表键设置为4个空格</p><p><code>/string</code>：搜索string， 按 n 键向下搜索， 按 N 键向上搜索</p><p><code>:1,$s/string1/string2/g</code>：将文件中从第一行到最后一行的所有string1换成string2</p><p><code>:inoremap 快捷键名 对应的代码</code>  ：自定义快捷键   eg： :inoremap pymain if <strong>name</strong> == ‘<strong>main</strong>‘</p><h2 id="文件、目录权限："><a href="#文件、目录权限：" class="headerlink" title="文件、目录权限："></a>文件、目录权限：</h2><p>-             rwx                  rwx                    rwx:</p><p>类型      所有者权限     同组用户权限    其他用户权限</p><p>类型：文件（-）、目录（d）、链接（l）</p><p>r：read  4        - 0b(100)</p><p>w：write   2     - 0b(10)</p><p>x：excute  1     - 0b(1)</p><p><code>chmod 权限 文件/目录</code>：修改文件/目录的权限</p><p><code>chmod 777 文件/目录</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-Shell的基本使用&quot;&gt;&lt;a href=&quot;#Linux-Shell的基本使用&quot; class=&quot;headerlink&quot; title=&quot;Linux Shell的基本使用&quot;&gt;&lt;/a&gt;Linux Shell的基本使用&lt;/h1&gt;&lt;figure class=&quot;im
      
    
    </summary>
    
      <category term="Linux" scheme="http://alexyanglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://alexyanglong.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript总结</title>
    <link href="http://alexyanglong.github.io/2018/04/28/JavaScript%E6%80%BB%E7%BB%93/"/>
    <id>http://alexyanglong.github.io/2018/04/28/JavaScript总结/</id>
    <published>2018-04-27T16:00:00.000Z</published>
    <updated>2018-06-05T02:30:12.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript总结"><a href="#JavaScript总结" class="headerlink" title="JavaScript总结"></a>JavaScript总结</h1><p>JavaScript： JS - Behavior</p><p>​    ECMAScript  -  语法规范  -  ES5</p><p>​    BOM  -  浏览器对象模型  -  window</p><p>​    DOM  -  文档对象模型  -  document</p><h2 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><p>JavaScript 有隐式的类型转换。</p><p>​    简单数据类型： <code>number</code>、<code>string</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code></p><p>​    复杂数据类型： <code>object</code></p><p>​    可以使用 <code>typeof()</code> 查看数据类型</p><h2 id="JavaScript-运算符"><a href="#JavaScript-运算符" class="headerlink" title="JavaScript 运算符"></a>JavaScript 运算符</h2><p>​    算术运算符：<code>+</code> 、<code>-</code>、 <code>*</code>、<code>/</code>、 <code>%</code> 、<code>**</code>（ES7版本）</p><p>​    赋值运算符：<code>=</code> 、<code>+=</code>、 <code>-=</code>、 <code>*=</code>、 <code>/=</code>、<code>%=</code></p><p>​    比较（关系）运算符： <code>&gt;</code>、 <code>&gt;=</code>、 <code>&lt;</code>、 <code>&lt;=</code>、 <code>==</code>、 <code>!=</code> 、<code>===</code>（不带隐式类型转换的等于，全等于）、<code>!==</code>（严格不等于）</p><p>​    逻辑运算符： <code>&amp;&amp;</code>（短路与）、 <code>||</code>（短路或）、 <code>!</code></p><p>​    自增自减运算符： <code>++</code> 、<code>--</code></p><p>​    位运算、成员运算</p><h2 id="JavaScript-中的全局函数"><a href="#JavaScript-中的全局函数" class="headerlink" title="JavaScript 中的全局函数"></a>JavaScript 中的全局函数</h2><p><code>isNaN()</code>  判断是不是 不是一个数</p><p><code>parseInt()</code>  取整，如果取不出，返回<code>NaN</code></p><p><code>parseFloat()</code>  取小数，如果取不出，返回<code>NaN</code></p><p><code>isFinite()</code>  判断是不是有限的数</p><p><code>eval()</code>  - evaluate  - 容易引发XSS（跨站脚本攻击）</p><p><code>encodeURIcomponent()</code>  编成 百分号 编码</p><p><code>decodeURIcomponent()</code>  从百分号编码 解码</p><h2 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h2><p>获取的对象元素：</p><p><code>document.getElementById(#id)</code></p><p><code>document.getElementByClassName(.class)</code></p><p><code>document.getElementByTagName(标签)</code></p><p><code>querySelector()</code> ： 根据指定的选择器查找单个元素</p><p><code>querySelectorAll()</code> ： 根据指定的选择器查找所有元素</p><p><code>this</code>  // this 表示引发当前事件的对象元素</p><p>// <code>evt</code> 表示当前事件，<code>evt.target</code> 表示引发当前事件的事件源</p><p>//  需要在函数参数中 传入<code>evt</code> 对象</p><p><code>evt = evt || window.event;  // 兼容低版本的IE</code></p><p><code>var target = evt.target || evt.srcElement;</code></p><p>在定义函数时，如果没有传入参数，那么函数中有一个隐藏的 arguments 对象，它代表了参数的列表，在调用时，可以传入任意多个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">alert(<span class="built_in">arguments</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><p><code>document</code>  文档</p><p><code>location</code>  地址栏  - <code>href</code> / <code>reload</code> / <code>replace</code></p><p><code>history</code>  历史记录  - <code>go</code> / <code>forward</code> / <code>back</code></p><p><code>navigator</code>  浏览器</p><p><code>screen</code>  操作系统窗口  - <code>availWidth</code>/ <code>availHeight</code> / <code>width</code> / <code>height</code></p><p><code>alert</code> /<code>confirm</code> / <code>prompt</code></p><p><code>open</code> / <code>close</code></p><p><code>setTimeout</code> / <code>setInterval</code> / <code>clearTimeout</code> / <code>clearInterval</code></p><p>修改节点的内容和属性</p><p><code>textContent</code></p><p><code>innerHTML</code></p><p><code>nodeValue</code></p><p>访问成员运算符 .</p><p><code>setAttribute</code> / <code>getAttribute</code> / <code>removeAttribute</code></p><p>创建新节点</p><p><code>createElement</code></p><p>追加新节点</p><p><code>appendChild</code></p><p><code>insertBefore</code></p><p>移除子节点</p><p><code>removeChild</code></p><p>通过自己节点访问父节点</p><p><code>parentNode</code></p><p>通过自己节点访问子节点</p><p><code>children</code> 所有</p><p><code>firstChild</code> 第一个</p><p><code>lastChild</code> 最后一个</p><p>通过自己节点访问兄弟节点</p><p><code>nextSibling</code>  前面的兄弟</p><p><code>prevSibling</code>  后面的兄弟</p><h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><p>jQuery的$函数的作用:</p><p>1、<code>$(function() {})</code> $() 函数传入的是一个函数，表示该函数是在页面加载完成之后要执行的回调函数</p><p>2、<code>$(selector)</code>  $() 函数传入的是一个选择器，表示通过选择器获得对应的元素，并处理成 jQuery对象，jQuery对象的本质是一个数组，如果要将jQuery对象转成原生js对象，使用下标或者<code>get()</code> 运算</p><p>3、<code>$(element)</code>  $() 函数传入的是一个原生js对象，表示将其转成jQuery对象</p><p>4、<code>$(标签)</code>  $() 函数传入的是一个标签，表示创建对应的元素并处理成jQuery对象</p><p>注意：当jQuery库和其他的库中的 <code>$函数</code> 有冲突，可以使用以下方法解决：</p><p>​    <code>jQuery.noConflict()</code>  将jQuery库中的 <code>$函数</code> 不起作用，但是jQuery库可以使用jQuery来替代 <code>$</code>，其他库可以使用 <code>$函数</code>。</p><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><ul><li>选择器</li></ul><ul><li><ul><li><code>*</code> / <code>element</code> / <code>#id</code> / <code>.class</code> / <code>selector1, selector2</code></li><li><code>ancestor descendant</code> / <code>parent&gt;child</code> / <code>previous+next</code> / <code>previous~siblings</code></li></ul></li></ul><ul><li>筛选器</li></ul><ul><li><ul><li>基本筛选器：<code>:not(selector)</code>/ <code>:first</code> / <code>:last</code> / <code>:even</code> / <code>:odd</code> / <code>:eq(index)</code> / <code>:gt(index)</code> / <code>:lt(index)</code> / <code>:animated</code> / <code>:focus</code></li><li>内容筛选器：<code>:contains(&#39;…&#39;)</code>/ <code>:empty</code> / <code>:parent</code> / <code>:has(selector)</code></li><li>可见性筛选器：<code>:hidden</code> / <code>:visible</code></li><li>子节点筛选器：<code>:nth-child(expr)</code> / <code>:first-child</code> / <code>:last-child</code> / <code>:only-child</code></li><li>属性筛选器：<code>[attribute]</code> / <code>[attribute=&#39;value&#39;]</code> / <code>[attribute!=&#39;value&#39;]</code> / <code>[attribute^=&#39;value&#39;]</code> / <code>[attribute$=&#39;value&#39;]</code> / <code>[attribute|=&#39;value&#39;]</code> / <code>[attribute~=&#39;value&#39;]</code></li></ul></li></ul><ul><li>表单： <code>:input</code> / <code>:text</code> / <code>:password</code> / <code>:radio</code> / <code>:checkbox</code> / <code>:submit</code> / <code>:image</code> / <code>:reset</code> / <code>:button</code> / <code>:file</code> / <code>:selected</code> / <code>:enabled</code> / <code>:disabled</code> / <code>:checked</code></li></ul><h3 id="执行操作"><a href="#执行操作" class="headerlink" title="执行操作"></a>执行操作</h3><ul><li>内容操作</li></ul><ul><li><ul><li>获取/修改内容：<code>html()</code> / <code>text()</code> / <code>replaceWith()</code> / <code>remove()</code></li><li>获取/设置元素：<code>before()</code> / <code>after()</code> / <code>prepend()</code> / <code>append()</code> / <code>remove()</code> / <code>clone()</code> / <code>unwrap()</code> / <code>detach()</code> / <code>empty()</code> / <code>add()</code></li><li>获取/修改属性：<code>attr()</code> / <code>removeAttr()</code> / <code>addClass()</code> / <code>removeClass()</code> / <code>css()</code></li><li>获取/设置表单值：<code>val()</code></li></ul></li></ul><ul><li>查找操作</li></ul><ul><li><ul><li>查找方法：<code>find()</code> / <code>parent()</code> / <code>children()</code> / <code>siblings()</code> / <code>next()</code> / <code>nextAll()</code> / <code>prev()</code> / <code>prevAll()</code></li><li>筛选器：<code>filter()</code> / <code>not()</code> / <code>has()</code> / <code>is()</code> / <code>contains()</code></li><li>索引编号：<code>eq()</code></li></ul></li></ul><ul><li>尺寸和位置</li></ul><ul><li><ul><li>尺寸相关：<code>height()</code> / <code>width()</code> / <code>innerHeight()</code> / <code>innerWidth()</code> / <code>outerWidth()</code> / <code>outerHeight()</code></li><li>位置相关：<code>offset()</code> / <code>position()</code> / <code>scrollLeft()</code> / <code>scrollTop()</code></li></ul></li></ul><ul><li>特效和动画</li></ul><ul><li><ul><li>基本动画：<code>show()</code> / <code>hide()</code> / <code>toggle()</code></li><li>消失出现：<code>fadeIn()</code> / <code>fadeOut()</code> / <code>fadeTo()</code> / <code>fadeToggle()</code></li><li>滑动效果：<code>slideDown()</code> / <code>slideUp()</code> / <code>slideToggle()</code></li><li>自定义：<code>delay()</code> / <code>stop()</code> / <code>animate()</code></li></ul></li></ul><ul><li>事件</li></ul><ul><li><ul><li>文档加载：<code>ready()</code> / <code>load()</code></li><li>用户交互：<code>on()</code> / <code>off()</code></li></ul></li></ul><h2 id="AJAX-Asynchronous-JavaScript-and-XML"><a href="#AJAX-Asynchronous-JavaScript-and-XML" class="headerlink" title="AJAX - Asynchronous JavaScript and XML"></a>AJAX - Asynchronous JavaScript and XML</h2><p>让浏览器向服务器发出异步请求(非阻塞式请求)，等服务器返回了响应数据(JSON/XML)后就可以对页面进行局部刷新，这样就可以在不中断用户体验的前提下刷新页面数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url: 向服务器发送请求的url</span><br><span class="line">type: 发送请求的类型（get、post、put、patch、<span class="keyword">delete</span>等）</span><br><span class="line">data: 发送请求时需要向服务器提交的数据，不是必填项</span><br><span class="line">datatype: 接收服务器返回数据的类型</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">      执行成功时，回调的函数</span><br><span class="line">&#125;,</span><br><span class="line">error: <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">      执行失败时，回调的函数</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript总结&quot;&gt;&lt;a href=&quot;#JavaScript总结&quot; class=&quot;headerlink&quot; title=&quot;JavaScript总结&quot;&gt;&lt;/a&gt;JavaScript总结&lt;/h1&gt;&lt;p&gt;JavaScript： JS - Behavior&lt;/p&gt;

      
    
    </summary>
    
      <category term="Web前端" scheme="http://alexyanglong.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://alexyanglong.github.io/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://alexyanglong.github.io/tags/jQuery/"/>
    
      <category term="AJAX" scheme="http://alexyanglong.github.io/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>HTML+CSS总结</title>
    <link href="http://alexyanglong.github.io/2018/04/25/HTML+CSS%E6%80%BB%E7%BB%93/"/>
    <id>http://alexyanglong.github.io/2018/04/25/HTML+CSS总结/</id>
    <published>2018-04-24T16:00:00.000Z</published>
    <updated>2018-06-05T02:31:35.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-CSS总结"><a href="#HTML-CSS总结" class="headerlink" title="HTML+CSS总结"></a>HTML+CSS总结</h1><p>Web前端主要包含三部分内容：</p><p>1、Tag：HTML标签，用来装要显示的内容、数据。</p><p>2、CSS：Display，对要显示的内容进行渲染。</p><p>3、JavaScript：Behavior，交互、行为，使用户具有更好的体验。</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>​    HTML （Hyper Text Markup Language，超文本标记语言）是用来描述网页的一种语言，它包含了一系列的标签。</p><p>​    html：此标签可告知浏览器其自身是一个 HTML 文档。<code>&lt;html&gt;</code> 与 <code>&lt;/html&gt;</code> 标签限定了文档的开始点和结束点，在它们之间是文档的头部和主体。</p><p>​    head：此标签用于定义文档的头部，它是所有头部元素的容器。<code>&lt;head&gt;</code> 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等等。文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。下面这些标签可用在 head 部分：<code>&lt;base&gt;</code> 、<code>&lt;link&gt;</code> 、<code>&lt;meta&gt;</code> 、<code>&lt;style&gt;</code> 、<code>&lt;script&gt;</code> 和 <code>&lt;title&gt;</code> 。<code>&lt;title&gt;</code> 定义文档的标题，它是 head 部分中唯一必需的元素。</p><p>​    body：此标签定义文档的主体。包含文档的所有要进行显示的内容（比如文本<code>&lt;span&gt;</code> <code>&lt;p&gt;</code> 、上标<code>&lt;sup&gt;</code> 、下标<code>&lt;sub&gt;</code> 、超链接<code>&lt;a&gt;</code>、图像<code>&lt;img&gt;</code>、表格<code>&lt;table&gt;</code> 、列表<code>&lt;ul&gt;</code> <code>&lt;ol&gt;</code> <code>&lt;dl&gt;</code> 、逻辑语义块<code>&lt;header&gt;</code> <code>&lt;section&gt;</code> <code>&lt;aside&gt;</code> <code>&lt;footer&gt;</code> <code>&lt;div&gt;</code> 、标题<code>&lt;h1&gt;</code>~<code>&lt;h6&gt;</code> 、换行<code>&lt;br&gt;</code> 、内嵌块<code>&lt;iframe&gt;</code> 、表单元素<code>&lt;form&gt;</code> <code>&lt;input&gt;</code> <code>&lt;button&gt;</code> <code>&lt;select&gt;</code> 、音频<code>&lt;audio&gt;</code> 、视频<code>&lt;video&gt;</code>等等）。</p><p>​    除此之外，每个标签都有自己特有的属性，例如<code>&lt;a&gt;</code> 标签有href属性、每个标签都有的class属性等等。并且还支持自定义属性，即开发人员自己定义一个不存在的属性。</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>​    CSS（Cascading Style Sheets，层叠样式表）是用来渲染HTML标签的显示样式的一种语言。根据CSS在HTML页面的位置的不同，可以分为三类：</p><p>​    内部样式表：写在<code>&lt;head&gt;</code>的<code>&lt;style&gt;</code>标签内，多用于首页。加载快。</p><p>​    外部样式表：脱离HTML页面，写在外部，可以用于其他页面。所有页面可以共享同一个样式，便于风格统一；使内容和显示分离。</p><p>​    内嵌（行内）样式表：写在每个标签的style属性内，不常用。不易于扩展。</p><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>通配符选择器： *</p><p>标签选择器： &lt;标签名&gt;</p><p>类选择器： .class</p><p>id选择器： #id</p><p>并列选择器：selector1 , selector2</p><p>后代选择器： 父 空格(所有后代)、父&gt;(儿子后代)</p><p>兄弟选择器： ~ (所有兄弟)</p><p>相邻兄弟选择器： +  (必须是相邻兄弟)</p><h3 id="标签使用哪个CSS样式进行渲染的三个原则："><a href="#标签使用哪个CSS样式进行渲染的三个原则：" class="headerlink" title="标签使用哪个CSS样式进行渲染的三个原则："></a>标签使用哪个CSS样式进行渲染的三个原则：</h3><p>​    1、就近原则： 哪个样式里标签更近就用哪个</p><p>​    2、具体性原则： #id选择器 &gt; .class选择器 &gt; 标签选择器 &gt; 通配符选择器</p><p>​    3、重要性原则： !important</p><h3 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h3><p>CSS模型：Box Model （盒模型 ） ——  由内到外：</p><p>内容 - padding - border - background-image - background-color - margin</p><h3 id="标签常用的CSS样式"><a href="#标签常用的CSS样式" class="headerlink" title="标签常用的CSS样式"></a>标签常用的CSS样式</h3><h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><p><code>border</code> 设置对象边框的特性</p><p><code>border-color</code> 设置或检索对象的边框颜色</p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p><code>font-size</code> 设置字体大小</p><p><code>font-family</code> 规定文本的字体</p><p><code>font-style</code> 规定文本的字体样式</p><p><code>font-weight</code> 规定字体的粗细</p><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><p><code>color</code> 指定文本的颜色</p><p><code>line-height</code> 设置行高</p><p><code>text-align</code> 规定文本的水平对齐方式</p><p><code>text-decoration</code> 规定添加到文本的装饰效果</p><h4 id="内外边距"><a href="#内外边距" class="headerlink" title="内外边距"></a>内外边距</h4><p><code>padding</code> 简写属性在一个声明中设置所有填充属性。该属性可以有1到4个值 <code>padding-top</code> <code>padding-right</code> <code>padding-bottom</code> <code>padding-left</code> </p><p><code>margin</code> 在一个声明中设置所有外边距属性，该属性可以有1到4个值 <code>margin-top</code>  <code>margin-right</code>  <code>margin-bottom</code>  <code>margin-left</code> </p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p><code>background-color</code> 设置或检索对象的背景颜色 </p><p><code>background-image</code> 设置或检索对象的背景图像</p><h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><p><code>display: none</code> 此元素不会被显示。</p><p><code>display: block</code> 此元素将显示为块级元素，此元素前后会带有换行符。</p><p><code>display: inline</code> 此元素会被显示为内联元素，元素前后没有换行符。</p><p><code>display: inline-block</code> 此元素会被显示为行内块元素，可以设置宽度、高度等，元素前后没有换行符。</p><p>具有<code>hidden</code> 属性的元素是不可见的。</p><h3 id="CSS-定位"><a href="#CSS-定位" class="headerlink" title="CSS 定位"></a>CSS 定位</h3><p><code>position: static</code>    正常文档流</p><p><code>position: relative</code>   相对定位（相对于元素原来的位置，没有脱离文档流，对周围元素没有影响）</p><p><code>position: absolute</code>   绝对定位（相对于父元素来设定位置，脱离了文档流，对周围元素有影响）</p><p><code>position: fixed</code>   固定定位（相对于浏览器窗口来设定位置，脱离了文档流）</p><h3 id="CSS-设置字符集"><a href="#CSS-设置字符集" class="headerlink" title="CSS 设置字符集"></a>CSS 设置字符集</h3><p><code>@charset : utf-8</code></p><p>CSS 设置字体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">  font-family： ‘字体名称’</span><br><span class="line">  src：url(字体资源路径)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-hack-technology-（CSS黑科技）"><a href="#CSS-hack-technology-（CSS黑科技）" class="headerlink" title="CSS hack technology （CSS黑科技）"></a>CSS hack technology （CSS黑科技）</h3><p>z-index 索引，当脱离文档流时，元素显示优先级冲突，设置元素z-index属性值越大就渲染在越上方</p><p>在有浮动的情况下 ，为了让父级元素计算出它的高度的方法：</p><p>1、<code>clear:both</code> 清除浮动  </p><p>2、在父元素的样式中加入 <code>overflow：auto</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML-CSS总结&quot;&gt;&lt;a href=&quot;#HTML-CSS总结&quot; class=&quot;headerlink&quot; title=&quot;HTML+CSS总结&quot;&gt;&lt;/a&gt;HTML+CSS总结&lt;/h1&gt;&lt;p&gt;Web前端主要包含三部分内容：&lt;/p&gt;
&lt;p&gt;1、Tag：HTML标签，用来
      
    
    </summary>
    
      <category term="Web前端" scheme="http://alexyanglong.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML" scheme="http://alexyanglong.github.io/tags/HTML/"/>
    
      <category term="CSS" scheme="http://alexyanglong.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（14）——进程和线程</title>
    <link href="http://alexyanglong.github.io/2018/04/20/Python%E5%9F%BA%E7%A1%80%EF%BC%8814%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
    <id>http://alexyanglong.github.io/2018/04/20/Python基础（14）——进程和线程/</id>
    <published>2018-04-19T16:00:00.000Z</published>
    <updated>2018-06-05T02:05:10.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础（14）——进程和线程"><a href="#Python基础（14）——进程和线程" class="headerlink" title="Python基础（14）——进程和线程"></a>Python基础（14）——进程和线程</h1><p>线程：是操作系统分配CPU的基本单元</p><p>进程：是操作系统分配内存的基本单元，一个进程由一个或多个线程构成</p><p>多进程、多线程：加速程序执行，提升性能；改善用户体验</p><p>​                  编写麻烦，调试更麻烦；对其他进程、线程不友好；占用更多资源</p><p>单进程 / 单线程模拟下载任务例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./单线程模拟下载例子.png" alt="单线程模拟下载例子" title="单线程模拟下载例子">                </div>                <div class="image-caption">单线程模拟下载例子</div>            </figure><p>多进程模拟下载任务例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./多进程模拟下载例子.png" alt="多进程模拟下载例子" title="多进程模拟下载例子">                </div>                <div class="image-caption">多进程模拟下载例子</div>            </figure><p>多线程模拟下载任务例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./多线程模拟下载例子.png" alt="多线程模拟下载例子" title="多线程模拟下载例子">                </div>                <div class="image-caption">多线程模拟下载例子</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础（14）——进程和线程&quot;&gt;&lt;a href=&quot;#Python基础（14）——进程和线程&quot; class=&quot;headerlink&quot; title=&quot;Python基础（14）——进程和线程&quot;&gt;&lt;/a&gt;Python基础（14）——进程和线程&lt;/h1&gt;&lt;p&gt;线程
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="线程" scheme="http://alexyanglong.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="进程" scheme="http://alexyanglong.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python基础（13）——网络编程入门</title>
    <link href="http://alexyanglong.github.io/2018/04/17/Python%E5%9F%BA%E7%A1%80%EF%BC%8813%EF%BC%89%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://alexyanglong.github.io/2018/04/17/Python基础（13）——网络编程入门/</id>
    <published>2018-04-16T16:00:00.000Z</published>
    <updated>2018-06-05T02:04:54.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础（13）——网络编程入门"><a href="#Python基础（13）——网络编程入门" class="headerlink" title="Python基础（13）——网络编程入门"></a>Python基础（13）——网络编程入门</h1><h2 id="基于传输层协议的套接字编程"><a href="#基于传输层协议的套接字编程" class="headerlink" title="基于传输层协议的套接字编程"></a>基于传输层协议的套接字编程</h2><p>套接字这个词对很多不了解网络编程的人来说显得非常晦涩和陌生，其实说得通俗点，套接字就是一套用<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">C语言</a>写成的应用程序开发库，主要用于实现进程间通信和网络编程，在网络应用开发中被广泛使用。在Python中也可以基于套接字来使用传输层提供的传输服务，并基于此开发自己的网络应用。实际开发中使用的套接字可以分为三类：流套接字（TCP套接字）、数据报套接字和原始套接字。</p><h3 id="TCP套接字"><a href="#TCP套接字" class="headerlink" title="TCP套接字"></a>TCP套接字</h3><p>所谓TCP套接字就是使用TCP协议提供的传输服务来实现网络通信的编程接口。在Python中可以通过创建socket对象并指定type属性为SOCK_STREAM来使用TCP套接字。由于一台主机可能拥有多个IP地址，而且很有可能会配置多个不同的服务，所以作为服务器端的程序，需要在创建套接字对象后将其绑定到指定的IP地址和端口上。这里的端口并不是物理设备而是对IP地址的扩展，用于区分不同的服务，例如我们通常将HTTP服务跟80端口绑定，而MySQL数据库服务默认绑定在3306端口，这样当服务器收到用户请求时就可以根据端口号来确定到底用户请求的是HTTP服务器还是数据库服务器提供的服务。端口的取值范围是0~65535，而1024以下的端口我们通常称之为“著名端口”（留给像FTP、HTTP、SMTP等“著名服务”使用的端口，有的地方也称之为“周知端口”），自定义的服务通常不使用这些端口，除非自定义的是HTTP或FTP这样的著名服务。</p><p>TCP提供了可靠地数据传输，主要基于以下机制：</p><p>​    1、可靠通信[数据不传丢也不传错] 滑动窗口机制 </p><p>​    2、流量控制(自动调节发送数据的速度 </p><p>​    3、拥塞控制(网络拥堵时会降低发送速度)</p><p>服务器端程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM, SOCK_DGRAM</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1、创建套接字对象，并指定使用哪种传输服务</span></span><br><span class="line">    <span class="comment"># AF_INET：IPV4 AF_INET6：IPV6  SOCK_STREAM: TCP  SOCK_DGRAM: UDP  SOCK_RAW: 原始套接字</span></span><br><span class="line">    server_socket = socket(family=AF_INET, type=SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 2、绑定IP地址和端口，建议使用 1024 以后的端口</span></span><br><span class="line">    print(<span class="string">'正在绑定IP地址和端口......'</span>)</span><br><span class="line">    server_socket.bind((<span class="string">'10.7.152.89'</span>, <span class="number">9999</span>))</span><br><span class="line">    print(<span class="string">'服务器绑定IP地址和端口成功'</span>)</span><br><span class="line">    <span class="comment"># 3、启动监听 监听客户端有没有连接到服务器  512：历史经验最佳值</span></span><br><span class="line">    print(<span class="string">'正在启动服务器......'</span>)</span><br><span class="line">    server_socket.listen(<span class="number">512</span>)</span><br><span class="line">    print(<span class="string">'服务器启动成功'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4、等待连接 通过循环等待客户端连接并作出相应处理</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># 阻塞并等待连接</span></span><br><span class="line">        client_socket, addr = server_socket.accept()</span><br><span class="line">        print(str(addr) + <span class="string">'连接到了服务器.'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5、发送数据</span></span><br><span class="line">        client_socket.send(str(datetime.now()).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="comment"># 6、断开连接</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>客户端程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1、创建套接字 socket</span></span><br><span class="line">    client_socket = socket(family=AF_INET, type=SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 2、连接服务器</span></span><br><span class="line">    client_socket.connect((<span class="string">'10.7.152.89'</span>, <span class="number">9999</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3、循环发送和接收信息</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        info = client_socket.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        print(info)</span><br><span class="line">        <span class="comment"># client_socket.close()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="UDP套接字"><a href="#UDP套接字" class="headerlink" title="UDP套接字"></a>UDP套接字</h3><p>传输层除了有可靠的传输协议TCP之外，还有一种非常轻便的传输协议叫做用户数据报协议，简称UDP。TCP和UDP都是提供端到端传输服务的协议，二者的差别就如同打电话和发短信的区别，后者不对传输的可靠性和可达性做出任何承诺从而避免了TCP中握手和重传的开销，所以在强调性能和而不是数据完整性的场景中（例如传输网络音视频数据），UDP可能是更好的选择。可能大家会注意到一个现象，就是在观看网络视频时，有时会出现卡顿，有时会出现花屏，这无非就是部分数据传丢或传错造成的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python基础（13）——网络编程入门&quot;&gt;&lt;a href=&quot;#Python基础（13）——网络编程入门&quot; class=&quot;headerlink&quot; title=&quot;Python基础（13）——网络编程入门&quot;&gt;&lt;/a&gt;Python基础（13）——网络编程入门&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://alexyanglong.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://alexyanglong.github.io/tags/Python/"/>
    
      <category term="TCP编程" scheme="http://alexyanglong.github.io/tags/TCP%E7%BC%96%E7%A8%8B/"/>
    
      <category term="套接字编程" scheme="http://alexyanglong.github.io/tags/%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
