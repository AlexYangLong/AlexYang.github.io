<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Python第一阶段（一）</title>
      <link href="/2018/05/26/Python%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/05/26/Python%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Python第一阶段（一）"><a href="#Python第一阶段（一）" class="headerlink" title="Python第一阶段（一）"></a>Python第一阶段（一）</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p><p>硬性规则： </p><p>​    1、变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头；</p><p>​    2、大小写敏感（大写的 a 和小写的 A 是两个不同的变量）；</p><p>​    3、不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</p><p>PEP 8要求：</p><p>​    1、用小写字母拼写，多个单词用下划线连接；</p><p>​    2、受保护的实例属性用单个下划线开头；</p><p>​    3、私有的实例属性用两个下划线开头。</p><p>当然，给变量（事实上应该是所有的标识符）命名做到见名知意也是非常重要的。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多中类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，部分如下：</p><p>整型（int）：Python中可以处理任意大小的整数（Python 2.x中有int和long两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如<code>0b100</code>，换算成十进制是<code>4</code>）、八进制（如<code>0o100</code>，换算成十进制是<code>64</code>）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是<code>256</code>）的表示法。</p><p>浮点型（float）：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</p><p>字符串型（str）：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</p><p>布尔型（bool）：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如<code>3 &lt; 5</code>会产生布尔值<code>True</code>，而<code>2 == 1</code>会产生布尔值<code>False</code>）。</p><p>复数型（complex）：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的 <code>i</code> 换成了 <code>j</code> 。</p><p>数据类型之间的转换：</p><p><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</p><p><code>float()</code>：将一个字符串转换成浮点数。</p><p><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</p><p><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</p><p><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</p><h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1.png" alt="img" title="运算符优先级">                </div>                <div class="image-caption">运算符优先级</div>            </figure><p>赋值表达式： 变量 = 表达式</p><p>表达式为真的情况: <code>not 0</code> <code>-1</code> 等为真</p><p>表达式为假的情况: <code>0</code> <code>&#39;&#39;</code> <code>None</code>  <code>False</code> <code>[]</code> <code>()</code>  <code>{}</code></p><h3 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h3><p>1、将华氏温度转换为摄氏温度  <code>F = 1.8 * C + 32</code>，F表示华氏温度，C表示摄氏温度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = float(input(&apos;请输入华氏温度: &apos;))</span><br><span class="line">c = (f - 32) / 1.8</span><br><span class="line">print(&apos;%.1f华氏度 = %.1f摄氏度&apos; % (f, c))</span><br></pre></td></tr></table></figure><p>2、输入圆的半径计算计算周长和面积</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line">radius = float(input(&apos;请输入圆的半径: &apos;))</span><br><span class="line">perimeter = 2 * math.pi * radius</span><br><span class="line">area = math.pi * radius * radius</span><br><span class="line">print(&apos;周长: %.2f&apos; % perimeter)</span><br><span class="line">print(&apos;面积: %.2f&apos; % area)</span><br></pre></td></tr></table></figure><p>3、输入年份判断是不是闰年，是则输出 <code>True</code>，否则输出 <code>False</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">year = int(input(&apos;请输入年份: &apos;))</span><br><span class="line"># 如果代码太长写成一行不便于阅读 可以使用\或()折行</span><br><span class="line">is_leap = (year % 4 == 0 and year % 100 != 0 or year % 400 == 0)</span><br><span class="line">print(is_leap)</span><br></pre></td></tr></table></figure><h2 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h2><p>列表是一个有序集合，下面是一些list的操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个空列表</span><br><span class="line">list1 = []</span><br><span class="line">print(list1)</span><br><span class="line">print(type(list1))</span><br><span class="line"># 创建带有元素的列表</span><br><span class="line">list2 = [1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">print(list2)</span><br><span class="line"># 列表元素的类型可以不同</span><br><span class="line">list3 = [12, &apos;qwe&apos;, 0.87, False, None]</span><br><span class="line">print(list3)</span><br><span class="line"># 访问列表中的元素  格式: 列表名[元素的下标] 注意：下标不能超出列表的范围，最大为len(list)-1</span><br><span class="line">list4 = [1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">print(list4[5])</span><br><span class="line"># 修改元素</span><br><span class="line">list4[3] = 10</span><br><span class="line">print(list4)</span><br><span class="line"></span><br><span class="line"># 列表的操作</span><br><span class="line"># 列表拼接</span><br><span class="line">list5 = [1, 2, 3, 4]</span><br><span class="line">list6 = [5, 6, 7]</span><br><span class="line">list7 = list5 + list6</span><br><span class="line">print(list7)</span><br><span class="line"># 列表的重复</span><br><span class="line">list8 = [4, 5, 6]</span><br><span class="line">print(list8 * 3)</span><br><span class="line"># 判断一个元素是否在列表中</span><br><span class="line">list9 = [1, 2, 3, 4, 5, 6]</span><br><span class="line"># 返回的结果是布尔值 存在为True  不存在为False</span><br><span class="line">print(7 in list9)</span><br><span class="line">print(4 in list9)</span><br><span class="line"># 截取列表 list[start:end:step]</span><br><span class="line">list10 = [1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">print(list10[:6])  # 从左截取，从头开始，到下标为5的元素</span><br><span class="line">print(list10[5:])  # 从左截取，从下标为5的元素，到末尾</span><br><span class="line">print(list10[::-1])  # 将list倒序排列</span><br><span class="line">print(list10[::-2])  # 从右截取，末尾开始，每隔一个元素截取一个</span><br><span class="line"># 二维列表</span><br><span class="line">list11 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span><br><span class="line"># 获取元素</span><br><span class="line">print(list11[0][0])</span><br><span class="line"># 列表的方法</span><br><span class="line"># append(): 在列表的末尾添加一个元素</span><br><span class="line">list1 = [1, 2, 3, 4, 5, 6]</span><br><span class="line">list1.append(8)</span><br><span class="line">print(list1)</span><br><span class="line">list1.append([7, 9, 10])</span><br><span class="line">print(list1)</span><br><span class="line"># extend(): 在列表的末尾一次性追加另外一个列表中的多个值</span><br><span class="line">list2 = [1, 2, 3, 4, 5, 6]</span><br><span class="line">list2.extend([200, 300, 400])</span><br><span class="line">print(list2)</span><br><span class="line">#insert(index, val):在指定下标处添加一个元素,原来此处的元素往后移动  index：表示列表下标，val：表示下标对应的值</span><br><span class="line">list3 = [1, 2, 3, 4]</span><br><span class="line">list3.insert(1, 250)</span><br><span class="line">print(list3)</span><br><span class="line"># pop([index]):将列表中指定下标的元素删除, 如果不传递参数,则删除的是最后一个元素  index：表示列表下标，返回值：删除的该元素</span><br><span class="line">list4 = [1, 2, 3, 4, 5, 6]</span><br><span class="line">print(list4.pop())</span><br><span class="line">list4.pop()</span><br><span class="line">print(list4)</span><br><span class="line">list4.pop(1)</span><br><span class="line">print(list4)</span><br><span class="line"># remove(val): 移除列表中指定的元素，从左开始，移除第一个  val：表示列表中的值</span><br><span class="line">list5 = [3, 4, 5, 6, 3, 7]</span><br><span class="line">list5.remove(3)</span><br><span class="line"># list5.remove(3)</span><br><span class="line">print(list5)</span><br><span class="line"># clear(): 清除列表中所有的元素</span><br><span class="line">list6 = [1, 2, 3, 4, 5, 6]</span><br><span class="line">list6.clear()</span><br><span class="line">print(list6)</span><br><span class="line"># index(val): 获取列表中该元素所对应的下标  val：列表中的某一个元素  返回值：列表中元素所对应的下标</span><br><span class="line">list7 = [1, 2, 3, 4, 5, 6]</span><br><span class="line">index1 = list7.index(3)</span><br><span class="line">print(index1)</span><br><span class="line"># len(list): 获取列表的长度</span><br><span class="line">print(len([1, 2, 3, 4, 5, 6]))</span><br><span class="line"># max(list): 获取列表中的最大值</span><br><span class="line">print(max([1, 2, 3, 4, 5, 6]))</span><br><span class="line"># min(list): 获取列表中的最小值</span><br><span class="line">print(min([1, 2, 3, 4, 5, 6]))</span><br><span class="line"># count(val): 计算列表中元素出现的次数  val：列表中的某一个元素</span><br><span class="line">list8 = [1, 3, 4, 3, 3, 3, 3, 6, 7]</span><br><span class="line">print(list8.count(3))</span><br><span class="line"># reverse(): 将列表进行倒序排列</span><br><span class="line">list9 = [1, 2, 3, 4, 5, 10, 7, 8, 9]</span><br><span class="line">list9.reverse()</span><br><span class="line">print(list9)</span><br><span class="line"># sort(): 将列表中的元素进行升序排列</span><br><span class="line">list10 = [10, 90, 78, 23, 65, 43]</span><br><span class="line">list10.sort()</span><br><span class="line">print(list10)</span><br><span class="line"></span><br><span class="line">enumerate(list[, start = 0]):将列表中元素和其对应的下标一一展示出来</span><br><span class="line"># list: 列表</span><br><span class="line"># start: [start = 下标值]</span><br><span class="line"></span><br><span class="line">list16 = list(enumerate(list15))</span><br><span class="line">list17 = list(enumerate(list15, start = 1))</span><br><span class="line">print(list16)</span><br><span class="line">print(list17)</span><br><span class="line"></span><br><span class="line"># 循环遍历</span><br><span class="line">for i, v in list16:</span><br><span class="line">    print(i, v)</span><br></pre></td></tr></table></figure><h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组 tuple"></a>元组 tuple</h2><p>元组：也是一种有序集合，但一旦定义好之后不能修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个空元祖</span><br><span class="line">tuple1 = ()</span><br><span class="line">print(tuple1)</span><br><span class="line">print(type(tuple1))</span><br><span class="line"># tuple和list一样也可以保存任意数据类型的数据</span><br><span class="line">tuple2 = (231, 323.14, &apos;asddf&apos;, None, True)</span><br><span class="line">print(tuple2)</span><br><span class="line"># 注意：当创建的元组只有一个元素时，需要在元素后面加一个逗号</span><br><span class="line">tuple3 = (34, ) # ===&gt; tuple类型  # tuple3 = (34)  # ===&gt; int类型</span><br><span class="line">print(tuple3)</span><br><span class="line"># 获取元组的元素和list一样，通过下标来获取</span><br><span class="line">tuple4 = (1, 2, 3, 4, 5, 6)</span><br><span class="line">print(tuple4[-1])</span><br><span class="line"># 注意：元组定义好之后是不能修改的</span><br><span class="line">tuple5 = (1, 2, 3, 4, [11, 22, 33])</span><br><span class="line"># tuple5[0] = 150  # 报错</span><br><span class="line">print(tuple5[-1][-2]) #  ==&gt; print(tuple5[4][1])</span><br><span class="line"></span><br><span class="line"># 元组进行操作</span><br><span class="line"># 将两个元组合并成一个新的元组</span><br><span class="line">tuple7 = (1, 2, 3)</span><br><span class="line">tuple8 = (4, 5, 6)</span><br><span class="line">tuple9 = tuple7 + tuple8</span><br><span class="line">print(tuple9)</span><br><span class="line">print(tuple7, tuple8)</span><br><span class="line"># 将元组重复n次,最后返回一个新的元组</span><br><span class="line">tuple10 = (1, 2, 3)</span><br><span class="line">print(tuple10 * 3)</span><br><span class="line"># in 判断一个元素是否在一个元组中,如果在返回True,否则返回False</span><br><span class="line">tuple11 = (3, 5, 7)</span><br><span class="line">print(3 in tuple11)</span><br><span class="line">print(4 in tuple11)</span><br><span class="line"># 元组的截取</span><br><span class="line"># 格式: 元组名[start:end:step]</span><br><span class="line">tuple12 = (1, 2, 3, 4, 5, 6, 7, 8, 9,10)</span><br><span class="line">print(tuple12[2:5])</span><br><span class="line">print(tuple12[3:])</span><br><span class="line">print(tuple12[:3])</span><br><span class="line"># 将元组进行逆序排列</span><br><span class="line">print(tuple12[::-1])</span><br><span class="line"># 二维元组</span><br><span class="line">tuple13 = ((2, 3, 4), (5, 6, 7))</span><br><span class="line">print(tuple13)</span><br><span class="line">print(tuple13[1][1])</span><br><span class="line"></span><br><span class="line"># 元组的方法</span><br><span class="line"># len(): 求一个元组的长度</span><br><span class="line">tuple14 = (1, 2, 3, 4, 5)</span><br><span class="line">print(len(tuple14))</span><br><span class="line"># max(): 求一个元组的元素的最大值</span><br><span class="line">print(max(tuple14))</span><br><span class="line"># min(): 求一个元组的元素的最小值</span><br><span class="line">print(min(tuple14))</span><br><span class="line">#遍历</span><br><span class="line">for i in tuple14:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h2 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h2><p>在字典里边是以键值对的形式存放。key-value<br>注意事项:<br>1、在字典中键(key)的值必须是唯一<br>2、在字典中可以存放多个键值对<br>3、在字典中键(key)必须是不可变类型   字符串 、整数都可以作为键(key)<br>4、<code>list</code>和<code>tuple</code>都是有序集合, 而<code>dict</code>是无序集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 定义字典</span><br><span class="line">dict1 = &#123;&apos;Alex&apos;: 88, &apos;xiaoming&apos; : 99, &apos;Ala&apos;: 96, &apos;Tom&apos;: 85, &apos;Jhon&apos;: 77&#125;</span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line"># 元素的访问</span><br><span class="line"># 获取的方式: 字典名[key]</span><br><span class="line">print(dict1[&apos;xiaoming&apos;])</span><br><span class="line">print(dict1.get(&apos;Alex&apos;))</span><br><span class="line"># 添加元素</span><br><span class="line">dict1[&apos;HanMeimei&apos;] = 89</span><br><span class="line">print(dict1)</span><br><span class="line"># 修改</span><br><span class="line">dict1[&apos;HanMeimei&apos;] = &apos;90&apos;</span><br><span class="line">print(dict1)</span><br><span class="line"># 删除</span><br><span class="line">dict1.pop(&apos;HanMeimei&apos;)</span><br><span class="line">print(dict1)</span><br><span class="line"># 遍历</span><br><span class="line">for k in dict1:</span><br><span class="line">    print(k, dict1[k])</span><br><span class="line"># 获取字典所有的value和key</span><br><span class="line">print(dict1.values())</span><br><span class="line">print(dict1.keys())</span><br><span class="line"># 遍历value值</span><br><span class="line">for v in dict1.values():</span><br><span class="line">    print(v)</span><br><span class="line">#遍历key值</span><br><span class="line">for k in dict1.keys():</span><br><span class="line">    print(k)</span><br><span class="line">#遍历key-value值</span><br><span class="line">for k,v in dict1.items():</span><br><span class="line">    print(k, v)</span><br><span class="line">for k,v in enumerate(dict1):</span><br><span class="line">    print(k, v)</span><br></pre></td></tr></table></figure><h2 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h2><p>set(集合):类似于<code>dict</code>, 也是无序的,以key的形式存在,没有value<br>作用: 是对<code>list</code> ，<code>tuple</code>中的元素进行去重的, 求交集、并集<br>1、<code>set</code>是无序集合<br>2、<code>set</code>集合是不可改变的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># 获取set</span><br><span class="line">set1 = set([1, 2, 2, 3, 3, 3])</span><br><span class="line">print(set1)</span><br><span class="line">print(type(set1))</span><br><span class="line">set2 = set((1, 2, 3, 1, 2, 3, 4, 5))</span><br><span class="line">print(set2)</span><br><span class="line">print(type(set2))</span><br><span class="line">set3 = set(&#123;3, 4, 5, 5, 6, 3, 7&#125;)</span><br><span class="line">print(set3)</span><br><span class="line">print(type(set3))</span><br><span class="line"></span><br><span class="line"># 添加</span><br><span class="line">set4 = set([1, 2, 2, 3, 3, 3])</span><br><span class="line">set4.add(55)  # add() #可以添加重复的值,但是没效果</span><br><span class="line"></span><br><span class="line"># set4.add([10, 9]) #直接报错,不能添加list</span><br><span class="line">set4.add((10, 9))</span><br><span class="line"># set4.add(&#123;&apos;a&apos;:1&#125;) #直接报错,不能添加字典</span><br><span class="line"># 总结:list和dict是可改变的, 而tuple是不可改变</span><br><span class="line">print(set4)</span><br><span class="line"></span><br><span class="line"># 修改</span><br><span class="line">set5 = set([1, 2, 3, 4, 5])</span><br><span class="line"># 将list dict tuple 等等整个插入进去</span><br><span class="line">set5.update([6, 7, 8])</span><br><span class="line">set5.update(&#123;9 : &apos;a&apos;, 10 : &apos;b&apos;&#125;)  #注意：插入字典时，是将key插进去</span><br><span class="line">set5.update((11, 56))</span><br><span class="line">print(set5)</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">set6= set([1, 2, 3, 4, 5])</span><br><span class="line">set6.remove(4)</span><br><span class="line">print(set6)</span><br><span class="line"></span><br><span class="line"># 遍历</span><br><span class="line">set7 = set((231, 323.14, &apos;asddf&apos;, None, True))</span><br><span class="line">for i in set7:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"># 交集  &amp;  并集  |  差集 -  对称差 ^</span><br><span class="line">set8 = set([1, 2, 3, 4])</span><br><span class="line">set9 = set([3, 4, 5, 6])</span><br><span class="line">set10 = set8 &amp; set9</span><br><span class="line">set11 = set8 | set9</span><br><span class="line">print(set10)</span><br><span class="line">print(type(set10))</span><br><span class="line">print(set11)</span><br><span class="line">print(type(set11))</span><br></pre></td></tr></table></figure><h2 id="list、tuple、dict、set之间的转换"><a href="#list、tuple、dict、set之间的转换" class="headerlink" title="list、tuple、dict、set之间的转换"></a>list、tuple、dict、set之间的转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#list-set</span><br><span class="line">list1 = [1, 2, 3, 4, 4, 5, 5]</span><br><span class="line">set1 = set(list1)</span><br><span class="line">print(set1)</span><br><span class="line">print(type(set1))</span><br><span class="line"></span><br><span class="line"># set-&gt;list</span><br><span class="line">set2 = &#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">list2 = list(set2)</span><br><span class="line">print(list2)</span><br><span class="line">print(type(list2))</span><br><span class="line"></span><br><span class="line"># tuple-&gt;set</span><br><span class="line">tuple1 = (1, 2, 3, 4, 5, 6, 6, 6)</span><br><span class="line">set3 = set(tuple1)</span><br><span class="line">print(set3)</span><br><span class="line">print(type(set3))</span><br><span class="line"></span><br><span class="line"># set-&gt;tuple</span><br><span class="line">set4 = &#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">tuple2 = tuple(set4)</span><br><span class="line">print(tuple2)</span><br><span class="line">print(type(tuple2))</span><br><span class="line"></span><br><span class="line"># dict-&gt;set</span><br><span class="line">dict1 = &#123;&apos;Alex&apos;: 88, &apos;xiaoming&apos; : 99, &apos;Ala&apos;: 96, &apos;Tom&apos;: 85, &apos;Jhon&apos;: 77&#125;</span><br><span class="line">set5 = set(dict1)</span><br><span class="line">print(set5)</span><br><span class="line">print(type(set5))</span><br><span class="line"></span><br><span class="line"># set-dict  注意：set不能转换成dict，因为set只有key，而dict是key-value形式存储的</span><br><span class="line"># set6 = &#123;2, 3, 4, 5&#125;</span><br><span class="line"># dict2 = dict(set6)</span><br><span class="line"># print(dict2)</span><br></pre></td></tr></table></figure><h2 id="流程控制：分支与循环"><a href="#流程控制：分支与循环" class="headerlink" title="流程控制：分支与循环"></a>流程控制：分支与循环</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。</p><p>结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if 表达式1:</span><br><span class="line">语句1</span><br><span class="line">elif 表达式2:</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line">else:</span><br><span class="line">语句n</span><br></pre></td></tr></table></figure><p>练习：英制单位与公制单位互换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">value = float(input(&apos;请输入长度:&apos;))</span><br><span class="line">unit = input(&apos;请输入单位:&apos;)</span><br><span class="line">if unit == &apos;in&apos; or unit == &apos;英寸&apos;:</span><br><span class="line">    print(&apos;%f英寸 = %f厘米&apos; % (value, value * 2.54))</span><br><span class="line">elif unit == &apos;cm&apos; or unit == &apos;厘米&apos;:</span><br><span class="line">    print(&apos;%f厘米 = %f英寸&apos; % (value, value / 2.54))</span><br><span class="line">else:</span><br><span class="line">    print(&apos;请输入有效的单位&apos;)</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>构造循环语句要使用 <code>for...in...</code> 或者 <code>while</code> 关键字。</p><p>1、<code>for...in...</code>结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 可迭代容器:</span><br><span class="line">语句...</span><br></pre></td></tr></table></figure><p>eg：求1-100的和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">for x in range(101):</span><br><span class="line">    sum += x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>2、<code>while</code>结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while 表达式：</span><br><span class="line">语句...</span><br></pre></td></tr></table></figure><p>eg：猜数字游戏    </p><p>​    规则：计算机出一个1~100之间的随机数由人来猜<br>​           计算机根据人猜的数字分别给出提示大一点/小一点/猜对了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">answer = random.randint(1, 100)</span><br><span class="line">counter = 0</span><br><span class="line">while True:</span><br><span class="line">    counter += 1</span><br><span class="line">    number = int(input(&apos;请输入:&apos;))</span><br><span class="line">    if number &lt; answer:</span><br><span class="line">        print(&apos;大一点&apos;)</span><br><span class="line">    elif number &gt; answer:</span><br><span class="line">        print(&apos;小一点&apos;)</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;恭喜你猜对了!&apos;)</span><br><span class="line">        break</span><br><span class="line">print(&apos;你总共猜了%d次&apos; % counter)</span><br><span class="line">if counter &gt; 7:</span><br><span class="line">    print(&apos;你的智商余额明显不足&apos;)</span><br></pre></td></tr></table></figure><p>练习：打印九九乘法表，要使用双层循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in range(1, 10):</span><br><span class="line">    for j in range(1, i + 1):</span><br><span class="line">        print(&apos;%d*%d=%d&apos; % (i, j, i * j), end=&apos;\t&apos;)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>git install</title>
      <link href="/2018/05/25/git-install/"/>
      <url>/2018/05/25/git-install/</url>
      <content type="html"><![CDATA[<h1 id="git构建安装"><a href="#git构建安装" class="headerlink" title="git构建安装"></a>git构建安装</h1><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>1、下载git</p><p>wget <a href="https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz" target="_blank" rel="noopener">https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz</a></p><p>2、解归档</p><p>tar zxvf git-2.9.5.tar.gz</p><p>3、安装</p><p>cd git-2.9.5</p><p>./configure</p><p>make</p><p>make install</p><h3 id="安装过程中出现报错，以及解决办法"><a href="#安装过程中出现报错，以及解决办法" class="headerlink" title="安装过程中出现报错，以及解决办法"></a>安装过程中出现报错，以及解决办法</h3><h4 id="错误一："><a href="#错误一：" class="headerlink" title="错误一："></a>错误一：</h4><p>usr/bin/perl Makefile.PL PREFIX=’/usr/local/git’ INSTALL_BASE=’’ –localedir=’/usr/local/git/share/locale’</p><p>　　Can’t locate ExtUtils/MakeMaker.pm in @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 　　/usr/share/perl5 .) at Makefile.PL line 3.</p><p>　　BEGIN failed–compilation aborted at Makefile.PL line 3.</p><p>　　make[1]: *** [perl.mak] Error 2</p><p>　　make: *** [perl/perl.mak] Error 2</p><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p>yum install perl-ExtUtils-MakeMaker package</p><h4 id="错误二："><a href="#错误二：" class="headerlink" title="错误二："></a>错误二：</h4><p>/bin/sh: msgfmt: command not found</p><h4 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h4><p>yum install gettext-devel</p><h4 id="错误三："><a href="#错误三：" class="headerlink" title="错误三："></a>错误三：</h4><p>make时出现：Can’t locate ExtUtils/MakeMaker.pm in @INC</p><h4 id="解决办法：-2"><a href="#解决办法：-2" class="headerlink" title="解决办法："></a>解决办法：</h4><p>yum -y install perl-devel perl-CPAN</p><h4 id="错误四："><a href="#错误四：" class="headerlink" title="错误四："></a>错误四：</h4><p>make时出现：tclsh failed; using unoptimized loading</p><p>MSGFMT    po/bg.msg make[1]: *** [po/bg.msg] 错误 127</p><h4 id="解决办法：-3"><a href="#解决办法：-3" class="headerlink" title="解决办法："></a>解决办法：</h4><p>yum install tcl  build-essential tk gettext</p><h4 id="错误五："><a href="#错误五：" class="headerlink" title="错误五："></a>错误五：</h4><p>error： zlib.h:no such file or directory</p><h4 id="解决办法：-4"><a href="#解决办法：-4" class="headerlink" title="解决办法："></a>解决办法：</h4><p>构建安装zlib</p><p>wget <a href="https://netix.dl.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gz" target="_blank" rel="noopener">https://netix.dl.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gz</a></p><p>tar -vxf lib-1.2.11.tar.gz</p><p>/usr/local/src/zlib-1.2.11</p><p>构建静态库</p><p>./configure</p><p>make test</p><p>make install</p><p>构建共享库</p><p>make clean</p><p> ./configure –shared</p><p> make test</p><p>make install</p><p>cp zutil.h /usr/local/include</p><p>cp zutil.c /usr/local/include</p><h4 id="错误六："><a href="#错误六：" class="headerlink" title="错误六："></a>错误六：</h4><p>configure: error: in <code>/root/msmtp-1.4.20&#39;:**configure: error: no acceptable C compiler found in $PATH**See</code>config.log’ for more details.</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>yum install gcc</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/25/hello-world/"/>
      <url>/2018/05/25/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag: [test1, test2]</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
  
  
</search>
