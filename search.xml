<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Python第二阶段（一）</title>
      <link href="/2018/05/26/Python%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/05/26/Python%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Python第二阶段（一）"><a href="#Python第二阶段（一）" class="headerlink" title="Python第二阶段（一）"></a>Python第二阶段（一）</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>HTML 是用来描述网页的一种语言。</p><p>1、Tag: Content 装内容装数据</p><p>2、CSS: Display 渲染,显示</p><p>3、JavaScript: Behavior 交互,行为</p><ul><li>HTML 指的是超文本标记语言: Hyper Text Markup Language</li><li>HTML 不是一种编程语言，而是一种标记语言</li><li>标记语言是一套标记标签 (markup tag)</li><li>HTML 使用标记标签来描述网页</li><li>HTML 文档包含了HTML 标签及文本 内容</li><li>HTML文档也叫做web 页面</li></ul><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>内部样式表：多用于首页。  加载快</p><p>外部样式表：用于其他页面。  所有页面可以共享同一个样式，便于风格统一；使内容和显示分离</p><p>内嵌（行内）样式表：不常用</p><h3 id="CSS选择样式三原则："><a href="#CSS选择样式三原则：" class="headerlink" title="CSS选择样式三原则："></a>CSS选择样式三原则：</h3><p>1、就近原则： </p><p>2、具体性原则： #id选择器 &gt; .class选择器 &gt; 标签选择器 &gt; 通配符选择器</p><p>3、重要性原则： !important</p><p>CSS模型：Box Model （盒模型 ） ——  由内到外：</p><p>内容 - padding - border - background-image - background-color - margin</p><h3 id="CSS选择器："><a href="#CSS选择器：" class="headerlink" title="CSS选择器："></a>CSS选择器：</h3><p>通配符选择器： *</p><p>标签选择器： &lt;标签名&gt;</p><p>类选择器： .class</p><p>id选择器： #id</p><p>并列选择器：selector1 , selector2</p><p>后代选择器： 父 空格(所有后代)、父&gt;(儿子后代)</p><p>兄弟选择器： ~ (所有兄弟)</p><p>相邻兄弟选择器： +  (必须是相邻兄弟)</p><h3 id="边框和轮廓"><a href="#边框和轮廓" class="headerlink" title="边框和轮廓"></a>边框和轮廓</h3><p>border 设置对象边框的特性</p><p><code>border-collapse : collapse</code> 设置表格的边框合并为一个单一的边框</p><p><code>border-color</code> 设置或检索对象的边框颜色</p><p><code>outline</code> 设置或检索对象外的线条轮廓。</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p><code>font-size</code> 设置字体大小</p><p><code>font-family</code> 规定文本的字体</p><p><code>font-style</code> 规定文本的字体样式</p><p><code>font-weight</code> 规定字体的粗细</p><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p><code>color</code> 指定文本的颜色</p><p><code>line-height</code> 设置行高</p><p><code>text-align</code> 规定文本的水平对齐方式</p><p><code>text-decoration</code> 规定添加到文本的装饰效果，：none取消下划线</p><h3 id="内外边距"><a href="#内外边距" class="headerlink" title="内外边距"></a>内外边距</h3><p><code>padding</code> 简写属性在一个声明中设置所有填充属性。该属性可以有1到4个值</p><p><code>margin</code> 在一个声明中设置所有外边距属性，该属性可以有1到4个值</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><code>background-color</code> 设置或检索对象的背景颜色 </p><p><code>background-image</code> 设置或检索对象的背景图像</p><h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h3><p><code>display: none</code> 此元素不会被显示。</p><p><code>display: block</code> 此元素将显示为块级元素，此元素前后会带有换行符。</p><p><code>display: inline</code> 此元素会被显示为内联元素，元素前后没有换行符。</p><p>具有<code>hidden</code> 属性的元素是不可见的。</p><h3 id="CSS-定位："><a href="#CSS-定位：" class="headerlink" title="CSS 定位："></a>CSS 定位：</h3><p><code>position: static</code>    正常文档流</p><p><code>position: relative</code>   相对定位（相对于元素原来的位置，没有脱离文档流，对周围元素没有影响）</p><p><code>position: absolute</code>   绝对定位（相对于父元素来设定位置，脱离了文档流，对周围元素有影响）</p><p><code>position: fixed</code>   固定定位（相对于浏览器窗口来设定位置，脱离了文档流）</p><h3 id="CSS-hack-technology-（CSS黑科技）"><a href="#CSS-hack-technology-（CSS黑科技）" class="headerlink" title="CSS hack technology （CSS黑科技）"></a>CSS hack technology （CSS黑科技）</h3><p>z-index索引  当脱离文档流时  元素冲突  设置z-index 值越大就渲染在越上方</p><p>在有浮动的情况下 ，为了让父级元素计算出它的高度的方法：</p><p>1、<code>clear:both</code> 清除浮动  </p><p>2、在父元素的样式中加入 <code>overflow：auto</code></p><h3 id="CSS-设置字符集"><a href="#CSS-设置字符集" class="headerlink" title="CSS 设置字符集"></a>CSS 设置字符集</h3><p><code>@charset : utf-8</code></p><p>CSS 设置字体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">  font-family： ‘字体名称’</span><br><span class="line">  src：url(字体资源路径)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>JavaScript : JS - Behavior</p><p>​    ECMAScript  -  语法规范  -  ES5</p><p>​    BOM  -  浏览器对象模型  -  window</p><p>​    DOM  -  文档对象模型  -  document</p><h3 id="JavaScript-数据类型-："><a href="#JavaScript-数据类型-：" class="headerlink" title="JavaScript 数据类型 ："></a>JavaScript 数据类型 ：</h3><p>JavaScript 有隐式的类型转换。</p><p>​    简单数据类型： <code>number</code>、<code>string</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code></p><p>​    复杂数据类型： <code>object</code></p><p>​    可以使用 <code>typeof()</code> 查看数据类型</p><h3 id="JavaScript-运算符："><a href="#JavaScript-运算符：" class="headerlink" title="JavaScript 运算符："></a>JavaScript 运算符：</h3><p>​    算术运算符：<code>+</code> 、<code>-</code>、 <code>*</code>、<code>/</code>、 <code>%</code> 、<code>**</code>（ES7版本）</p><p>​    赋值运算符：<code>=</code> 、<code>+=</code>、 <code>-=</code>、 <code>*=</code>、 <code>/=</code>、<code>%=</code></p><p>​    比较（关系）运算符： <code>&gt;</code>、 <code>&gt;=</code>、 <code>&lt;</code>、 <code>&lt;=</code>、 <code>==</code>、 <code>!=</code> 、<code>===</code>（不带隐式类型转换的等于，全等于）、<code>!==</code>（严格不等于）</p><p>​    逻辑运算符： <code>&amp;&amp;</code>（短路与）、 <code>||</code>（短路或）、 <code>!</code></p><p>​    自增自减运算符： <code>++</code> 、<code>--</code></p><p>​    位运算、成员运算</p><h3 id="编程范式（理念）："><a href="#编程范式（理念）：" class="headerlink" title="编程范式（理念）："></a>编程范式（理念）：</h3><p>面向对象编程</p><p>函数式编程</p><h3 id="JS中的全局函数："><a href="#JS中的全局函数：" class="headerlink" title="JS中的全局函数："></a>JS中的全局函数：</h3><p><code>isNaN()</code>  是不是 不是一个数</p><p><code>parseInt()</code>  取整，如果取不出，返回<code>NaN</code></p><p><code>parseFloat()</code>  取小数，如果取不出，返回<code>NaN</code></p><p><code>isFinite()</code>  是不是有限的数</p><p><code>eval()</code>  - evaluate  - XSS（跨站脚本攻击）</p><p><code>encodeURIcomponent()</code>  编成 百分号 编码</p><p><code>decodeURIcomponent()</code>  从百分号编码 解码</p><h3 id="获取对象："><a href="#获取对象：" class="headerlink" title="获取对象："></a>获取对象：</h3><p>获取引发事件的对象元素：</p><p><code>document.getElementById(#id)</code></p><p><code>document.getElementByClassName(.class)</code></p><p><code>document.getElementByTagName(标签)</code></p><p><code>querySelector()</code> ： 根据指定的选择器查找单个元素</p><p><code>querySelectorAll()</code> ： 根据指定的选择器查找所有元素</p><p><code>this</code>  // this 当前对象元素</p><p>// <code>evt</code> 表示当前事件，<code>evt.target</code> 表示引发当前事件的事件源</p><p>//  需要在函数参数中 传入<code>evt</code> 对象</p><p><code>evt = evt || window.event;  // 兼容低版本的IE</code></p><p><code>var target = evt.target || evt.srcElement;</code></p><p>在定义函数时，如果没有传入参数，那么函数中有一个隐藏的 arguments 对象，它代表了参数的列表，在调用时，可以传入任意多个参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function foo()&#123;</span><br><span class="line">for (var i = 0;i &lt; arguments.length;i++)&#123;</span><br><span class="line">alert(arguments[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的兼容函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">// 用cacheId 来缓存已经获取过的元素</span><br><span class="line">var cacheId = &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 根据id获取元素</span><br><span class="line"> * @param &#123;Object&#125; id 元素的id</span><br><span class="line"> */</span><br><span class="line">function $(id)&#123;</span><br><span class="line">if (!cacheId[id])&#123;</span><br><span class="line">cacheId[id] = document.getElementById(id);</span><br><span class="line">&#125;</span><br><span class="line">return cacheId[id];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 给element 元素绑定事件</span><br><span class="line"> * @param &#123;Object&#125; element 元素</span><br><span class="line"> * @param &#123;Object&#125; event 要绑定的事件</span><br><span class="line"> * @param &#123;Object&#125; fn 绑定的函数</span><br><span class="line"> */</span><br><span class="line">function bindEvent(element, event, fn)&#123;</span><br><span class="line">if (element.addEventListener)&#123;</span><br><span class="line">element.addEventListener(event, fn);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">element.attachEvent(&apos;on&apos; + event, fn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 给element 元素取消绑定事件</span><br><span class="line"> * @param &#123;Object&#125; element 元素</span><br><span class="line"> * @param &#123;Object&#125; event 要取消的事件</span><br><span class="line"> * @param &#123;Object&#125; fn 要取消的函数</span><br><span class="line"> */</span><br><span class="line">function unbindEvent(element, event, fn)&#123;</span><br><span class="line">if (element.removeEventListener)&#123;</span><br><span class="line">element.removeEventListener(event, fn);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">element.detachEvent(&apos;on&apos; + event, fn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取元素的只读的样式，读取元素的样式需要通过 getComputeStype() 来获取，IE9 以下的版本使用这个 currentStyle</span><br><span class="line"> * @param &#123;Object&#125; element 元素</span><br><span class="line"> */</span><br><span class="line">function getStyle(element)&#123;</span><br><span class="line">return document.defaultView.getComputedStyle ? document.defaultView.getComputedStyle(element) : element.currentStyle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 给事件绑定处理默认行为和冒泡行为的函数，兼容了IE11以下的版本</span><br><span class="line"> * @param &#123;Object&#125; ev</span><br><span class="line"> */</span><br><span class="line">function handleEvent(ev)&#123;</span><br><span class="line">ev = ev || window.event;</span><br><span class="line">ev.preventDefault = ev.preventDefault || </span><br><span class="line">function ()&#123;</span><br><span class="line">this.returnValue = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ev.stopPropagation = ev.stopPropagation ||</span><br><span class="line">function ()&#123;</span><br><span class="line">this.cancelBubble = true;</span><br><span class="line">&#125;</span><br><span class="line">return ev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="window对象："><a href="#window对象：" class="headerlink" title="window对象："></a>window对象：</h3><p><code>document</code>  文档</p><p><code>location</code>  地址栏  - <code>href</code> / <code>reload</code> / <code>replace</code></p><p><code>history</code>  历史记录  - <code>go</code> / <code>forward</code> / <code>back</code></p><p><code>navigator</code>  浏览器</p><p><code>screen</code>  操作系统窗口  - <code>availWidth</code>/ <code>availHeight</code> / <code>width</code> / <code>height</code></p><p><code>alert</code> /<code>confirm</code> / <code>prompt</code></p><p><code>open</code> / <code>close</code></p><p><code>setTimeout</code> / <code>setInterval</code> / <code>clearTimeout</code> / <code>clearInterval</code></p><p>修改节点的内容和属性</p><p><code>textContent</code></p><p><code>innerHTML</code></p><p><code>nodeValue</code></p><p>访问成员运算符 .</p><p><code>setAttribute</code> / <code>getAttribute</code> / <code>removeAttribute</code></p><p>创建新节点</p><p><code>createElement</code></p><p>追加新节点</p><p><code>appendChild</code></p><p><code>insertBefore</code></p><p>移除子节点</p><p><code>removeChild</code></p><p>通过自己节点访问父节点</p><p><code>parentNode</code></p><p>通过自己节点访问子节点</p><p><code>children</code> 所有</p><p><code>firstChild</code> 第一个</p><p><code>lastChild</code> 最后一个</p><p>通过自己节点访问兄弟节点</p><p><code>nextSibling</code>  前面的兄弟</p><p><code>prevSibling</code>  后面的兄弟</p><h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><p>jQuery的$函数的作用:</p><p>1、<code>$(function() {})</code> $() 函数传入的是一个函数，表示该函数是在页面加载完成之后要执行的回调函数</p><p>2、<code>$(selector)</code>  $() 函数传入的是一个选择器，表示通过选择器获得对应的元素，并处理成 jQuery对象，jQuery对象的本质是一个数组，如果要将jQuery对象转成原生js对象，使用下标或者<code>get()</code> 运算</p><p>3、<code>$(element)</code>  $() 函数传入的是一个原生js对象，表示将其转成jQuery对象</p><p>4、<code>$(标签)</code>  $() 函数传入的是一个标签，表示创建对应的元素并处理成jQuery对象</p><p>注意：当jQuery库和其他的库中的 <code>$函数</code> 有冲突，可以使用以下方法解决：</p><p>​    <code>jQuery.noConflict()</code>  将jQuery库中的 <code>$函数</code> 不起作用，但是jQuery库可以使用jQuery来替代 <code>$</code>，其他库可以使用 <code>$函数</code>。</p><p>查找元素</p><ul><li>选择器</li></ul><ul><li><ul><li><code>*</code> / <code>element</code> / <code>#id</code> / <code>.class</code> / <code>selector1, selector2</code></li><li><code>ancestor descendant</code> / <code>parent&gt;child</code> / <code>previous+next</code> / <code>previous~siblings</code></li></ul></li></ul><ul><li>筛选器</li></ul><ul><li><ul><li>基本筛选器：<code>:not(selector)</code>/ <code>:first</code> / <code>:last</code> / <code>:even</code> / <code>:odd</code> / <code>:eq(index)</code> / <code>:gt(index)</code> / <code>:lt(index)</code> / <code>:animated</code> / <code>:focus</code></li><li>内容筛选器：<code>:contains(&#39;…&#39;)</code>/ <code>:empty</code> / <code>:parent</code> / <code>:has(selector)</code></li><li>可见性筛选器：<code>:hidden</code> / <code>:visible</code></li><li>子节点筛选器：<code>:nth-child(expr)</code> / <code>:first-child</code> / <code>:last-child</code> / <code>:only-child</code></li><li>属性筛选器：<code>[attribute]</code> / <code>[attribute=&#39;value&#39;]</code> / <code>[attribute!=&#39;value&#39;]</code> / <code>[attribute^=&#39;value&#39;]</code> / <code>[attribute$=&#39;value&#39;]</code> / <code>[attribute|=&#39;value&#39;]</code> / <code>[attribute~=&#39;value&#39;]</code></li></ul></li></ul><ul><li>表单： <code>:input</code> / <code>:text</code> / <code>:password</code> / <code>:radio</code> / <code>:checkbox</code> / <code>:submit</code> / <code>:image</code> / <code>:reset</code> / <code>:button</code> / <code>:file</code> / <code>:selected</code> / <code>:enabled</code> / <code>:disabled</code> / <code>:checked</code></li></ul><p>执行操作</p><ul><li>内容操作</li></ul><ul><li><ul><li>获取/修改内容：<code>html()</code> / <code>text()</code> / <code>replaceWith()</code> / <code>remove()</code></li><li>获取/设置元素：<code>before()</code> / <code>after()</code> / <code>prepend()</code> / <code>append()</code> / <code>remove()</code> / <code>clone()</code> / <code>unwrap()</code> / <code>detach()</code> / <code>empty()</code> / <code>add()</code></li><li>获取/修改属性：<code>attr()</code> / <code>removeAttr()</code> / <code>addClass()</code> / <code>removeClass()</code> / <code>css()</code></li><li>获取/设置表单值：<code>val()</code></li></ul></li></ul><ul><li>查找操作</li></ul><ul><li><ul><li>查找方法：<code>find()</code> / <code>parent()</code> / <code>children()</code> / <code>siblings()</code> / <code>next()</code> / <code>nextAll()</code> / <code>prev()</code> / <code>prevAll()</code></li><li>筛选器：<code>filter()</code> / <code>not()</code> / <code>has()</code> / <code>is()</code> / <code>contains()</code></li><li>索引编号：<code>eq()</code></li></ul></li></ul><ul><li>尺寸和位置</li></ul><ul><li><ul><li>尺寸相关：<code>height()</code> / <code>width()</code> / <code>innerHeight()</code> / <code>innerWidth()</code> / <code>outerWidth()</code> / <code>outerHeight()</code></li><li>位置相关：<code>offset()</code> / <code>position()</code> / <code>scrollLeft()</code> / <code>scrollTop()</code></li></ul></li></ul><ul><li>特效和动画</li></ul><ul><li><ul><li>基本动画：<code>show()</code> / <code>hide()</code> / <code>toggle()</code></li><li>消失出现：<code>fadeIn()</code> / <code>fadeOut()</code> / <code>fadeTo()</code> / <code>fadeToggle()</code></li><li>滑动效果：<code>slideDown()</code> / <code>slideUp()</code> / <code>slideToggle()</code></li><li>自定义：<code>delay()</code> / <code>stop()</code> / <code>animate()</code></li></ul></li></ul><ul><li>事件</li></ul><ul><li><ul><li>文档加载：<code>ready()</code> / <code>load()</code></li><li>用户交互：<code>on()</code> / <code>off()</code></li></ul></li></ul><h2 id="AJAX-Asynchronous-JavaScript-and-XML"><a href="#AJAX-Asynchronous-JavaScript-and-XML" class="headerlink" title="AJAX - Asynchronous JavaScript and XML"></a>AJAX - Asynchronous JavaScript and XML</h2><p>让浏览器向服务器发出异步请求(非阻塞式请求)，等服务器返回了响应数据(JSON/XML)后就可以对页面进行局部刷新，这样就可以在不中断用户体验的前提下刷新页面数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:</span><br><span class="line">type:</span><br><span class="line">data:</span><br><span class="line">datatype:</span><br><span class="line">success:function()&#123;&#125;,</span><br><span class="line">error:function()&#123;&#125;.</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python第一阶段（二）</title>
      <link href="/2018/05/26/Python%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/05/26/Python%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Python第一阶段（二）"><a href="#Python第一阶段（二）" class="headerlink" title="Python第一阶段（二）"></a>Python第一阶段（二）</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>定义函数，使用 <code>def</code> 关键字。</p><p>结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def 函数名(参数列表...):</span><br><span class="line">语句...</span><br><span class="line">return 返回值...</span><br></pre></td></tr></table></figure><p>函数的参数：</p><p>1、不定长参数： *args</p><p>2、关键字参数：**kwargs</p><p>匿名函数: 关键字 lambda  eg：qm = lambda x: x ** x</p><p>偏函数: 导入模块 import functools        </p><p>​    functools.partical()就是创建一个新的函数，不需要自行定义函数，直接将结果赋值给一个变量，而这个变量就是一个函数。这个函数的目的是将默认参数给固定住。</p><p>回调函数：定义函数时,将函数名作为参数传递过来,然后在函数里边再次调用函数。</p><p>常用函数：</p><p><code>abs()</code>: 返回数字的绝对值<br><code>max()</code>: 返回给定参数中的最大值<br><code>min()</code>:返回给定参数中最小的值<br><code>pow()</code>: 求幂(求次方)  [求3^4  <code>print(3**4)</code> 、 <code>print(pow(3, 4))</code>]<br><code>round()</code>:四舍五入,如果只有一个参数,默认不保留小数点.参数二: 小数点后保留的位数</p><p><code>import math</code><br><code>math.ceil()</code>:向上取整<br><code>math.floor()</code>:向下取整<br><code>math.sqrt()</code>:求开方<br><code>math.modf()</code>:返回参数的整数部分和小数部分</p><p><code>import random</code><br><code>random.choice()</code>:返回列表,元祖,字典中的某一个值<br><code>random.choices()</code>:返回列表,元祖,字典中的指定个数值个值 k 关键字参数<br><code>random.random()</code>:返回0-1之间的数,  [0, 1)<br><code>random.uniform()</code>:返回指定的一个区间范围的随机数 [, )<br><code>random.randint()</code>:返回指定区间范围的随机整数 [, ]<br><code>random.shuffle()</code>:将列表中的数据进行打乱排序</p><h2 id="变量作用域（LEGB）"><a href="#变量作用域（LEGB）" class="headerlink" title="变量作用域（LEGB）"></a>变量作用域（LEGB）</h2><p>L （Local） 局部作用域 </p><p>E （Enclosing） 闭包函数外的函数中 </p><p>G （Global） 全局作用域 </p><p>B （Built-in） 内建作用域</p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>本质还是函数,  一般使用装饰器来装饰其他函数。本身还是函数的调用。</p><p><code>@property</code><br><code>@属性名.setter</code></p><p>广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器是一个可以记住遍历的位置的对象。</p><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><p>迭代器有两个基本的方法：<code>__iter()__</code> 和 <code>next()</code>。</p><p>字符串，列表或元组对象都可用于创建迭代器。</p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p><code>yield</code> 函数被称为生成器（generator）, 生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器 , 每次遇到 <code>yield</code> 时函数会暂停并保存当前所有的运行信息，返回 <code>yield</code> 的值, 并在下一次执行 <code>next()</code> 方法时从当前位置继续运行。调用一个生成器函数，返回的是一个迭代器对象。</p><h2 id="IO操作"><a href="#IO操作" class="headerlink" title="IO操作"></a>IO操作</h2><p>IO操作，使用<code>open()</code> 函数，还可以使用<code>with</code>上下文关键字来确保打开的文件操作符在退出时被关闭。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(path, mode [, encoding]) as f:</span><br><span class="line">操作...</span><br></pre></td></tr></table></figure><p><code>f.read([size])</code> 从文件读取指定的字节数，如果未给定或为负则读取所有。<br><code>f.write()</code> 写文件 # 如果要写入字符串以外的数据,先将他转换为字符串<br><code>f.close()</code> 关闭文件<br><code>f.readline([size])</code> 读取整行内容,包括\n字符, 如果给定参数则从文件开始读取指定的字符个数<br><code>f.readlines([sizeint])</code> 读取所有行并返回列表，若给定<code>sizeint&gt;0</code>，返回总和大约为<code>sizeint</code>字节的行, 实际读取值可能比 <code>sizeint</code> 较大, 因为需要填充缓冲区。<br><code>f.tell()</code> 返回一个整数,表示当前文件指针的位置(就是到文件头的比特数).<br><code>f.seek(偏移量,[起始位置])</code> 用来移动文件指针 <code>#偏移量:单位:比特,可正可负起始位置:0-文件头,默认值;1-当前位置;2-文件尾</code></p><p>mode的模式：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./open()函数的mode方式详解.png" alt="open()函数的mode方式详解" title="open()函数的mode方式详解">                </div>                <div class="image-caption">open()函数的mode方式详解</div>            </figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    try语句</span><br><span class="line">except 异常类1 as 变量1:</span><br><span class="line">    异常处理语句1</span><br><span class="line">except 异常类2 as 变量2:</span><br><span class="line">    异常处理语句2</span><br><span class="line">...</span><br><span class="line">[else:</span><br><span class="line">    else语句]</span><br><span class="line">[finally:</span><br><span class="line">    finally语句]</span><br></pre></td></tr></table></figure><h2 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h2><p>os模块:在这个模块中给我们封装好了系统操作的功能函数(方法)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.getcwd() # 返回当前的工作目录 # 获取绝对路径</span><br><span class="line">os.listdir(path) # 返回指定的文件夹包含的文件或文件夹的名字的列表</span><br><span class="line">os.mkdir(path) # 在当前目录下创建新的目录</span><br><span class="line">os.rmdir(path) # 删除目录, 只能删除空目录</span><br><span class="line">os.rename(src, dst) # 对文件进行重命名</span><br><span class="line">os.stat(file) # 获取文件属性</span><br><span class="line">os.remove(file) # 删除文件 #可以将本文件删除</span><br><span class="line">os.path.join(path1, path2) # 路径拼接</span><br><span class="line">os.path.split(path) # 拆分路径 # 返回一个元组(目录, 最后一个文件/目录名称)</span><br><span class="line">os.path.splitext(path) # 获取文件的或站名</span><br><span class="line">os.path.exists(path) # 判断文件/目录是否存在</span><br><span class="line">os.path.isfile(path) # 判断是否是文件</span><br><span class="line">os.path.getsize(file) # 获取文件的大小</span><br><span class="line">os.path.dirname(path) # 获取当前文件的目录</span><br><span class="line">os.path.basename(path) # 获取当前文件/目录名</span><br></pre></td></tr></table></figure><h2 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h2><p>很多时候，数据读写不一定是文件，也可以在内存中读写，而且更快。</p><p>1、StringIO模块主要用于在内存缓冲区中读写数据。模块是用类编写的，只有一个StringIO类，所以它的可用方法都在类中。此类中的大部分函数都与对文件的操作方法类似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from io import StringIO</span><br><span class="line">&gt;&gt;&gt; f = StringIO()</span><br><span class="line">&gt;&gt;&gt; f.write(&apos;hello&apos;)</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; f.write(&apos; &apos;)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; f.write(&apos;world!&apos;)</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; print(f.getvalue())</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">**getvalue()**方法用于获得写入后的str。</span><br></pre></td></tr></table></figure><h2 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h2><p>StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from io import BytesIO</span><br><span class="line">&gt;&gt;&gt; f = BytesIO()</span><br><span class="line">&gt;&gt;&gt; f.write(&apos;中文&apos;.encode(&apos;utf-8&apos;))</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; print(f.getvalue())</span><br><span class="line">b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;</span><br></pre></td></tr></table></figure><h2 id="常用的日期和时间函数"><a href="#常用的日期和时间函数" class="headerlink" title="常用的日期和时间函数"></a>常用的日期和时间函数</h2><h3 id="time-时间"><a href="#time-时间" class="headerlink" title="time(时间)"></a>time(时间)</h3><p><code>time.localtime()</code>  获取本地时间<br><code>time.asctime()</code> / <code>time.ctime()</code> 将时间转换成用户可读时间, 返回str格式  (Thu Apr 19 23:02:35 2018)<br><code>time.strftime(&#39;%Y-%m-%d %X&#39;)</code> 字符串的格式化输出, 返回str格式 (2018-04-19 23:07:51)<br><code>time.strptime(timeObject, &#39;%Y-%m-%d %X&#39;)</code>   将字符串的时间格式转换成元祖类型的时间格式  </p><h3 id="datetime-日期"><a href="#datetime-日期" class="headerlink" title="datetime(日期)"></a>datetime(日期)</h3><p><code>datetime.datetime.now()</code> 获取当前时间<br><code>datetime.datetime(2020, 2, 2, 20, 20, 20)</code> 获取指定的时间<br><code>date1.strftime(&#39;%Y-%m-%d %X&#39;)</code>  时间字符串的格式化输出, 返回str格式</p><h3 id="calendar-日历"><a href="#calendar-日历" class="headerlink" title="calendar(日历)"></a>calendar(日历)</h3><p><code>calendar.month(2018, 4)</code> 获取指定的月份日历<br><code>calendar.calendar(2018)</code> 获取指定的年份日历</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象的三个基本特征是：封装、继承、多态。</p><h3 id="封装："><a href="#封装：" class="headerlink" title="封装："></a>封装：</h3><p>封装是实现面向对象程序设计的第一步，封装就是将数据或函数等集合在一个个的单元中（我们称之为类）。被封装的对象通常被称为抽象数据类型。 隐藏复杂的现实细节，暴露简单的调用接口。</p><p>封装的意义：封装的意义在于保护或者防止代码（数据）被我们无意中破坏。在面向对象程序设计中数据被看作是一个中心的元素并且和使用它的函数结合的很密切，从而保护它不被其它的函数意外的修改。</p><p>​    1、保护数据成员，不让类以外的程序直接访问或修改，只能通过提供的公共的接口访问==&gt;数据封装。</p><p>​    2、方法的细节对用户是隐藏的，只要接口不变，内容的修改不会影响到外部的调用者==&gt;方法封装。</p><p>​    3、当对象含有完整的属性和与之对应的方法时称为封装。</p><p>​    4、从对象外面不能直接访问对象的属性，只能通过和该属性对应的方法访问。</p><p>​    5、对象的方法可以接收对象外面的消息。</p><h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><p>从已有的类创建新类的过程 提供继承信息的称为父类(超类/基类) 得到继承信息的称为子类(派生类)。继承主要实现重用代码，节省开发时间。</p><p>​    1、在类名后边的括号里一般写的是基类的类名</p><p>​    2、子类中继承自父类(基类),则父类的成员属性和成员方法都可以被子类所继承</p><p>​    3、父类中私有的成员属性不能继承给子类的</p><h3 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h3><p>“一个接口，多种表现形式”。</p><p> 同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。</p><p>多态的三个条件:</p><p>​    1、继承的存在(继承是多态的基础,没有继承就没有多态)</p><p>​    2、子类重写父类的方法(多态下调用子类重写的方法)</p><p>​    3、父类引用变量指向子类对象(子类到父类的类型转换)</p><p><strong>数据抽象</strong> 一 找到和对象相关的数据一属性( 名词），可以使用包装器和修改器来装饰属性。</p><p><code>@property</code></p><p><code>@属性.setter</code></p><p><code>__slots__</code>限定自定义类型的对象只能绑定某些属性，可以通过在类中定义<strong>slots</strong>变量来进行限定。需要注意的是<strong>slots</strong>的限定只对当前类的对象生效，对子类并不起任何作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    # 限定Person对象只能绑定_name, _age和_gender属性</span><br><span class="line">    __slots__ = (&apos;_name&apos;, &apos;_age&apos;, &apos;_gender&apos;)</span><br></pre></td></tr></table></figure><p><strong>行为抽象</strong> 一 找到和对象相关的行为一方法（动词）</p><p><strong>成员方法</strong>：第一个参数为<code>self</code>，由实例化的对象调用</p><p><strong>类方法</strong>：使用<code>@classmethod</code>装饰的方法是类方法，与成员方法的区别在于所接收的第一个参数不是 <code>self</code> （类实例的指针），而是<code>cls</code>（当前类的具体类型）</p><p><strong>静态方法</strong>：使用<code>@staticmethod</code>装饰的方法是类静态方法，其跟成员方法的区别是没有 <code>self</code> 参数，并且可以在类不进行实例化的情况下调用</p><p><strong>魔法方法</strong>：<code>__init__()</code> 、<code>__del__()</code> 、<code>__str__()</code> 、<code>__repr__()</code></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><table><thead><tr><th>符号</th><th>解释</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配任意字符</td><td>b.t</td><td>可以匹配bat / but / b#t / b1t等</td></tr><tr><td>\w</td><td>匹配字母/数字/下划线</td><td>b\wt</td><td>可以匹配bat / b1t / b_t等但不能匹配b#t</td></tr><tr><td>\s</td><td>匹配空白字符（包括\r、\n、\t等）</td><td>love\syou</td><td>可以匹配love you</td></tr><tr><td>\d</td><td>匹配数字</td><td>\d\d</td><td>可以匹配01 / 23 / 99等</td></tr><tr><td>\b</td><td>匹配单词的边界</td><td>\bThe\b</td><td></td></tr><tr><td>^</td><td>匹配字符串的开始</td><td>^The</td><td>可以匹配The开头的字符串</td></tr><tr><td>\</td><td>匹配字符串的结束\</td><td>.exe</td><td>可以匹配.exe结尾的字符串</td><td></td><td></td></tr><tr><td>\W</td><td>匹配非字母/数字/下划线</td><td>b\Wt</td><td>可以匹配b#t / b@t等但不能匹配but / b1t / b_t等</td></tr><tr><td>\S</td><td>匹配非空白字符</td><td>love\Syou</td><td>可以匹配love#you等但不能匹配love you</td></tr><tr><td>\D</td><td>匹配非数字</td><td>\d\D</td><td>可以匹配9a / 3# / 0F等</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>\Bio\B</td><td></td></tr><tr><td>[]</td><td>匹配来自字符集的任意单一字符</td><td>[aeiou]</td><td>可以匹配任一元音字母字符</td></tr><tr><td>[^]</td><td>匹配不在字符集中的任意单一字符</td><td>[^aeiou]</td><td>可以匹配任一非元音字母字符</td></tr><tr><td>*</td><td>匹配0次或多次</td><td>\w*</td><td></td></tr><tr><td>+</td><td>匹配1次或多次</td><td>\w+</td><td></td></tr><tr><td>?</td><td>匹配0次或1次</td><td>\w?</td><td></td></tr><tr><td>{N}</td><td>匹配N次</td><td>\w{3}</td><td></td></tr><tr><td>{M,}</td><td>匹配至少M次</td><td>\w{3,}</td><td></td></tr><tr><td>{M,N}</td><td>匹配至少M次至多N次</td><td>\w{3,6}</td><td></td></tr><tr><td>\</td><td></td><td>分支</td><td>foo\</td><td>bar</td><td>可以匹配foo或者bar</td></tr><tr><td>(?#)</td><td>注释</td><td></td><td></td></tr><tr><td>(exp)</td><td>匹配exp并捕获到自动命名的组中</td><td></td><td></td></tr><tr><td>(?<name>exp)</name></td><td>匹配exp并捕获到名为name的组中</td><td></td><td></td></tr><tr><td>(?:exp)</td><td>匹配exp但是不捕获匹配的文本</td><td></td><td></td></tr><tr><td>(?=exp)</td><td>匹配exp前面的位置</td><td>\b\w+(?=ing)</td><td>可以匹配I’m dancing中的danc</td></tr><tr><td>(?&lt;=exp)</td><td>匹配exp后面的位置</td><td>(?&lt;=\bdanc)\w+\b</td><td>可以匹配I love dancing and reading中的第一个ing</td></tr><tr><td>(?!exp)</td><td>匹配后面不是exp的位置</td><td></td><td></td></tr><tr><td>(?</td><td>匹配前面不是exp的位置</td><td></td><td></td></tr><tr><td>*?</td><td>重复任意次，但尽可能少重复</td><td>a.<em>ba.</em>?b</td><td>将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td></tr><tr><td>+?</td><td>重复1次或多次，但尽可能少重复</td><td></td><td></td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,N}?</td><td>重复M到N次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,}?</td><td>重复M次以上，但尽可能少重复</td><td></td></tr></tbody></table><p>Python提供了re模块来支持正则表达式相关操作，下面是re模块中的核心函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>compile(pattern, flags=0)</td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td>match(pattern, string, flags=0)</td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern, string, flags=0)</td><td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern, string, maxsplit=0, flags=0)</td><td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern, repl, string, count=0, flags=0)</td><td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern, string, flags=0)</td><td>match函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td>findall(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td>purge()</td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.I / re.IGNORECASE</td><td>忽略大小写匹配标记</td></tr><tr><td>re.M / re.MULTILINE</td><td>多行匹配标记</td></tr></tbody></table><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p>协议- protocol- 通信双方对话的规范和标准</p><p>IP.Internet Protocol- 寻址和路由 <a href="http://www.baidu.com---&gt;" target="_blank" rel="noopener">www.baidu.com---&gt;</a> 180.97.33.108</p><p>TCP和UDP是在IP协议之上构建的传输协议它们能够提供传输数据的服务 TCP提供了可靠传输服务 TCP- Transfer Control Protocol 握手机制+冗余校验—&gt; 重发一次</p><p>TCP. - Transfer Control Protocol 提供：</p><p>​    1、可靠通信[数据不传丢也不传错] 滑动窗口机制 </p><p>​    2、流量控制(自动调节发送数据的速度 </p><p>​    3、拥塞控制(网络拥堵时会降低发送速度)</p><p>QQ 微信.应用级 QQ— ICQ— OICQ </p><p>HTTP— Hyper-Text Transfer Protocol </p><p>HTTPS— Secure </p><p>SMTP– Simple Mail Transfer Protocol </p><p>POP3— Post Office Protocol version 3 </p><p>IMAP—Internet Mail Access Protocol </p><p>URL— Uniform Resource Locator 协议://域名或IP地址:80/路径/资源名</p><p>网络API(应用程序编程接口) / 网络</p><p><code>requests.get()</code>用于请求目标网站，类型是一个<code>HTTPresponse</code>类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">response = requests.get(&apos;http://www.baidu.com&apos;)</span><br><span class="line">print(response.status_code) # 打印状态码</span><br><span class="line">print(response.url) # 打印请求url</span><br><span class="line">print(response.headers) # 打印头信息</span><br><span class="line">print(response.cookies) # 打印cookie信息</span><br><span class="line">print(response.text) #以文本形式打印网页源码</span><br><span class="line">print(response.content) #以字节流形式打印</span><br></pre></td></tr></table></figure><h3 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h3><p>Socket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。</p><p>服务器端程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">from socket import socket, AF_INET, SOCK_STREAM, SOCK_DGRAM</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 1、创建套接字对象，并指定使用哪种传输服务</span><br><span class="line">    # AF_INET：IPV4 AF_INET6：IPV6  SOCK_STREAM: TCP  SOCK_DGRAM: UDP  SOCK_RAW: 原始套接字</span><br><span class="line">    server_socket = socket(family=AF_INET, type=SOCK_STREAM)</span><br><span class="line">    # 2、绑定IP地址和端口，建议使用 1024 以后的端口</span><br><span class="line">    print(&apos;正在绑定IP地址和端口......&apos;)</span><br><span class="line">    server_socket.bind((&apos;10.7.152.89&apos;, 9999))</span><br><span class="line">    print(&apos;服务器绑定IP地址和端口成功&apos;)</span><br><span class="line">    # 3、启动监听 监听客户端有没有连接到服务器  512：历史经验最佳值</span><br><span class="line">    print(&apos;正在启动服务器......&apos;)</span><br><span class="line">    server_socket.listen(512)</span><br><span class="line">    print(&apos;服务器启动成功&apos;)</span><br><span class="line"></span><br><span class="line">    # 4、等待连接 通过循环等待客户端连接并作出相应处理</span><br><span class="line">    while True:</span><br><span class="line">        # 阻塞并等待连接</span><br><span class="line">        client_socket, addr = server_socket.accept()</span><br><span class="line">        print(str(addr) + &apos;连接到了服务器.&apos;)</span><br><span class="line"></span><br><span class="line">        # 5、发送数据</span><br><span class="line">        client_socket.send(str(datetime.now()).encode(&apos;utf-8&apos;))</span><br><span class="line">        # 6、断开连接</span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>客户端程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from socket import socket, AF_INET, SOCK_STREAM</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 1、创建套接字 socket</span><br><span class="line">    client_socket = socket(family=AF_INET, type=SOCK_STREAM)</span><br><span class="line">    # 2、连接服务器</span><br><span class="line">    client_socket.connect((&apos;10.7.152.89&apos;, 9999))</span><br><span class="line"></span><br><span class="line">    # 3、循环发送和接收信息</span><br><span class="line">    while True:</span><br><span class="line">        info = client_socket.recv(1024).decode(&apos;utf-8&apos;)</span><br><span class="line">        print(info)</span><br><span class="line">        # client_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="多线程、多进程"><a href="#多线程、多进程" class="headerlink" title="多线程、多进程"></a>多线程、多进程</h2><p>线程：是操作系统分配CPU的基本单元</p><p>进程：是操作系统分配内存的基本单元，一个进程由一个或多个线程构成</p><p>多进程、多线程：加速程序执行，提升性能；改善用户体验</p><p>​                  编写麻烦，调试更麻烦；对其他进程、线程不友好；占用更多资源</p><p>单进程 / 单线程模拟下载任务例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./单线程模拟下载例子.png" alt="单线程模拟下载例子" title="单线程模拟下载例子">                </div>                <div class="image-caption">单线程模拟下载例子</div>            </figure><p>多进程模拟下载任务例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./多进程模拟下载例子.png" alt="多进程模拟下载例子" title="多进程模拟下载例子">                </div>                <div class="image-caption">多进程模拟下载例子</div>            </figure><p>多线程模拟下载任务例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./多线程模拟下载例子.png" alt="多线程模拟下载例子" title="多线程模拟下载例子">                </div>                <div class="image-caption">多线程模拟下载例子</div>            </figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 作用域 </tag>
            
            <tag> 异常处理 </tag>
            
            <tag> re </tag>
            
            <tag> 网络IO编程 </tag>
            
            <tag> 文件IO操作 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python第一阶段（一）</title>
      <link href="/2018/05/26/Python%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/05/26/Python%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Python第一阶段（一）"><a href="#Python第一阶段（一）" class="headerlink" title="Python第一阶段（一）"></a>Python第一阶段（一）</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p><p>硬性规则： </p><p>​    1、变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头；</p><p>​    2、大小写敏感（大写的 a 和小写的 A 是两个不同的变量）；</p><p>​    3、不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</p><p>PEP 8要求：</p><p>​    1、用小写字母拼写，多个单词用下划线连接；</p><p>​    2、受保护的实例属性用单个下划线开头；</p><p>​    3、私有的实例属性用两个下划线开头。</p><p>当然，给变量（事实上应该是所有的标识符）命名做到见名知意也是非常重要的。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多中类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，部分如下：</p><p>整型（int）：Python中可以处理任意大小的整数（Python 2.x中有int和long两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如<code>0b100</code>，换算成十进制是<code>4</code>）、八进制（如<code>0o100</code>，换算成十进制是<code>64</code>）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是<code>256</code>）的表示法。</p><p>浮点型（float）：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</p><p>字符串型（str）：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</p><p>布尔型（bool）：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如<code>3 &lt; 5</code>会产生布尔值<code>True</code>，而<code>2 == 1</code>会产生布尔值<code>False</code>）。</p><p>复数型（complex）：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的 <code>i</code> 换成了 <code>j</code> 。</p><p>数据类型之间的转换：</p><p><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</p><p><code>float()</code>：将一个字符串转换成浮点数。</p><p><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</p><p><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</p><p><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</p><h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./ysf.png" alt="img" title="运算符优先级">                </div>                <div class="image-caption">运算符优先级</div>            </figure><p>赋值表达式： 变量 = 表达式</p><p>表达式为真的情况: <code>not 0</code> <code>-1</code> 等为真</p><p>表达式为假的情况: <code>0</code> <code>&#39;&#39;</code> <code>None</code>  <code>False</code> <code>[]</code> <code>()</code>  <code>{}</code></p><h3 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h3><p>1、将华氏温度转换为摄氏温度  <code>F = 1.8 * C + 32</code>，F表示华氏温度，C表示摄氏温度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = float(input(&apos;请输入华氏温度: &apos;))</span><br><span class="line">c = (f - 32) / 1.8</span><br><span class="line">print(&apos;%.1f华氏度 = %.1f摄氏度&apos; % (f, c))</span><br></pre></td></tr></table></figure><p>2、输入圆的半径计算计算周长和面积</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line">radius = float(input(&apos;请输入圆的半径: &apos;))</span><br><span class="line">perimeter = 2 * math.pi * radius</span><br><span class="line">area = math.pi * radius * radius</span><br><span class="line">print(&apos;周长: %.2f&apos; % perimeter)</span><br><span class="line">print(&apos;面积: %.2f&apos; % area)</span><br></pre></td></tr></table></figure><p>3、输入年份判断是不是闰年，是则输出 <code>True</code>，否则输出 <code>False</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">year = int(input(&apos;请输入年份: &apos;))</span><br><span class="line"># 如果代码太长写成一行不便于阅读 可以使用\或()折行</span><br><span class="line">is_leap = (year % 4 == 0 and year % 100 != 0 or year % 400 == 0)</span><br><span class="line">print(is_leap)</span><br></pre></td></tr></table></figure><h2 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h2><p>列表是一个有序集合，下面是一些list的操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个空列表</span><br><span class="line">list1 = []</span><br><span class="line">print(list1)</span><br><span class="line">print(type(list1))</span><br><span class="line"># 创建带有元素的列表</span><br><span class="line">list2 = [1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">print(list2)</span><br><span class="line"># 列表元素的类型可以不同</span><br><span class="line">list3 = [12, &apos;qwe&apos;, 0.87, False, None]</span><br><span class="line">print(list3)</span><br><span class="line"># 访问列表中的元素  格式: 列表名[元素的下标] 注意：下标不能超出列表的范围，最大为len(list)-1</span><br><span class="line">list4 = [1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">print(list4[5])</span><br><span class="line"># 修改元素</span><br><span class="line">list4[3] = 10</span><br><span class="line">print(list4)</span><br><span class="line"></span><br><span class="line"># 列表的操作</span><br><span class="line"># 列表拼接</span><br><span class="line">list5 = [1, 2, 3, 4]</span><br><span class="line">list6 = [5, 6, 7]</span><br><span class="line">list7 = list5 + list6</span><br><span class="line">print(list7)</span><br><span class="line"># 列表的重复</span><br><span class="line">list8 = [4, 5, 6]</span><br><span class="line">print(list8 * 3)</span><br><span class="line"># 判断一个元素是否在列表中</span><br><span class="line">list9 = [1, 2, 3, 4, 5, 6]</span><br><span class="line"># 返回的结果是布尔值 存在为True  不存在为False</span><br><span class="line">print(7 in list9)</span><br><span class="line">print(4 in list9)</span><br><span class="line"># 截取列表 list[start:end:step]</span><br><span class="line">list10 = [1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">print(list10[:6])  # 从左截取，从头开始，到下标为5的元素</span><br><span class="line">print(list10[5:])  # 从左截取，从下标为5的元素，到末尾</span><br><span class="line">print(list10[::-1])  # 将list倒序排列</span><br><span class="line">print(list10[::-2])  # 从右截取，末尾开始，每隔一个元素截取一个</span><br><span class="line"># 二维列表</span><br><span class="line">list11 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span><br><span class="line"># 获取元素</span><br><span class="line">print(list11[0][0])</span><br><span class="line"># 列表的方法</span><br><span class="line"># append(): 在列表的末尾添加一个元素</span><br><span class="line">list1 = [1, 2, 3, 4, 5, 6]</span><br><span class="line">list1.append(8)</span><br><span class="line">print(list1)</span><br><span class="line">list1.append([7, 9, 10])</span><br><span class="line">print(list1)</span><br><span class="line"># extend(): 在列表的末尾一次性追加另外一个列表中的多个值</span><br><span class="line">list2 = [1, 2, 3, 4, 5, 6]</span><br><span class="line">list2.extend([200, 300, 400])</span><br><span class="line">print(list2)</span><br><span class="line">#insert(index, val):在指定下标处添加一个元素,原来此处的元素往后移动  index：表示列表下标，val：表示下标对应的值</span><br><span class="line">list3 = [1, 2, 3, 4]</span><br><span class="line">list3.insert(1, 250)</span><br><span class="line">print(list3)</span><br><span class="line"># pop([index]):将列表中指定下标的元素删除, 如果不传递参数,则删除的是最后一个元素  index：表示列表下标，返回值：删除的该元素</span><br><span class="line">list4 = [1, 2, 3, 4, 5, 6]</span><br><span class="line">print(list4.pop())</span><br><span class="line">list4.pop()</span><br><span class="line">print(list4)</span><br><span class="line">list4.pop(1)</span><br><span class="line">print(list4)</span><br><span class="line"># remove(val): 移除列表中指定的元素，从左开始，移除第一个  val：表示列表中的值</span><br><span class="line">list5 = [3, 4, 5, 6, 3, 7]</span><br><span class="line">list5.remove(3)</span><br><span class="line"># list5.remove(3)</span><br><span class="line">print(list5)</span><br><span class="line"># clear(): 清除列表中所有的元素</span><br><span class="line">list6 = [1, 2, 3, 4, 5, 6]</span><br><span class="line">list6.clear()</span><br><span class="line">print(list6)</span><br><span class="line"># index(val): 获取列表中该元素所对应的下标  val：列表中的某一个元素  返回值：列表中元素所对应的下标</span><br><span class="line">list7 = [1, 2, 3, 4, 5, 6]</span><br><span class="line">index1 = list7.index(3)</span><br><span class="line">print(index1)</span><br><span class="line"># len(list): 获取列表的长度</span><br><span class="line">print(len([1, 2, 3, 4, 5, 6]))</span><br><span class="line"># max(list): 获取列表中的最大值</span><br><span class="line">print(max([1, 2, 3, 4, 5, 6]))</span><br><span class="line"># min(list): 获取列表中的最小值</span><br><span class="line">print(min([1, 2, 3, 4, 5, 6]))</span><br><span class="line"># count(val): 计算列表中元素出现的次数  val：列表中的某一个元素</span><br><span class="line">list8 = [1, 3, 4, 3, 3, 3, 3, 6, 7]</span><br><span class="line">print(list8.count(3))</span><br><span class="line"># reverse(): 将列表进行倒序排列</span><br><span class="line">list9 = [1, 2, 3, 4, 5, 10, 7, 8, 9]</span><br><span class="line">list9.reverse()</span><br><span class="line">print(list9)</span><br><span class="line"># sort(): 将列表中的元素进行升序排列</span><br><span class="line">list10 = [10, 90, 78, 23, 65, 43]</span><br><span class="line">list10.sort()</span><br><span class="line">print(list10)</span><br><span class="line"></span><br><span class="line">enumerate(list[, start = 0]):将列表中元素和其对应的下标一一展示出来</span><br><span class="line"># list: 列表</span><br><span class="line"># start: [start = 下标值]</span><br><span class="line"></span><br><span class="line">list16 = list(enumerate(list15))</span><br><span class="line">list17 = list(enumerate(list15, start = 1))</span><br><span class="line">print(list16)</span><br><span class="line">print(list17)</span><br><span class="line"></span><br><span class="line"># 循环遍历</span><br><span class="line">for i, v in list16:</span><br><span class="line">    print(i, v)</span><br></pre></td></tr></table></figure><h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组 tuple"></a>元组 tuple</h2><p>元组：也是一种有序集合，但一旦定义好之后不能修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个空元祖</span><br><span class="line">tuple1 = ()</span><br><span class="line">print(tuple1)</span><br><span class="line">print(type(tuple1))</span><br><span class="line"># tuple和list一样也可以保存任意数据类型的数据</span><br><span class="line">tuple2 = (231, 323.14, &apos;asddf&apos;, None, True)</span><br><span class="line">print(tuple2)</span><br><span class="line"># 注意：当创建的元组只有一个元素时，需要在元素后面加一个逗号</span><br><span class="line">tuple3 = (34, ) # ===&gt; tuple类型  # tuple3 = (34)  # ===&gt; int类型</span><br><span class="line">print(tuple3)</span><br><span class="line"># 获取元组的元素和list一样，通过下标来获取</span><br><span class="line">tuple4 = (1, 2, 3, 4, 5, 6)</span><br><span class="line">print(tuple4[-1])</span><br><span class="line"># 注意：元组定义好之后是不能修改的</span><br><span class="line">tuple5 = (1, 2, 3, 4, [11, 22, 33])</span><br><span class="line"># tuple5[0] = 150  # 报错</span><br><span class="line">print(tuple5[-1][-2]) #  ==&gt; print(tuple5[4][1])</span><br><span class="line"></span><br><span class="line"># 元组进行操作</span><br><span class="line"># 将两个元组合并成一个新的元组</span><br><span class="line">tuple7 = (1, 2, 3)</span><br><span class="line">tuple8 = (4, 5, 6)</span><br><span class="line">tuple9 = tuple7 + tuple8</span><br><span class="line">print(tuple9)</span><br><span class="line">print(tuple7, tuple8)</span><br><span class="line"># 将元组重复n次,最后返回一个新的元组</span><br><span class="line">tuple10 = (1, 2, 3)</span><br><span class="line">print(tuple10 * 3)</span><br><span class="line"># in 判断一个元素是否在一个元组中,如果在返回True,否则返回False</span><br><span class="line">tuple11 = (3, 5, 7)</span><br><span class="line">print(3 in tuple11)</span><br><span class="line">print(4 in tuple11)</span><br><span class="line"># 元组的截取</span><br><span class="line"># 格式: 元组名[start:end:step]</span><br><span class="line">tuple12 = (1, 2, 3, 4, 5, 6, 7, 8, 9,10)</span><br><span class="line">print(tuple12[2:5])</span><br><span class="line">print(tuple12[3:])</span><br><span class="line">print(tuple12[:3])</span><br><span class="line"># 将元组进行逆序排列</span><br><span class="line">print(tuple12[::-1])</span><br><span class="line"># 二维元组</span><br><span class="line">tuple13 = ((2, 3, 4), (5, 6, 7))</span><br><span class="line">print(tuple13)</span><br><span class="line">print(tuple13[1][1])</span><br><span class="line"></span><br><span class="line"># 元组的方法</span><br><span class="line"># len(): 求一个元组的长度</span><br><span class="line">tuple14 = (1, 2, 3, 4, 5)</span><br><span class="line">print(len(tuple14))</span><br><span class="line"># max(): 求一个元组的元素的最大值</span><br><span class="line">print(max(tuple14))</span><br><span class="line"># min(): 求一个元组的元素的最小值</span><br><span class="line">print(min(tuple14))</span><br><span class="line">#遍历</span><br><span class="line">for i in tuple14:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h2 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h2><p>在字典里边是以键值对的形式存放。key-value<br>注意事项:<br>1、在字典中键(key)的值必须是唯一<br>2、在字典中可以存放多个键值对<br>3、在字典中键(key)必须是不可变类型   字符串 、整数都可以作为键(key)<br>4、<code>list</code>和<code>tuple</code>都是有序集合, 而<code>dict</code>是无序集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 定义字典</span><br><span class="line">dict1 = &#123;&apos;Alex&apos;: 88, &apos;xiaoming&apos; : 99, &apos;Ala&apos;: 96, &apos;Tom&apos;: 85, &apos;Jhon&apos;: 77&#125;</span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line"># 元素的访问</span><br><span class="line"># 获取的方式: 字典名[key]</span><br><span class="line">print(dict1[&apos;xiaoming&apos;])</span><br><span class="line">print(dict1.get(&apos;Alex&apos;))</span><br><span class="line"># 添加元素</span><br><span class="line">dict1[&apos;HanMeimei&apos;] = 89</span><br><span class="line">print(dict1)</span><br><span class="line"># 修改</span><br><span class="line">dict1[&apos;HanMeimei&apos;] = &apos;90&apos;</span><br><span class="line">print(dict1)</span><br><span class="line"># 删除</span><br><span class="line">dict1.pop(&apos;HanMeimei&apos;)</span><br><span class="line">print(dict1)</span><br><span class="line"># 遍历</span><br><span class="line">for k in dict1:</span><br><span class="line">    print(k, dict1[k])</span><br><span class="line"># 获取字典所有的value和key</span><br><span class="line">print(dict1.values())</span><br><span class="line">print(dict1.keys())</span><br><span class="line"># 遍历value值</span><br><span class="line">for v in dict1.values():</span><br><span class="line">    print(v)</span><br><span class="line">#遍历key值</span><br><span class="line">for k in dict1.keys():</span><br><span class="line">    print(k)</span><br><span class="line">#遍历key-value值</span><br><span class="line">for k,v in dict1.items():</span><br><span class="line">    print(k, v)</span><br><span class="line">for k,v in enumerate(dict1):</span><br><span class="line">    print(k, v)</span><br></pre></td></tr></table></figure><h2 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h2><p>set(集合):类似于<code>dict</code>, 也是无序的,以key的形式存在,没有value<br>作用: 是对<code>list</code> ，<code>tuple</code>中的元素进行去重的, 求交集、并集<br>1、<code>set</code>是无序集合<br>2、<code>set</code>集合是不可改变的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># 获取set</span><br><span class="line">set1 = set([1, 2, 2, 3, 3, 3])</span><br><span class="line">print(set1)</span><br><span class="line">print(type(set1))</span><br><span class="line">set2 = set((1, 2, 3, 1, 2, 3, 4, 5))</span><br><span class="line">print(set2)</span><br><span class="line">print(type(set2))</span><br><span class="line">set3 = set(&#123;3, 4, 5, 5, 6, 3, 7&#125;)</span><br><span class="line">print(set3)</span><br><span class="line">print(type(set3))</span><br><span class="line"></span><br><span class="line"># 添加</span><br><span class="line">set4 = set([1, 2, 2, 3, 3, 3])</span><br><span class="line">set4.add(55)  # add() #可以添加重复的值,但是没效果</span><br><span class="line"></span><br><span class="line"># set4.add([10, 9]) #直接报错,不能添加list</span><br><span class="line">set4.add((10, 9))</span><br><span class="line"># set4.add(&#123;&apos;a&apos;:1&#125;) #直接报错,不能添加字典</span><br><span class="line"># 总结:list和dict是可改变的, 而tuple是不可改变</span><br><span class="line">print(set4)</span><br><span class="line"></span><br><span class="line"># 修改</span><br><span class="line">set5 = set([1, 2, 3, 4, 5])</span><br><span class="line"># 将list dict tuple 等等整个插入进去</span><br><span class="line">set5.update([6, 7, 8])</span><br><span class="line">set5.update(&#123;9 : &apos;a&apos;, 10 : &apos;b&apos;&#125;)  #注意：插入字典时，是将key插进去</span><br><span class="line">set5.update((11, 56))</span><br><span class="line">print(set5)</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">set6= set([1, 2, 3, 4, 5])</span><br><span class="line">set6.remove(4)</span><br><span class="line">print(set6)</span><br><span class="line"></span><br><span class="line"># 遍历</span><br><span class="line">set7 = set((231, 323.14, &apos;asddf&apos;, None, True))</span><br><span class="line">for i in set7:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"># 交集  &amp;  并集  |  差集 -  对称差 ^</span><br><span class="line">set8 = set([1, 2, 3, 4])</span><br><span class="line">set9 = set([3, 4, 5, 6])</span><br><span class="line">set10 = set8 &amp; set9</span><br><span class="line">set11 = set8 | set9</span><br><span class="line">print(set10)</span><br><span class="line">print(type(set10))</span><br><span class="line">print(set11)</span><br><span class="line">print(type(set11))</span><br></pre></td></tr></table></figure><h2 id="list、tuple、dict、set之间的转换"><a href="#list、tuple、dict、set之间的转换" class="headerlink" title="list、tuple、dict、set之间的转换"></a>list、tuple、dict、set之间的转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#list-set</span><br><span class="line">list1 = [1, 2, 3, 4, 4, 5, 5]</span><br><span class="line">set1 = set(list1)</span><br><span class="line">print(set1)</span><br><span class="line">print(type(set1))</span><br><span class="line"></span><br><span class="line"># set-&gt;list</span><br><span class="line">set2 = &#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">list2 = list(set2)</span><br><span class="line">print(list2)</span><br><span class="line">print(type(list2))</span><br><span class="line"></span><br><span class="line"># tuple-&gt;set</span><br><span class="line">tuple1 = (1, 2, 3, 4, 5, 6, 6, 6)</span><br><span class="line">set3 = set(tuple1)</span><br><span class="line">print(set3)</span><br><span class="line">print(type(set3))</span><br><span class="line"></span><br><span class="line"># set-&gt;tuple</span><br><span class="line">set4 = &#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">tuple2 = tuple(set4)</span><br><span class="line">print(tuple2)</span><br><span class="line">print(type(tuple2))</span><br><span class="line"></span><br><span class="line"># dict-&gt;set</span><br><span class="line">dict1 = &#123;&apos;Alex&apos;: 88, &apos;xiaoming&apos; : 99, &apos;Ala&apos;: 96, &apos;Tom&apos;: 85, &apos;Jhon&apos;: 77&#125;</span><br><span class="line">set5 = set(dict1)</span><br><span class="line">print(set5)</span><br><span class="line">print(type(set5))</span><br><span class="line"></span><br><span class="line"># set-dict  注意：set不能转换成dict，因为set只有key，而dict是key-value形式存储的</span><br><span class="line"># set6 = &#123;2, 3, 4, 5&#125;</span><br><span class="line"># dict2 = dict(set6)</span><br><span class="line"># print(dict2)</span><br></pre></td></tr></table></figure><h2 id="流程控制：分支与循环"><a href="#流程控制：分支与循环" class="headerlink" title="流程控制：分支与循环"></a>流程控制：分支与循环</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。</p><p>结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if 表达式1:</span><br><span class="line">语句1</span><br><span class="line">elif 表达式2:</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line">else:</span><br><span class="line">语句n</span><br></pre></td></tr></table></figure><p>练习：英制单位与公制单位互换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">value = float(input(&apos;请输入长度:&apos;))</span><br><span class="line">unit = input(&apos;请输入单位:&apos;)</span><br><span class="line">if unit == &apos;in&apos; or unit == &apos;英寸&apos;:</span><br><span class="line">    print(&apos;%f英寸 = %f厘米&apos; % (value, value * 2.54))</span><br><span class="line">elif unit == &apos;cm&apos; or unit == &apos;厘米&apos;:</span><br><span class="line">    print(&apos;%f厘米 = %f英寸&apos; % (value, value / 2.54))</span><br><span class="line">else:</span><br><span class="line">    print(&apos;请输入有效的单位&apos;)</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>构造循环语句要使用 <code>for...in...</code> 或者 <code>while</code> 关键字。</p><p>1、<code>for...in...</code>结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 可迭代容器:</span><br><span class="line">语句...</span><br></pre></td></tr></table></figure><p>eg：求1-100的和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">for x in range(101):</span><br><span class="line">    sum += x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>2、<code>while</code>结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while 表达式：</span><br><span class="line">语句...</span><br></pre></td></tr></table></figure><p>eg：猜数字游戏    </p><p>​    规则：计算机出一个1~100之间的随机数由人来猜<br>​           计算机根据人猜的数字分别给出提示大一点/小一点/猜对了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">answer = random.randint(1, 100)</span><br><span class="line">counter = 0</span><br><span class="line">while True:</span><br><span class="line">    counter += 1</span><br><span class="line">    number = int(input(&apos;请输入:&apos;))</span><br><span class="line">    if number &lt; answer:</span><br><span class="line">        print(&apos;大一点&apos;)</span><br><span class="line">    elif number &gt; answer:</span><br><span class="line">        print(&apos;小一点&apos;)</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;恭喜你猜对了!&apos;)</span><br><span class="line">        break</span><br><span class="line">print(&apos;你总共猜了%d次&apos; % counter)</span><br><span class="line">if counter &gt; 7:</span><br><span class="line">    print(&apos;你的智商余额明显不足&apos;)</span><br></pre></td></tr></table></figure><p>练习：打印九九乘法表，要使用双层循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in range(1, 10):</span><br><span class="line">    for j in range(1, i + 1):</span><br><span class="line">        print(&apos;%d*%d=%d&apos; % (i, j, i * j), end=&apos;\t&apos;)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
            <tag> list </tag>
            
            <tag> tuple </tag>
            
            <tag> dict </tag>
            
            <tag> set </tag>
            
            <tag> 分支循环 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/25/hello-world/"/>
      <url>/2018/05/25/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag: [test1, test2]</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
  
  
</search>
