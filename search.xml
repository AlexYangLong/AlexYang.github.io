<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Python基础（14）——进程和线程</title>
      <link href="/2018/05/29/Python%E5%9F%BA%E7%A1%80%EF%BC%8814%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/05/29/Python%E5%9F%BA%E7%A1%80%EF%BC%8814%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="Python基础（14）——进程和线程"><a href="#Python基础（14）——进程和线程" class="headerlink" title="Python基础（14）——进程和线程"></a>Python基础（14）——进程和线程</h1><p>线程：是操作系统分配CPU的基本单元</p><p>进程：是操作系统分配内存的基本单元，一个进程由一个或多个线程构成</p><p>多进程、多线程：加速程序执行，提升性能；改善用户体验</p><p>​                  编写麻烦，调试更麻烦；对其他进程、线程不友好；占用更多资源</p><p>单进程 / 单线程模拟下载任务例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./单线程模拟下载例子.png" alt="单线程模拟下载例子" title="单线程模拟下载例子">                </div>                <div class="image-caption">单线程模拟下载例子</div>            </figure><p>多进程模拟下载任务例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./多进程模拟下载例子.png" alt="多进程模拟下载例子" title="多进程模拟下载例子">                </div>                <div class="image-caption">多进程模拟下载例子</div>            </figure><p>多线程模拟下载任务例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./多线程模拟下载例子.png" alt="多线程模拟下载例子" title="多线程模拟下载例子">                </div>                <div class="image-caption">多线程模拟下载例子</div>            </figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 线程 </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础（13）——网络编程入门</title>
      <link href="/2018/05/29/Python%E5%9F%BA%E7%A1%80%EF%BC%8813%EF%BC%89%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/"/>
      <url>/2018/05/29/Python%E5%9F%BA%E7%A1%80%EF%BC%8813%EF%BC%89%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="Python基础（13）——网络编程入门"><a href="#Python基础（13）——网络编程入门" class="headerlink" title="Python基础（13）——网络编程入门"></a>Python基础（13）——网络编程入门</h1><h2 id="基于传输层协议的套接字编程"><a href="#基于传输层协议的套接字编程" class="headerlink" title="基于传输层协议的套接字编程"></a>基于传输层协议的套接字编程</h2><p>套接字这个词对很多不了解网络编程的人来说显得非常晦涩和陌生，其实说得通俗点，套接字就是一套用<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">C语言</a>写成的应用程序开发库，主要用于实现进程间通信和网络编程，在网络应用开发中被广泛使用。在Python中也可以基于套接字来使用传输层提供的传输服务，并基于此开发自己的网络应用。实际开发中使用的套接字可以分为三类：流套接字（TCP套接字）、数据报套接字和原始套接字。</p><h3 id="TCP套接字"><a href="#TCP套接字" class="headerlink" title="TCP套接字"></a>TCP套接字</h3><p>所谓TCP套接字就是使用TCP协议提供的传输服务来实现网络通信的编程接口。在Python中可以通过创建socket对象并指定type属性为SOCK_STREAM来使用TCP套接字。由于一台主机可能拥有多个IP地址，而且很有可能会配置多个不同的服务，所以作为服务器端的程序，需要在创建套接字对象后将其绑定到指定的IP地址和端口上。这里的端口并不是物理设备而是对IP地址的扩展，用于区分不同的服务，例如我们通常将HTTP服务跟80端口绑定，而MySQL数据库服务默认绑定在3306端口，这样当服务器收到用户请求时就可以根据端口号来确定到底用户请求的是HTTP服务器还是数据库服务器提供的服务。端口的取值范围是0~65535，而1024以下的端口我们通常称之为“著名端口”（留给像FTP、HTTP、SMTP等“著名服务”使用的端口，有的地方也称之为“周知端口”），自定义的服务通常不使用这些端口，除非自定义的是HTTP或FTP这样的著名服务。</p><p>TCP提供了可靠地数据传输，主要基于以下机制：</p><p>​    1、可靠通信[数据不传丢也不传错] 滑动窗口机制 </p><p>​    2、流量控制(自动调节发送数据的速度 </p><p>​    3、拥塞控制(网络拥堵时会降低发送速度)</p><p>服务器端程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM, SOCK_DGRAM</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1、创建套接字对象，并指定使用哪种传输服务</span></span><br><span class="line">    <span class="comment"># AF_INET：IPV4 AF_INET6：IPV6  SOCK_STREAM: TCP  SOCK_DGRAM: UDP  SOCK_RAW: 原始套接字</span></span><br><span class="line">    server_socket = socket(family=AF_INET, type=SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 2、绑定IP地址和端口，建议使用 1024 以后的端口</span></span><br><span class="line">    print(<span class="string">'正在绑定IP地址和端口......'</span>)</span><br><span class="line">    server_socket.bind((<span class="string">'10.7.152.89'</span>, <span class="number">9999</span>))</span><br><span class="line">    print(<span class="string">'服务器绑定IP地址和端口成功'</span>)</span><br><span class="line">    <span class="comment"># 3、启动监听 监听客户端有没有连接到服务器  512：历史经验最佳值</span></span><br><span class="line">    print(<span class="string">'正在启动服务器......'</span>)</span><br><span class="line">    server_socket.listen(<span class="number">512</span>)</span><br><span class="line">    print(<span class="string">'服务器启动成功'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4、等待连接 通过循环等待客户端连接并作出相应处理</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># 阻塞并等待连接</span></span><br><span class="line">        client_socket, addr = server_socket.accept()</span><br><span class="line">        print(str(addr) + <span class="string">'连接到了服务器.'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5、发送数据</span></span><br><span class="line">        client_socket.send(str(datetime.now()).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="comment"># 6、断开连接</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>客户端程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1、创建套接字 socket</span></span><br><span class="line">    client_socket = socket(family=AF_INET, type=SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 2、连接服务器</span></span><br><span class="line">    client_socket.connect((<span class="string">'10.7.152.89'</span>, <span class="number">9999</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3、循环发送和接收信息</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        info = client_socket.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        print(info)</span><br><span class="line">        <span class="comment"># client_socket.close()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="UDP套接字"><a href="#UDP套接字" class="headerlink" title="UDP套接字"></a>UDP套接字</h3><p>传输层除了有可靠的传输协议TCP之外，还有一种非常轻便的传输协议叫做用户数据报协议，简称UDP。TCP和UDP都是提供端到端传输服务的协议，二者的差别就如同打电话和发短信的区别，后者不对传输的可靠性和可达性做出任何承诺从而避免了TCP中握手和重传的开销，所以在强调性能和而不是数据完整性的场景中（例如传输网络音视频数据），UDP可能是更好的选择。可能大家会注意到一个现象，就是在观看网络视频时，有时会出现卡顿，有时会出现花屏，这无非就是部分数据传丢或传错造成的。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TCP编程 </tag>
            
            <tag> 套接字编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础（12）——正则表达式</title>
      <link href="/2018/05/29/Python%E5%9F%BA%E7%A1%80%EF%BC%8812%EF%BC%89%E2%80%94%E2%80%94%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/05/29/Python%E5%9F%BA%E7%A1%80%EF%BC%8812%EF%BC%89%E2%80%94%E2%80%94%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="Python基础（12）——正则表达式"><a href="#Python基础（12）——正则表达式" class="headerlink" title="Python基础（12）——正则表达式"></a>Python基础（12）——正则表达式</h1><h2 id="正则的基本符号"><a href="#正则的基本符号" class="headerlink" title="正则的基本符号"></a>正则的基本符号</h2><p>下面的表示总结了一些正则的基本符号：</p><table><thead><tr><th>符号</th><th>解释</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配任意字符</td><td>b.t</td><td>可以匹配bat / but / b#t / b1t等</td></tr><tr><td>\w</td><td>匹配字母/数字/下划线</td><td>b\wt</td><td>可以匹配bat / b1t / b_t等但不能匹配b#t</td></tr><tr><td>\s</td><td>匹配空白字符（包括\r、\n、\t等）</td><td>love\syou</td><td>可以匹配love you</td></tr><tr><td>\d</td><td>匹配数字</td><td>\d\d</td><td>可以匹配01 / 23 / 99等</td></tr><tr><td>\b</td><td>匹配单词的边界</td><td>\bThe\b</td><td></td></tr><tr><td>^</td><td>匹配字符串的开始</td><td>^The</td><td>可以匹配The开头的字符串</td></tr><tr><td>\</td><td>匹配字符串的结束\</td><td>.exe</td><td>可以匹配.exe结尾的字符串</td><td></td><td></td></tr><tr><td>\W</td><td>匹配非字母/数字/下划线</td><td>b\Wt</td><td>可以匹配b#t / b@t等但不能匹配but / b1t / b_t等</td></tr><tr><td>\S</td><td>匹配非空白字符</td><td>love\Syou</td><td>可以匹配love#you等但不能匹配love you</td></tr><tr><td>\D</td><td>匹配非数字</td><td>\d\D</td><td>可以匹配9a / 3# / 0F等</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>\Bio\B</td><td></td></tr><tr><td>[]</td><td>匹配来自字符集的任意单一字符</td><td>[aeiou]</td><td>可以匹配任一元音字母字符</td></tr><tr><td>[^]</td><td>匹配不在字符集中的任意单一字符</td><td>[^aeiou]</td><td>可以匹配任一非元音字母字符</td></tr><tr><td>*</td><td>匹配0次或多次</td><td>\w*</td><td></td></tr><tr><td>+</td><td>匹配1次或多次</td><td>\w+</td><td></td></tr><tr><td>?</td><td>匹配0次或1次</td><td>\w?</td><td></td></tr><tr><td>{N}</td><td>匹配N次</td><td>\w{3}</td><td></td></tr><tr><td>{M,}</td><td>匹配至少M次</td><td>\w{3,}</td><td></td></tr><tr><td>{M,N}</td><td>匹配至少M次至多N次</td><td>\w{3,6}</td><td></td></tr><tr><td>\</td><td></td><td>分支</td><td>foo\</td><td>bar</td><td>可以匹配foo或者bar</td></tr><tr><td>(?#)</td><td>注释</td><td></td><td></td></tr><tr><td>(exp)</td><td>匹配exp并捕获到自动命名的组中</td><td></td><td></td></tr><tr><td>(?<name>exp)</name></td><td>匹配exp并捕获到名为name的组中</td><td></td><td></td></tr><tr><td>(?:exp)</td><td>匹配exp但是不捕获匹配的文本</td><td></td><td></td></tr><tr><td>(?=exp)</td><td>匹配exp前面的位置</td><td>\b\w+(?=ing)</td><td>可以匹配I’m dancing中的danc</td></tr><tr><td>(?&lt;=exp)</td><td>匹配exp后面的位置</td><td>(?&lt;=\bdanc)\w+\b</td><td>可以匹配I love dancing and reading中的第一个ing</td></tr><tr><td>(?!exp)</td><td>匹配后面不是exp的位置</td><td></td><td></td></tr><tr><td>(?</td><td>匹配前面不是exp的位置</td><td></td><td></td></tr><tr><td>*?</td><td>重复任意次，但尽可能少重复</td><td>a.<em>ba.</em>?b</td><td>将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td></tr><tr><td>+?</td><td>重复1次或多次，但尽可能少重复</td><td></td><td></td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,N}?</td><td>重复M到N次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,}?</td><td>重复M次以上，但尽可能少重复</td><td></td></tr></tbody></table><h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><p>Python提供了re模块来支持正则表达式相关操作，下面是re模块中的核心函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>compile(pattern, flags=0)</td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td>match(pattern, string, flags=0)</td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern, string, flags=0)</td><td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern, string, maxsplit=0, flags=0)</td><td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern, repl, string, count=0, flags=0)</td><td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern, string, flags=0)</td><td>match函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td>findall(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td>purge()</td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.I / re.IGNORECASE</td><td>忽略大小写匹配标记</td></tr><tr><td>re.M / re.MULTILINE</td><td>多行匹配标记</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> re模块 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础（11）——面向对象基础</title>
      <link href="/2018/05/29/Python%E5%9F%BA%E7%A1%80%EF%BC%8811%EF%BC%89%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/05/29/Python%E5%9F%BA%E7%A1%80%EF%BC%8811%EF%BC%89%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="Python基础（11）——面向对象基础"><a href="#Python基础（11）——面向对象基础" class="headerlink" title="Python基础（11）——面向对象基础"></a>Python基础（11）——面向对象基础</h1><p>在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。</p><p>面向对象的三个基本特征是：封装、继承、多态。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装是实现面向对象程序设计的第一步，封装就是将数据或函数等集合在一个个的单元中（我们称之为类）。被封装的对象通常被称为抽象数据类型。 隐藏复杂的现实细节，暴露简单的调用接口。</p><p>封装的意义：封装的意义在于保护或者防止代码（数据）被我们无意中破坏。在面向对象程序设计中数据被看作是一个中心的元素并且和使用它的函数结合的很密切，从而保护它不被其它的函数意外的修改。</p><p>​    1、保护数据成员，不让类以外的程序直接访问或修改，只能通过提供的公共的接口访问==&gt;数据封装。</p><p>​    2、方法的细节对用户是隐藏的，只要接口不变，内容的修改不会影响到外部的调用者==&gt;方法封装。</p><p>​    3、当对象含有完整的属性和与之对应的方法时称为封装。</p><p>​    4、从对象外面不能直接访问对象的属性，只能通过和该属性对应的方法访问。</p><p>​    5、对象的方法可以接收对象外面的消息。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>从已有的类创建新类的过程 提供继承信息的称为父类(超类/基类) 得到继承信息的称为子类(派生类)。继承主要实现重用代码，节省开发时间。</p><p>​    1、在类名后边的括号里一般写的是基类的类名</p><p>​    2、子类中继承自父类(基类),则父类的成员属性和成员方法都可以被子类所继承</p><p>​    3、父类中私有的成员属性不能继承给子类的</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>“一个接口，多种表现形式”。</p><p> 同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。</p><p>多态的三个条件:</p><p>​    1、继承的存在(继承是多态的基础,没有继承就没有多态)</p><p>​    2、子类重写父类的方法(多态下调用子类重写的方法)</p><p>​    3、父类引用变量指向子类对象(子类到父类的类型转换)</p><p><strong>数据抽象</strong> 一 找到和对象相关的数据——属性( 名词），可以使用包装器<code>@property</code>和修改器<code>@属性.setter</code>来装饰属性。</p><p><code>__slots__</code>限定自定义类型的对象只能绑定某些属性，可以通过在类中定义<code>__slots__</code>变量来进行限定。需要注意的是<code>__slots__</code>的限定只对当前类的对象生效，对子类并不起任何作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    # 限定Person对象只能绑定_name, _age和_gender属性</span><br><span class="line">    __slots__ = (&apos;_name&apos;, &apos;_age&apos;, &apos;_gender&apos;)</span><br></pre></td></tr></table></figure><p><strong>行为抽象</strong> 一 找到和对象相关的行为——方法（动词）</p><p><strong>成员方法</strong>：第一个参数为<code>self</code>，由实例化的对象调用</p><p><strong>类方法</strong>：使用<code>@classmethod</code>装饰的方法是类方法，与成员方法的区别在于所接收的第一个参数不是 <code>self</code> （类实例的指针），而是<code>cls</code>（当前类的具体类型）</p><p><strong>静态方法</strong>：使用<code>@staticmethod</code>装饰的方法是类静态方法，其跟成员方法的区别是没有 <code>self</code> 参数，并且可以在类不进行实例化的情况下调用</p><p><strong>魔法方法</strong>：<code>__init__()</code> 、<code>__del__()</code> 、<code>__str__()</code> 、<code>__repr__()</code></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础（10）——文件IO、异常处理、StringIO、BytesIO</title>
      <link href="/2018/05/29/Python%E5%9F%BA%E7%A1%80%EF%BC%8810%EF%BC%89%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6IO%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E3%80%81StringIO%E3%80%81BytesIO/"/>
      <url>/2018/05/29/Python%E5%9F%BA%E7%A1%80%EF%BC%8810%EF%BC%89%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6IO%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E3%80%81StringIO%E3%80%81BytesIO/</url>
      <content type="html"><![CDATA[<h1 id="Python基础（10）——文件IO、异常处理、StringIO、BytesIO"><a href="#Python基础（10）——文件IO、异常处理、StringIO、BytesIO" class="headerlink" title="Python基础（10）——文件IO、异常处理、StringIO、BytesIO"></a>Python基础（10）——文件IO、异常处理、StringIO、BytesIO</h1><h2 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h2><p>IO操作，使用<code>open()</code> 函数，还可以使用<code>with</code>上下文关键字来确保打开的文件操作符在退出时被关闭。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(path, mode [, encoding]) <span class="keyword">as</span> f:</span><br><span class="line">操作...</span><br></pre></td></tr></table></figure><p><code>f.read([size])</code> 从文件读取指定的字节数，如果未给定或为负则读取所有。<br><code>f.write()</code> 写文件 # 如果要写入字符串以外的数据,先将他转换为字符串<br><code>f.close()</code> 关闭文件<br><code>f.readline([size])</code> 读取整行内容,包括\n字符, 如果给定参数则从文件开始读取指定的字符个数<br><code>f.readlines([sizeint])</code> 读取所有行并返回列表，若给定<code>sizeint&gt;0</code>，返回总和大约为<code>sizeint</code>字节的行, 实际读取值可能比 <code>sizeint</code> 较大, 因为需要填充缓冲区。<br><code>f.tell()</code> 返回一个整数,表示当前文件指针的位置(就是到文件头的比特数).<br><code>f.seek(偏移量,[起始位置])</code> 用来移动文件指针 <code>#偏移量:单位:比特,可正可负起始位置:0-文件头,默认值;1-当前位置;2-文件尾</code></p><p>mode模式：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./open()函数的mode方式详解.png" alt="open()函数的mode方式详解" title="open()函数的mode方式详解">                </div>                <div class="image-caption">open()函数的mode方式详解</div>            </figure><h3 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getcwd() <span class="comment"># 返回当前的工作目录 # 获取绝对路径</span></span><br><span class="line">os.listdir(path) <span class="comment"># 返回指定的文件夹包含的文件或文件夹的名字的列表</span></span><br><span class="line">os.mkdir(path) <span class="comment"># 在当前目录下创建新的目录</span></span><br><span class="line">os.rmdir(path) <span class="comment"># 删除目录, 只能删除空目录</span></span><br><span class="line">os.rename(src, dst) <span class="comment"># 对文件进行重命名</span></span><br><span class="line">os.stat(file) <span class="comment"># 获取文件属性</span></span><br><span class="line">os.remove(file) <span class="comment"># 删除文件 #可以将本文件删除</span></span><br><span class="line">os.path.join(path1, path2) <span class="comment"># 路径拼接</span></span><br><span class="line">os.path.split(path) <span class="comment"># 拆分路径 # 返回一个元组(目录, 最后一个文件/目录名称)</span></span><br><span class="line">os.path.splitext(path) <span class="comment"># 获取文件的或站名</span></span><br><span class="line">os.path.exists(path) <span class="comment"># 判断文件/目录是否存在</span></span><br><span class="line">os.path.isfile(path) <span class="comment"># 判断是否是文件</span></span><br><span class="line">os.path.getsize(file) <span class="comment"># 获取文件的大小</span></span><br><span class="line">os.path.dirname(path) <span class="comment"># 获取当前文件的目录</span></span><br><span class="line">os.path.basename(path) <span class="comment"># 获取当前文件/目录名</span></span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>在Python中处理异常使用<code>try...except...[else...][finally...]</code>关键字。</p><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">try</span>语句</span><br><span class="line"><span class="keyword">except</span> 异常类<span class="number">1</span> <span class="keyword">as</span> 变量<span class="number">1</span>:</span><br><span class="line">    异常处理语句<span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> 异常类<span class="number">2</span> <span class="keyword">as</span> 变量<span class="number">2</span>:</span><br><span class="line">    异常处理语句<span class="number">2</span></span><br><span class="line">...</span><br><span class="line">[<span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">else</span>语句]</span><br><span class="line">[<span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">finally</span>语句]</span><br></pre></td></tr></table></figure><p>执行顺序：进入try语句块，如果发生错误，依次匹配except中的异常类，匹配成功进入该异常处理块，如果不报错，会执行else中的语句，而finally不管有没有报错都会执行…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div</span><span class="params">(x , y)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = x / y</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'除数不能为0'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(res)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'Anyway，I always run'</span>)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">div(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h2><p>很多时候，数据读写不一定是文件，也可以在内存中读写，而且更快。</p><p>StringIO模块主要用于在内存缓冲区中读写数据。它只有一个StringIO类，所以它的可用方法都在类中。此类中的大部分函数都与对文件的操作方法类似。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = StringIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'hello'</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">' '</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'world!'</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line"><span class="comment"># getvalue() 方法用于获得写入后的str。</span></span><br></pre></td></tr></table></figure><h2 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h2><p>StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。BytesIO实现了在内存中读写bytes，先创建一个BytesIO对象，然后写入一些bytes。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())</span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 文件IO </tag>
            
            <tag> 异常处理 </tag>
            
            <tag> StringIO </tag>
            
            <tag> BytesIO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础（9）——函数、装饰器、迭代器、生成器、变量作用域</title>
      <link href="/2018/05/29/Python%E5%9F%BA%E7%A1%80%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8%E3%80%81%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2018/05/29/Python%E5%9F%BA%E7%A1%80%EF%BC%889%EF%BC%89%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8%E3%80%81%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<h1 id="Python基础（9）——函数、装饰器、迭代器、生成器、变量作用域"><a href="#Python基础（9）——函数、装饰器、迭代器、生成器、变量作用域" class="headerlink" title="Python基础（9）——函数、装饰器、迭代器、生成器、变量作用域"></a>Python基础（9）——函数、装饰器、迭代器、生成器、变量作用域</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>定义函数，使用 <code>def</code> 关键字。</p><p>结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数列表...)</span>:</span></span><br><span class="line">语句...</span><br><span class="line"><span class="keyword">return</span> 返回值...</span><br></pre></td></tr></table></figure><p>函数的参数：</p><p>1、不定长参数： *args</p><p>2、关键字参数：**kwargs</p><p>匿名函数: 关键字 lambda      eg：qm = lambda x: x ** x</p><p>偏函数: 导入模块 import functools        </p><p>​    functools.partical()就是创建一个新的函数，不需要自行定义函数，直接将结果赋值给一个变量，而这个变量就是一个函数。这个函数的目的是将默认参数给固定住。</p><p>回调函数：定义函数时，将函数名作为参数传递过来，然后在函数里边再次调用函数。</p><p>常用函数：</p><p><code>abs()</code>: 返回数字的绝对值<br><code>max()</code>: 返回给定参数中的最大值<br><code>min()</code>:返回给定参数中最小的值<br><code>pow()</code>: 求幂(求次方)  [求<code>3^4</code> —&gt;  <code>print(3**4)</code> 、 <code>print(pow(3, 4))</code>]<br><code>round()</code>:四舍五入,如果只有一个参数,默认不保留小数点.参数二: 小数点后保留的位数</p><p><code>import math</code><br><code>math.ceil()</code>:向上取整<br><code>math.floor()</code>:向下取整<br><code>math.sqrt()</code>:求开方<br><code>math.modf()</code>:返回参数的整数部分和小数部分</p><p><code>import random</code><br><code>random.choice()</code>:返回列表,元祖,字典中的某一个值<br><code>random.choices()</code>:返回列表,元祖,字典中的指定个数值个值 k 关键字参数<br><code>random.random()</code>:返回0-1之间的数,  [0, 1)<br><code>random.uniform()</code>:返回指定的一个区间范围的随机数 [, )<br><code>random.randint()</code>:返回指定区间范围的随机整数 [, ]<br><code>random.shuffle()</code>:将列表中的数据进行打乱排序</p><p><code>import time</code></p><p><code>time.localtime()</code>  获取本地时间<br><code>time.asctime()</code> / <code>time.ctime()</code> 将时间转换成用户可读时间, 返回str格式  (Thu Apr 19 23:02:35 2018)<br><code>time.strftime(&#39;%Y-%m-%d %X&#39;)</code> 字符串的格式化输出, 返回str格式 (2018-04-19 23:07:51)<br><code>time.strptime(timeObject, &#39;%Y-%m-%d %X&#39;)</code>   将字符串的时间格式转换成元祖类型的时间格式</p><p><code>import datetime</code></p><p><code>datetime.datetime.now()</code> 获取当前时间<br><code>datetime.datetime(2020, 2, 2, 20, 20, 20)</code> 获取指定的时间<br><code>date1.strftime(&#39;%Y-%m-%d %X&#39;)</code>  时间字符串的格式化输出, 返回str格式</p><p><code>import calendar</code></p><p><code>calendar.month(2018, 4)</code> 获取指定的月份日历<br><code>calendar.calendar(2018)</code> 获取指定的年份日历</p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>本质还是函数（闭包函数），  一般使用装饰器来装饰其他函数。本身还是函数的调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">装饰器:</span></span><br><span class="line"><span class="string">1.在定义函数时,将函数名作为参数来传递</span></span><br><span class="line"><span class="string">2.自定义一个装饰器,(即自定义一个函数),在函数内部去调用真正的函数</span></span><br><span class="line"><span class="string">3.return 装饰器的自调</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'装饰器....'</span>)</span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">'啦啦啦....'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer  # --&gt; func1 = outer(func1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'1234567'</span>)</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">装饰器....</span></span><br><span class="line"><span class="string">1234567</span></span><br><span class="line"><span class="string">啦啦啦....</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>例如 <code>@property</code> 、<code>@属性名.setter</code> 广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器是一个可以记住遍历的位置的对象。</p><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><p>迭代器有两个基本的方法：<code>__iter()__</code> 和 <code>next()</code>。</p><p>字符串，列表或元组对象都可用于创建迭代器。</p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p><code>yield</code> 函数被称为生成器（generator），生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器， 每次遇到 <code>yield</code> 时函数会暂停并保存当前所有的运行信息，返回 <code>yield</code> 的值, 并在下一次执行 <code>next()</code> 方法时从当前位置继续运行。调用一个生成器函数，返回的是一个迭代器对象。</p><h2 id="变量作用域（LEGB）"><a href="#变量作用域（LEGB）" class="headerlink" title="变量作用域（LEGB）"></a>变量作用域（LEGB）</h2><p>L （Local） 局部作用域 </p><p>E （Enclosing） 嵌套作用域，闭包函数外的函数中 </p><p>G （Global） 全局作用域 </p><p>B （Built-in） 内建作用域</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 函数 </tag>
            
            <tag> 装饰器 </tag>
            
            <tag> 迭代器 </tag>
            
            <tag> 生成器 </tag>
            
            <tag> 变量作用域 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础（8）——常见的字符串函数</title>
      <link href="/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%888%EF%BC%89%E2%80%94%E2%80%94%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0/"/>
      <url>/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%888%EF%BC%89%E2%80%94%E2%80%94%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="常见的字符串函数"><a href="#常见的字符串函数" class="headerlink" title="常见的字符串函数"></a>常见的字符串函数</h1><h2 id="1、split"><a href="#1、split" class="headerlink" title="1、split"></a>1、split</h2><p>split(str=’ ‘[,num])  对字符串进行切片，并返回一个列表，str 表示按此字符串进行分割，默认是空格，num 表示最多分割多少次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'aaa sss ddd '</span></span><br><span class="line">print(str1.split(<span class="string">' '</span>, <span class="number">3</span>))  <span class="comment"># ['aaa', 'sss', 'ddd', '']</span></span><br></pre></td></tr></table></figure><h2 id="2、splitlines"><a href="#2、splitlines" class="headerlink" title="2、splitlines"></a>2、splitlines</h2><p>splitlines([keepends=False])  按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符，默认是False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str2 = <span class="string">'''aaaaaaaaaa</span></span><br><span class="line"><span class="string">ssssssssssssssssss</span></span><br><span class="line"><span class="string">dddddddd</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(str2.splitlines(keepends=<span class="keyword">True</span>))  <span class="comment"># ['aaaaaaaaaa\n', 'ssssssssssssssssss\n', 'dddddddd\n']</span></span><br><span class="line">print(str2.splitlines(keepends=<span class="keyword">False</span>))  <span class="comment"># ['aaaaaaaaaa', 'ssssssssssssssssss', 'dddddddd']</span></span><br></pre></td></tr></table></figure><h2 id="3、join"><a href="#3、join" class="headerlink" title="3、join"></a>3、join</h2><p>join()  用于将序列中的元素以指定的字符连接生成一个新的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str3 = <span class="string">'asdfghj'</span></span><br><span class="line">list = [<span class="string">'a'</span>,<span class="string">'s'</span>,<span class="string">'e'</span>]</span><br><span class="line">print(<span class="string">'-'</span>.join(list))  <span class="comment"># 'a-s-e'</span></span><br><span class="line">print(<span class="string">'-'</span>.join(str3))  <span class="comment"># 'a-s-d-f-g-h-j'</span></span><br></pre></td></tr></table></figure><h2 id="4、max"><a href="#4、max" class="headerlink" title="4、max"></a>4、max</h2><p>max()  返回给定参数的最大ASCII值的字符，参数可以为序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(max(<span class="string">'asdfghj'</span>))  <span class="comment"># 's'</span></span><br></pre></td></tr></table></figure><h2 id="5、min"><a href="#5、min" class="headerlink" title="5、min"></a>5、min</h2><p>max()  返回字符串中最小ASCII值的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(min(<span class="string">'asdfghj'</span>))  <span class="comment"># 'a'</span></span><br></pre></td></tr></table></figure><h2 id="6、replace"><a href="#6、replace" class="headerlink" title="6、replace"></a>6、replace</h2><p>replace(old, new[, max])  把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfghjkasasas'</span>.replace(<span class="string">'a'</span>, <span class="string">'1'</span>, <span class="number">2</span>))  <span class="comment"># '1sdfghjk1sasas'</span></span><br></pre></td></tr></table></figure><h2 id="7、maketrans、translate"><a href="#7、maketrans、translate" class="headerlink" title="7、maketrans、translate"></a>7、maketrans、translate</h2><p>maketrans()  返回字符串转换后生成的新字符串</p><p>translate(table)  返回按照table中给出的映射来进行翻译后的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trantab = str.maketrans(<span class="string">'abcd'</span>, <span class="string">'1234'</span>)</span><br><span class="line">print(<span class="string">'asdfghjkasasas'</span>.translate(trantab))  <span class="comment"># '1s4fghjk1s1s1s'</span></span><br></pre></td></tr></table></figure><h2 id="8、startswith"><a href="#8、startswith" class="headerlink" title="8、startswith"></a>8、startswith</h2><p> startswith(str, beg=0,end=len(string))  方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfghjkasasas'</span>.startswith(<span class="string">'asd'</span>))  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'asdfghjkasasas'</span>.startswith(<span class="string">'asd'</span>, <span class="number">2</span>, <span class="number">10</span>))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="9、endswith"><a href="#9、endswith" class="headerlink" title="9、endswith"></a>9、endswith</h2><p>endswith(suffix[, start[, end]]):方法用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。可选参数”start”与”end”为检索字符串的开始与结束位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfghjkasasas'</span>.endswith(<span class="string">'ghj'</span>, <span class="number">0</span>, <span class="number">7</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="10、encode"><a href="#10、encode" class="headerlink" title="10、encode"></a>10、encode</h2><p>encode()  指定的编码格式编码字符串。默认编码为 ‘utf-8’。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfg'</span>.encode(<span class="string">'utf-8'</span>))  <span class="comment"># b'asdfg'</span></span><br></pre></td></tr></table></figure><h2 id="11、decode"><a href="#11、decode" class="headerlink" title="11、decode"></a>11、decode</h2><p>decode():以指定的编码格式解码 bytes 对象。默认编码为 ‘utf-8’。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print((<span class="string">'asdfg'</span>.encode(<span class="string">'utf-8'</span>)).decode(<span class="string">'utf-8'</span>))  <span class="comment"># 'asdfg'</span></span><br></pre></td></tr></table></figure><h2 id="12、isalpha"><a href="#12、isalpha" class="headerlink" title="12、isalpha"></a>12、isalpha</h2><p>isalpha():方法检测字符串是否只由字母组成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfg12'</span>.isalpha())  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="13、isalnum"><a href="#13、isalnum" class="headerlink" title="13、isalnum"></a>13、isalnum</h2><p>isalnum():检测字符串是否由字母和数字组成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'123456asd'</span>.isalnum())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="14、isupper"><a href="#14、isupper" class="headerlink" title="14、isupper"></a>14、isupper</h2><p>isupper():检测字符串中所有的字母是否都为大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'ASDFGd'</span>.isupper())  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="15、islower"><a href="#15、islower" class="headerlink" title="15、islower"></a>15、islower</h2><p>islower():检测字符串是否由小写字母组成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Asdfghjkrt5'</span>.islower())  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="16、istitle"><a href="#16、istitle" class="headerlink" title="16、istitle"></a>16、istitle</h2><p>istitle():检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'My Name Is Alex'</span>.istitle())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="17、isdigit"><a href="#17、isdigit" class="headerlink" title="17、isdigit"></a>17、isdigit</h2><p>isdigit():检测字符串是否只由数字组成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'12345678'</span>.isdigit())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="18、isnumeric"><a href="#18、isnumeric" class="headerlink" title="18、isnumeric"></a>18、isnumeric</h2><p>isnumeric():检测字符串是否只由数字组成。这种方法是只针对unicode对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'1234567'</span>.isnumeric())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="19、isdecimal"><a href="#19、isdecimal" class="headerlink" title="19、isdecimal"></a>19、isdecimal</h2><p>isdecimal():检查字符串是否只包含十进制字符。这种方法只存在于unicode对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'12345'</span>.isdecimal())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="20、isspace"><a href="#20、isspace" class="headerlink" title="20、isspace"></a>20、isspace</h2><p>isspace():检测字符串是否只由空白字符组成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'            '</span>.isspace())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="21、len"><a href="#21、len" class="headerlink" title="21、len"></a>21、len</h2><p>len():返回对象（字符、列表、元组等）长度或项目个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(len(<span class="string">'asdfghj234567'</span>))  <span class="comment"># 13</span></span><br></pre></td></tr></table></figure><h2 id="22、lower"><a href="#22、lower" class="headerlink" title="22、lower"></a>22、lower</h2><p>lower():转换字符串中所有大写字符为小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'ASDasdfgerty3456'</span>.lower())  <span class="comment"># 'asdasdfgerty3456'</span></span><br></pre></td></tr></table></figure><h2 id="23、upper"><a href="#23、upper" class="headerlink" title="23、upper"></a>23、upper</h2><p>upper():将字符串中的小写字母转为大写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'ASDasdfgerty3456'</span>.upper())  <span class="comment"># 'ASDASDFGERTY3456'</span></span><br></pre></td></tr></table></figure><h2 id="24、swapcase"><a href="#24、swapcase" class="headerlink" title="24、swapcase"></a>24、swapcase</h2><p>swapcase():用于对字符串的大小写字母进行转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'ASDasdfgerty3456'</span>.swapcase())  <span class="comment"># 'asdASDFGERTY3456'</span></span><br></pre></td></tr></table></figure><h2 id="25、capitalize"><a href="#25、capitalize" class="headerlink" title="25、capitalize"></a>25、capitalize</h2><p>capitalize():将字符串的第一个字母变成大写,其他字母变小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asd WERtsd3456'</span>.capitalize())  <span class="comment"># 'Asd wertsd3456'</span></span><br></pre></td></tr></table></figure><h2 id="26、title"><a href="#26、title" class="headerlink" title="26、title"></a>26、title</h2><p>title():返回”标题化”的字符串,就是说所有单词都是以大写开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'my name is Alex'</span>.title())  <span class="comment"># 'My Name Is Alex'</span></span><br></pre></td></tr></table></figure><h2 id="27、center"><a href="#27、center" class="headerlink" title="27、center"></a>27、center</h2><p>center(width[, fillchar]):返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asd1'</span>.center(<span class="number">10</span>, <span class="string">' '</span>))  <span class="comment"># '   asd1   '</span></span><br></pre></td></tr></table></figure><h2 id="28、ljust"><a href="#28、ljust" class="headerlink" title="28、ljust"></a>28、ljust</h2><p>ljust(width[, fillchar]):返回一个原字符串左对齐,并使用fillchar填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asd1'</span>.ljust(<span class="number">10</span>, <span class="string">' '</span>))  <span class="comment"># 'asd1      '</span></span><br></pre></td></tr></table></figure><h2 id="29、rjust"><a href="#29、rjust" class="headerlink" title="29、rjust"></a>29、rjust</h2><p>rjust(width[, fillchar]):回一个原字符串右对齐,并使用fillchar填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asd1'</span>.rjust(<span class="number">10</span>, <span class="string">' '</span>))  <span class="comment"># '      asd1'</span></span><br></pre></td></tr></table></figure><h2 id="30、zfill"><a href="#30、zfill" class="headerlink" title="30、zfill"></a>30、zfill</h2><p>zfill(width):返回指定长度的字符串，原字符串右对齐，前面填充0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asd1'</span>.zfill(<span class="number">10</span>))  <span class="comment"># '000000asd1'</span></span><br></pre></td></tr></table></figure><h2 id="31、count"><a href="#31、count" class="headerlink" title="31、count"></a>31、count</h2><p>count():统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'aaaaaaaqwertya'</span>.count(<span class="string">'a'</span>))  <span class="comment"># 8</span></span><br></pre></td></tr></table></figure><h2 id="32、find"><a href="#32、find" class="headerlink" title="32、find"></a>32、find</h2><p>find():方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果指定范围内如果包含指定子字符串，返回的是子字符串在字符串中的起始位置（下标）。如果不包含，返回-1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfghjkl'</span>.find(<span class="string">'fg1'</span>))  <span class="comment"># -1</span></span><br></pre></td></tr></table></figure><h2 id="33、rfind"><a href="#33、rfind" class="headerlink" title="33、rfind"></a>33、rfind</h2><p>rfind():返回字符串最后一次出现的位置（下标），如果没有匹配项则返回-1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfghjklfg'</span>.rfind(<span class="string">'fg'</span>))  <span class="comment"># 9</span></span><br></pre></td></tr></table></figure><h2 id="34、index"><a href="#34、index" class="headerlink" title="34、index"></a>34、index</h2><p>index():方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，该方法与 python find()方法相似，但是没有匹配项时，报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfghjkl'</span>.index(<span class="string">'fg'</span>))  <span class="comment"># 3</span></span><br><span class="line">print(<span class="string">'asdfghjkl'</span>.index(<span class="string">'fg1'</span>))  <span class="comment"># ValueError: substring not found</span></span><br></pre></td></tr></table></figure><h2 id="35、rindex"><a href="#35、rindex" class="headerlink" title="35、rindex"></a>35、rindex</h2><p>rindex():返回子字符串 str 在字符串中最后出现的位置（下标），该方法与 python rfind()方法相似，但是没有匹配项时，报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'asdfghjklfg'</span>.rindex(<span class="string">'fg'</span>))  <span class="comment"># 9</span></span><br><span class="line">print(<span class="string">'asdfghjkl'</span>.rindex(<span class="string">'fg1'</span>))  <span class="comment"># ValueError: substring not found</span></span><br></pre></td></tr></table></figure><h2 id="36、strip"><a href="#36、strip" class="headerlink" title="36、strip"></a>36、strip</h2><p>strip():用于移除字符串头尾指定的字符（默认为空格）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'      asd   '</span>.strip())  <span class="comment"># 'asd'</span></span><br></pre></td></tr></table></figure><h2 id="37、lstrip"><a href="#37、lstrip" class="headerlink" title="37、lstrip"></a>37、lstrip</h2><p>lstrip():方法用于截掉字符串左边的空格或指定字符（默认为空格）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'      asd   '</span>.lstrip())  <span class="comment"># 'asd   '</span></span><br></pre></td></tr></table></figure><h2 id="38、rstrip"><a href="#38、rstrip" class="headerlink" title="38、rstrip"></a>38、rstrip</h2><p>rstrip():删除 string 字符串末尾的指定字符（默认为空格）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'      asd   '</span>.rstrip())  <span class="comment"># '      asd'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 字符串函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础（7）——流程控制：分支与循环</title>
      <link href="/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%887%EF%BC%89%E2%80%94%E2%80%94%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%88%86%E6%94%AF%E4%B8%8E%E5%BE%AA%E7%8E%AF/"/>
      <url>/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%887%EF%BC%89%E2%80%94%E2%80%94%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%88%86%E6%94%AF%E4%B8%8E%E5%BE%AA%E7%8E%AF/</url>
      <content type="html"><![CDATA[<h1 id="流程控制：分支与循环"><a href="#流程控制：分支与循环" class="headerlink" title="流程控制：分支与循环"></a>流程控制：分支与循环</h1><p>流程控制语句主要分为三种：</p><p>​    1、顺序语句：顾名思义，就是按照顺序从头一句一句往下执行。</p><p>​    2、分支语句</p><p>​    3、循环语句</p><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。</p><p>结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">语句<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">2</span>:</span><br><span class="line">语句<span class="number">2</span></span><br><span class="line">[...]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句n</span><br></pre></td></tr></table></figure><p>执行顺序：先判断<code>表达式1</code> 的值，如果为<code>True</code> ，则执行<code>语句1</code> ，然后结束分支。如果为<code>False</code> ，则判断<code>表达式2</code> 的值，如果为<code>True</code> ，则执行<code>语句2</code> ，然后结束分支。[…] 如果所有的表达式都为<code>False</code> ，则执行<code>else</code>中的<code>语句n</code> 。</p><p>练习：英制单位与公制单位互换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">value = float(input(<span class="string">'请输入长度:'</span>))</span><br><span class="line">unit = input(<span class="string">'请输入单位:'</span>)</span><br><span class="line"><span class="keyword">if</span> unit == <span class="string">'in'</span> <span class="keyword">or</span> unit == <span class="string">'英寸'</span>:</span><br><span class="line">    print(<span class="string">'%f英寸 = %f厘米'</span> % (value, value * <span class="number">2.54</span>))</span><br><span class="line"><span class="keyword">elif</span> unit == <span class="string">'cm'</span> <span class="keyword">or</span> unit == <span class="string">'厘米'</span>:</span><br><span class="line">    print(<span class="string">'%f厘米 = %f英寸'</span> % (value, value / <span class="number">2.54</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'请输入有效的单位'</span>)</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>构造循环语句要使用 <code>for...in...</code> 或者 <code>while</code> 关键字。</p><p>1、<code>for...in...</code>结构，依次把可迭代容器中的每个元素迭代出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代容器:</span><br><span class="line">语句...</span><br></pre></td></tr></table></figure><p>eg：求1-100的和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">    sum += x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>2、<code>while</code>结构，只要条件满足，就不断循环，条件不满足时退出循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 表达式：</span><br><span class="line">语句...</span><br></pre></td></tr></table></figure><p>eg：猜数字游戏    </p><p>​    规则：计算机出一个1~100之间的随机数由人来猜<br>​           计算机根据人猜的数字分别给出提示大一点/小一点/猜对了，当猜的次数大于7，再提示智商不足</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">answer = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    number = int(input(<span class="string">'请输入:'</span>))</span><br><span class="line">    <span class="keyword">if</span> number &lt; answer:</span><br><span class="line">        print(<span class="string">'大一点'</span>)</span><br><span class="line">    <span class="keyword">elif</span> number &gt; answer:</span><br><span class="line">        print(<span class="string">'小一点'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'恭喜你猜对了!'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">'你总共猜了%d次'</span> % counter)</span><br><span class="line"><span class="keyword">if</span> counter &gt; <span class="number">7</span>:</span><br><span class="line">    print(<span class="string">'你的智商余额明显不足'</span>)</span><br></pre></td></tr></table></figure><p>练习：打印九九乘法表，要使用双层循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'%d*%d=%d'</span> % (i, j, i * j), end=<span class="string">'\t'</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 分支循环 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础（6）——list、tuple、dict、set之间的转换</title>
      <link href="/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%886%EF%BC%89%E2%80%94%E2%80%94list%E3%80%81tuple%E3%80%81dict%E3%80%81set%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%886%EF%BC%89%E2%80%94%E2%80%94list%E3%80%81tuple%E3%80%81dict%E3%80%81set%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="Python基础（6）——list、tuple、dict与set之间的转换"><a href="#Python基础（6）——list、tuple、dict与set之间的转换" class="headerlink" title="Python基础（6）——list、tuple、dict与set之间的转换"></a>Python基础（6）——list、tuple、dict与set之间的转换</h1><h2 id="list、tuple、dict与set之间的转换"><a href="#list、tuple、dict与set之间的转换" class="headerlink" title="list、tuple、dict与set之间的转换"></a>list、tuple、dict与set之间的转换</h2><p>list和tuple是有序的，dict和set是无序的。</p><p>list和dict是可变的，tuple和set是“不可变的”。</p><p>dict具有极快的查找速度，不会因为元素个数的增多而变慢，相应的，占用的空间大；</p><p>而list占用的空间较小，但是查找速度会随着元素个数的增多而变慢。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#list-&gt;set</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line">set1 = set(list1)</span><br><span class="line">print(set1)</span><br><span class="line">print(type(set1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set-&gt;list</span></span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">list2 = list(set2)</span><br><span class="line">print(list2)</span><br><span class="line">print(type(list2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># tuple-&gt;set</span></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">set3 = set(tuple1)</span><br><span class="line">print(set3)</span><br><span class="line">print(type(set3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set-&gt;tuple</span></span><br><span class="line">set4 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">tuple2 = tuple(set4)</span><br><span class="line">print(tuple2)</span><br><span class="line">print(type(tuple2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict-&gt;set</span></span><br><span class="line">dict1 = &#123;<span class="string">'Alex'</span>: <span class="number">88</span>, <span class="string">'xiaoming'</span> : <span class="number">99</span>, <span class="string">'Ala'</span>: <span class="number">96</span>, <span class="string">'Tom'</span>: <span class="number">85</span>, <span class="string">'Jhon'</span>: <span class="number">77</span>&#125;</span><br><span class="line">set5 = set(dict1)</span><br><span class="line">print(set5)</span><br><span class="line">print(type(set5))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set-dict  注意：set不能转换成dict，因为set只有key，而dict是key-value形式存储的</span></span><br><span class="line"><span class="comment"># set6 = &#123;2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># dict2 = dict(set6)</span></span><br><span class="line"><span class="comment"># print(dict2)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> list </tag>
            
            <tag> tuple </tag>
            
            <tag> set </tag>
            
            <tag> dict </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础（5）——集合set</title>
      <link href="/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%885%EF%BC%89%E2%80%94%E2%80%94%E9%9B%86%E5%90%88set/"/>
      <url>/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%885%EF%BC%89%E2%80%94%E2%80%94%E9%9B%86%E5%90%88set/</url>
      <content type="html"><![CDATA[<h1 id="Python基础（5）——集合set"><a href="#Python基础（5）——集合set" class="headerlink" title="Python基础（5）——集合set"></a>Python基础（5）——集合set</h1><h2 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h2><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</p><p>作用: 一般是对<code>list</code> ，<code>tuple</code>中的元素进行去重的，求交集、并集、差集等</p><p>set的一些常用操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得set</span></span><br><span class="line">set1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">print(set1)</span><br><span class="line">print(type(set1))</span><br><span class="line">set2 = set((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(set2)</span><br><span class="line">print(type(set2))</span><br><span class="line">set3 = set(&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>&#125;)</span><br><span class="line">print(set3)</span><br><span class="line">print(type(set3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">set4 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">set4.add(<span class="number">55</span>)  <span class="comment"># add() #可以添加重复的值,但是没效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set4.add([10, 9]) #直接报错,不能添加list</span></span><br><span class="line">set4.add((<span class="number">10</span>, <span class="number">9</span>))</span><br><span class="line"><span class="comment"># set4.add(&#123;'a':1&#125;) #直接报错,不能添加字典</span></span><br><span class="line"><span class="comment"># 总结:list和dict是可改变的, 而tuple是不可改变</span></span><br><span class="line">print(set4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">set5 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># 将list dict tuple 等等整个插入进去</span></span><br><span class="line">set5.update([<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line">set5.update(&#123;<span class="number">9</span> : <span class="string">'a'</span>, <span class="number">10</span> : <span class="string">'b'</span>&#125;)  <span class="comment">#注意：插入字典时，是将key插进去</span></span><br><span class="line">set5.update((<span class="number">11</span>, <span class="number">56</span>))</span><br><span class="line">print(set5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">set6= set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">set6.remove(<span class="number">4</span>)</span><br><span class="line">print(set6)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历</span></span><br><span class="line">set7 = set((<span class="number">231</span>, <span class="number">323.14</span>, <span class="string">'asddf'</span>, <span class="keyword">None</span>, <span class="keyword">True</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> set7:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集  &amp;  并集  |  差集 -  对称差 ^</span></span><br><span class="line">set8 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">set9 = set([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">set10 = set8 &amp; set9</span><br><span class="line">set11 = set8 | set9</span><br><span class="line">print(set10)</span><br><span class="line">print(type(set10))</span><br><span class="line">print(set11)</span><br><span class="line">print(type(set11))</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础（4）——字典dict</title>
      <link href="/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%884%EF%BC%89%E2%80%94%E2%80%94%E5%AD%97%E5%85%B8dict/"/>
      <url>/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%884%EF%BC%89%E2%80%94%E2%80%94%E5%AD%97%E5%85%B8dict/</url>
      <content type="html"><![CDATA[<h1 id="Python基础（4）——字典dict"><a href="#Python基础（4）——字典dict" class="headerlink" title="Python基础（4）——字典dict"></a>Python基础（4）——字典dict</h1><h2 id="字典dict"><a href="#字典dict" class="headerlink" title="字典dict"></a>字典dict</h2><p>Python内置了字典：dict的支持，dict全称dictionary，使用键-值（key-value）存储，具有极快的查找速度。</p><p>注意事项:<br>​    1、在字典中键(key)的值必须是唯一<br>​    2、在字典中可以存放多个键值对<br>​    3、在字典中键(key)必须是不可变类型，字符串 、整数等都可以作为键(key)</p><p>下面是字典dict的一些常用操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义字典</span></span><br><span class="line">dict1 = &#123;<span class="string">'Alex'</span>: <span class="number">88</span>, <span class="string">'xiaoming'</span> : <span class="number">99</span>, <span class="string">'Ala'</span>: <span class="number">96</span>, <span class="string">'Tom'</span>: <span class="number">85</span>, <span class="string">'Jhon'</span>: <span class="number">77</span>&#125;</span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素的访问</span></span><br><span class="line"><span class="comment"># 获取的方式: 字典名[key]</span></span><br><span class="line">print(dict1[<span class="string">'xiaoming'</span>])</span><br><span class="line">print(dict1.get(<span class="string">'Alex'</span>))</span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">dict1[<span class="string">'HanMeimei'</span>] = <span class="number">89</span></span><br><span class="line">print(dict1)</span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">dict1[<span class="string">'HanMeimei'</span>] = <span class="string">'90'</span></span><br><span class="line">print(dict1)</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">dict1.pop(<span class="string">'HanMeimei'</span>)</span><br><span class="line">print(dict1)</span><br><span class="line"><span class="comment"># 遍历</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dict1:</span><br><span class="line">    print(k, dict1[k])</span><br><span class="line"><span class="comment"># 获取字典所有的value和key</span></span><br><span class="line">print(dict1.values())</span><br><span class="line">print(dict1.keys())</span><br><span class="line"><span class="comment"># 遍历value值</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> dict1.values():</span><br><span class="line">    print(v)</span><br><span class="line"><span class="comment">#遍历key值</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dict1.keys():</span><br><span class="line">    print(k)</span><br><span class="line"><span class="comment">#遍历key-value值</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dict1.items():</span><br><span class="line">    print(k, v)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> enumerate(dict1):</span><br><span class="line">    print(k, v)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> dict </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础（3）——元组tuple</title>
      <link href="/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%883%EF%BC%89%E2%80%94%E2%80%94%E5%85%83%E7%BB%84tuple/"/>
      <url>/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%883%EF%BC%89%E2%80%94%E2%80%94%E5%85%83%E7%BB%84tuple/</url>
      <content type="html"><![CDATA[<h1 id="Python基础（3）——元组tuple"><a href="#Python基础（3）——元组tuple" class="headerlink" title="Python基础（3）——元组tuple"></a>Python基础（3）——元组tuple</h1><h2 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h2><p>Python还有另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改。</p><p>下面是元组tuple的一些常见操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空元祖</span></span><br><span class="line">tuple1 = ()</span><br><span class="line">print(tuple1)</span><br><span class="line">print(type(tuple1))</span><br><span class="line"><span class="comment"># tuple和list一样也可以保存任意数据类型的数据</span></span><br><span class="line">tuple2 = (<span class="number">231</span>, <span class="number">323.14</span>, <span class="string">'asddf'</span>, <span class="keyword">None</span>, <span class="keyword">True</span>)</span><br><span class="line">print(tuple2)</span><br><span class="line"><span class="comment"># 注意：当创建的元组只有一个元素时，需要在元素后面加一个逗号</span></span><br><span class="line">tuple3 = (<span class="number">34</span>, ) <span class="comment"># ===&gt; tuple类型       # tuple3 = (34)  # ===&gt; int类型</span></span><br><span class="line">print(tuple3)</span><br><span class="line"><span class="comment"># 获取元组的元素和list一样，通过下标来获取</span></span><br><span class="line">tuple4 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">print(tuple4[<span class="number">-1</span>])</span><br><span class="line"><span class="comment"># 注意：元组定义好之后是不能修改的</span></span><br><span class="line">tuple5 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>])</span><br><span class="line"><span class="comment"># tuple5[0] = 150  # 报错</span></span><br><span class="line">print(tuple5[<span class="number">-1</span>][<span class="number">-2</span>]) <span class="comment">#  ==&gt; print(tuple5[4][1])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组进行操作</span></span><br><span class="line"><span class="comment"># 将两个元组合并成一个新的元组</span></span><br><span class="line">tuple7 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">tuple8 = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">tuple9 = tuple7 + tuple8</span><br><span class="line">print(tuple9)</span><br><span class="line">print(tuple7, tuple8)</span><br><span class="line"><span class="comment"># 将元组重复n次,最后返回一个新的元组</span></span><br><span class="line">tuple10 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">print(tuple10 * <span class="number">3</span>)</span><br><span class="line"><span class="comment"># in 判断一个元素是否在一个元组中,如果在返回True,否则返回False</span></span><br><span class="line">tuple11 = (<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line">print(<span class="number">3</span> <span class="keyword">in</span> tuple11)</span><br><span class="line">print(<span class="number">4</span> <span class="keyword">in</span> tuple11)</span><br><span class="line"><span class="comment"># 元组的截取</span></span><br><span class="line"><span class="comment"># 格式: 元组名[start:end:step]</span></span><br><span class="line">tuple12 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line">print(tuple12[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line">print(tuple12[<span class="number">3</span>:])</span><br><span class="line">print(tuple12[:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 将元组进行逆序排列</span></span><br><span class="line">print(tuple12[::<span class="number">-1</span>])</span><br><span class="line"><span class="comment"># 二维元组</span></span><br><span class="line">tuple13 = ((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>))</span><br><span class="line">print(tuple13)</span><br><span class="line">print(tuple13[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组的方法</span></span><br><span class="line"><span class="comment"># len(): 求一个元组的长度</span></span><br><span class="line">tuple14 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(len(tuple14))</span><br><span class="line"><span class="comment"># max(): 求一个元组的元素的最大值</span></span><br><span class="line">print(max(tuple14))</span><br><span class="line"><span class="comment"># min(): 求一个元组的元素的最小值</span></span><br><span class="line">print(min(tuple14))</span><br><span class="line"><span class="comment">#遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tuple14:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> tuple </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础（2）——列表list</title>
      <link href="/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E5%88%97%E8%A1%A8list/"/>
      <url>/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E5%88%97%E8%A1%A8list/</url>
      <content type="html"><![CDATA[<h1 id="Python基础（2）——列表list"><a href="#Python基础（2）——列表list" class="headerlink" title="Python基础（2）——列表list"></a>Python基础（2）——列表list</h1><h2 id="列表list"><a href="#列表list" class="headerlink" title="列表list"></a>列表list</h2><p>Python还内置了一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。</p><p>下面是列表list的一些常见操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空列表</span></span><br><span class="line">list1 = []</span><br><span class="line">print(list1)</span><br><span class="line">print(type(list1))</span><br><span class="line"><span class="comment"># 创建带有元素的列表</span></span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">print(list2)</span><br><span class="line"><span class="comment"># 列表元素的类型可以不同</span></span><br><span class="line">list3 = [<span class="number">12</span>, <span class="string">'qwe'</span>, <span class="number">0.87</span>, <span class="keyword">False</span>, <span class="keyword">None</span>]</span><br><span class="line">print(list3)</span><br><span class="line"><span class="comment"># 访问列表中的元素  格式: 列表名[元素的下标] 注意：下标不能超出列表的范围，最大为len(list)-1，超出下标会报一个IndexError错误</span></span><br><span class="line">list4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">print(list4[<span class="number">5</span>])</span><br><span class="line"><span class="comment"># 修改元素</span></span><br><span class="line">list4[<span class="number">3</span>] = <span class="number">10</span></span><br><span class="line">print(list4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的操作</span></span><br><span class="line"><span class="comment"># 列表拼接</span></span><br><span class="line">list5 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list6 = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">list7 = list5 + list6</span><br><span class="line">print(list7)</span><br><span class="line"><span class="comment"># 列表的重复</span></span><br><span class="line">list8 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">print(list8 * <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 判断一个元素是否在列表中</span></span><br><span class="line">list9 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># 返回的结果是布尔值 存在为True  不存在为False</span></span><br><span class="line">print(<span class="number">7</span> <span class="keyword">in</span> list9)</span><br><span class="line">print(<span class="number">4</span> <span class="keyword">in</span> list9)</span><br><span class="line"><span class="comment"># 截取列表 list[start:end:step]</span></span><br><span class="line">list10 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">print(list10[:<span class="number">6</span>])  <span class="comment"># 从左截取，从头开始，到下标为5的元素</span></span><br><span class="line">print(list10[<span class="number">5</span>:])  <span class="comment"># 从左截取，从下标为5的元素，到末尾</span></span><br><span class="line">print(list10[::<span class="number">-1</span>])  <span class="comment"># 将list倒序排列</span></span><br><span class="line">print(list10[::<span class="number">-2</span>])  <span class="comment"># 从右截取，末尾开始，每隔一个元素截取一个</span></span><br><span class="line"><span class="comment"># 二维列表</span></span><br><span class="line">list11 = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="comment"># 获取元素</span></span><br><span class="line">print(list11[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 列表的方法</span></span><br><span class="line"><span class="comment"># append(): 在列表的末尾添加一个元素</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list1.append(<span class="number">8</span>)</span><br><span class="line">print(list1)</span><br><span class="line">list1.append([<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line">print(list1)</span><br><span class="line"><span class="comment"># extend(): 在列表的末尾一次性追加另外一个列表中的多个值</span></span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list2.extend([<span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>])</span><br><span class="line">print(list2)</span><br><span class="line"><span class="comment">#insert(index, val):在指定下标处添加一个元素,原来此处的元素往后移动  index：表示列表下标，val：表示下标对应的值</span></span><br><span class="line">list3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list3.insert(<span class="number">1</span>, <span class="number">250</span>)</span><br><span class="line">print(list3)</span><br><span class="line"><span class="comment"># pop([index]):将列表中指定下标的元素删除, 如果不传递参数,则删除的是最后一个元素  index：表示列表下标，返回值：删除的该元素</span></span><br><span class="line">list4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">print(list4.pop())</span><br><span class="line">list4.pop()</span><br><span class="line">print(list4)</span><br><span class="line">list4.pop(<span class="number">1</span>)</span><br><span class="line">print(list4)</span><br><span class="line"><span class="comment"># remove(val): 移除列表中指定的元素，从左开始，移除第一个  val：表示列表中的值</span></span><br><span class="line">list5 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>]</span><br><span class="line">list5.remove(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># list5.remove(3)</span></span><br><span class="line">print(list5)</span><br><span class="line"><span class="comment"># clear(): 清除列表中所有的元素</span></span><br><span class="line">list6 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list6.clear()</span><br><span class="line">print(list6)</span><br><span class="line"><span class="comment"># index(val): 获取列表中该元素所对应的下标  val：列表中的某一个元素  返回值：列表中元素所对应的下标</span></span><br><span class="line">list7 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">index1 = list7.index(<span class="number">3</span>)</span><br><span class="line">print(index1)</span><br><span class="line"><span class="comment"># len(list): 获取列表的长度</span></span><br><span class="line">print(len([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]))</span><br><span class="line"><span class="comment"># max(list): 获取列表中的最大值</span></span><br><span class="line">print(max([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]))</span><br><span class="line"><span class="comment"># min(list): 获取列表中的最小值</span></span><br><span class="line">print(min([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]))</span><br><span class="line"><span class="comment"># count(val): 计算列表中元素出现的次数  val：列表中的某一个元素</span></span><br><span class="line">list8 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">print(list8.count(<span class="number">3</span>))</span><br><span class="line"><span class="comment"># reverse(): 将列表进行倒序排列</span></span><br><span class="line">list9 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">list9.reverse()</span><br><span class="line">print(list9)</span><br><span class="line"><span class="comment"># sort(): 将列表中的元素进行升序排列</span></span><br><span class="line">list10 = [<span class="number">10</span>, <span class="number">90</span>, <span class="number">78</span>, <span class="number">23</span>, <span class="number">65</span>, <span class="number">43</span>]</span><br><span class="line">list10.sort()</span><br><span class="line">print(list10)</span><br><span class="line"></span><br><span class="line"><span class="comment"># enumerate(list[, start = 0]):将列表中元素和其对应的下标一一展示出来</span></span><br><span class="line"><span class="comment"># list: 列表</span></span><br><span class="line"><span class="comment"># start: [start = 下标值]</span></span><br><span class="line"></span><br><span class="line">list16 = list(enumerate(list15))</span><br><span class="line">list17 = list(enumerate(list15, start = <span class="number">1</span>))</span><br><span class="line">print(list16)</span><br><span class="line">print(list17)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环遍历</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> list16:</span><br><span class="line">    print(i, v)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础（1）——数据类型与基础语法</title>
      <link href="/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/05/28/Python%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="Python基础（1）——数据类型与基础语法"><a href="#Python基础（1）——数据类型与基础语法" class="headerlink" title="Python基础（1）——数据类型与基础语法"></a>Python基础（1）——数据类型与基础语法</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多中类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，部分如下：</p><p>整型（int）：Python中可以处理任意大小的整数（Python 2.x中有<code>int</code>和<code>long</code>两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有<code>int</code>这一种了），而且支持二进制（如<code>0b100</code>，换算成十进制是<code>4</code>）、八进制（如<code>0o100</code>，换算成十进制是<code>64</code>）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是<code>256</code>）的表示法。</p><p>浮点型（float）：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</p><p>字符串型（str）：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</p><p>布尔型（bool）：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如<code>3 &lt; 5</code>会产生布尔值<code>True</code>，而<code>2 == 1</code>会产生布尔值<code>False</code>）。</p><p>空值类型（None）：表示变量的值为<code>None</code>。</p><p>复数型（complex）：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的 <code>i</code> 换成了 <code>j</code> 。</p><p>数据类型之间的转换：</p><p><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</p><p><code>float()</code>：将一个字符串转换成浮点数。</p><p><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</p><p><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</p><p><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p><p>硬性规则： </p><p>​    1、变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头；</p><p>​    2、大小写敏感（小写的 <code>a</code> 和大写的 <code>A</code> 是两个不同的变量）；</p><p>​    3、不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</p><p>PEP 8要求：</p><p>​    1、用小写字母拼写，多个单词用下划线连接；</p><p>​    2、受保护的实例属性用单个下划线开头；</p><p>​    3、私有的实例属性用两个下划线开头。</p><p>当然，给变量（标识符）命名做到见名知意也是非常重要的。</p><h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./ysf.png" alt="img" title="运算符优先级">                </div>                <div class="image-caption">运算符优先级</div>            </figure><p>赋值表达式： 变量 = 表达式</p><p>表达式为真的情况: <code>not 0</code> <code>-1</code> 等为真</p><p>表达式为假的情况: <code>0</code> <code>&#39;&#39;</code> <code>None</code>  <code>False</code> <code>[]</code> <code>()</code>  <code>{}</code></p><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><p>Python中，在使用print()函数在进行打印输出时，可以<code>format()</code>和<code>%</code> 占位符格式化输出字符串。</p><p>常见的<code>%</code>占位符有：</p><table><thead><tr><th>占位符</th><th>替换内容</th></tr></thead><tbody><tr><td>%d</td><td>整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%x</td><td>十六进制整数</td></tr></tbody></table><p>其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'%2d-%02d'</span> % (<span class="number">3</span>, <span class="number">1</span>))  <span class="comment"># --&gt;   3-01</span></span><br><span class="line">print(<span class="string">'%.2f'</span> % <span class="number">3.1415926</span>)   <span class="comment"># --&gt;  3.14</span></span><br></pre></td></tr></table></figure><p>有些时候，字符串里面的<code>%</code>是一个普通字符，这个时候就需要转义，用<code>%%</code>来表示一个<code>%</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'the rate: %d %%'</span> % <span class="number">7</span>)  <span class="comment"># --&gt; the rate: 7 %</span></span><br></pre></td></tr></table></figure><p>另一种格式化字符串的方法是使用字符串的<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>{0}</code>、<code>{1}</code>……，不过这种方式写起来比<code>%</code>要麻烦得多：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'</span>.format(<span class="string">'小明'</span>, <span class="number">17.125</span>))  <span class="comment"># Hello, 小明, 成绩提升了 17.1%</span></span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释分为单行注释和多行注释。</p><p>单行注释直接在要注释的行前面加<code>#</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一行单行注释</span></span><br></pre></td></tr></table></figure><p>多行注释可以使用用<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code>开头，<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code>结尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">这也是多行注释</span></span><br><span class="line"><span class="string">这也是多行注释</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这里是多行注释</span></span><br><span class="line"><span class="string">这里是多行注释</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h2><p>1、将华氏温度转换为摄氏温度  <code>F = 1.8 * C + 32</code>，F表示华氏温度，C表示摄氏温度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = float(input(<span class="string">'请输入华氏温度: '</span>))</span><br><span class="line">c = (f - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line">print(<span class="string">'%.1f华氏度 = %.1f摄氏度'</span> % (f, c))</span><br></pre></td></tr></table></figure><p>2、输入圆的半径计算计算周长和面积</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">radius = float(input(<span class="string">'请输入圆的半径: '</span>))</span><br><span class="line">perimeter = <span class="number">2</span> * math.pi * radius</span><br><span class="line">area = math.pi * radius * radius</span><br><span class="line">print(<span class="string">'周长: %.2f'</span> % perimeter)</span><br><span class="line">print(<span class="string">'面积: %.2f'</span> % area)</span><br></pre></td></tr></table></figure><p>3、输入年份判断是不是闰年，是则输出 <code>True</code>，否则输出 <code>False</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">year = int(input(<span class="string">'请输入年份: '</span>))</span><br><span class="line"><span class="comment"># 如果代码太长写成一行不便于阅读 可以使用\或()折行</span></span><br><span class="line">is_leap = (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> \</span><br><span class="line">           <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">print(is_leap)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据类型 </tag>
            
            <tag> 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo快速搭建静态Blog网站</title>
      <link href="/2018/05/28/Hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81Blog%E7%BD%91%E7%AB%99/"/>
      <url>/2018/05/28/Hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81Blog%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<h1 id="Hexo快速搭建静态Blog网站"><a href="#Hexo快速搭建静态Blog网站" class="headerlink" title="Hexo快速搭建静态Blog网站"></a>Hexo快速搭建静态Blog网站</h1><p>声明：以下所有操作都是在windows操作系统下进行。</p><h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在安装Hexo前需要确保电脑已经安装以下程序 :</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>这两个程序的安装很简单，windows用户可以使用安装程序进行安装，简单高效。</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>建议使用这个<a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载地址</a>，找到合适的版本进行下载安装即可，安装时的操作请自行参考百度。</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>建议使用这个<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">下载地址</a> 进行下载安装,  这里也请参考百度。建议不要下载最新的版本,  尽量下载大多数人用的版本。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在安装Hexo前，请再次确保Node.js和Git已经成功安装。检查是否安装好以上两个程序，在桌面点击鼠标右键，可在选项中看到 Git Bash Here 选项，点击进入bash交互界面。</p><p>在打开bash交互界面（类似于Linux交互界面）中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node --version</span><br></pre></td></tr></table></figure><p>如果显示相关的版本信息说明安装成功。</p><p>现在可以正式安装Hexo了，使用如下命令安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;  # folder 是文件夹 即 hexo init 文件夹</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>命令执行成功没有 error 错误，我们就建站成功了。</p><p>###安装hexo-server并启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>这两条命令执行完成后会生成一个如下的地址：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./hexo1.png" alt="hexo1" title="本地hexo-web地址">                </div>                <div class="image-caption">本地hexo-web地址</div>            </figure><p>把这个网址复制下来并粘贴到浏览器中打开即可看到本地 Hexo 默认的主题博客了，如果没有成功的话请检查自己是否有操作不当的地方或者命令错误。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h3><p>登录GitHub账号，创建一个仓库，注意仓库的名字一定要以 “&lt;用户名&gt;.github.io” 这种格式。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./hexo2.png" alt="hexo2" title="">                </div>                <div class="image-caption">hexo2</div>            </figure><p>创建时，注意要将下面这个选项勾上。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./hexo3.png" alt="hexo3" title="">                </div>                <div class="image-caption">hexo3</div>            </figure><h3 id="生成SSH-keys"><a href="#生成SSH-keys" class="headerlink" title="生成SSH keys"></a>生成SSH keys</h3><p>这个很重要！ 这个如果没有添加 ssh keys 那么等会必定会报错。</p><p>使用如下操作生成SSH key</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./hexo4.png" alt="hexo4" title="">                </div>                <div class="image-caption">hexo4</div>            </figure><p>生成密钥完成后， 将 id_rsa.pub 中的所有内容拷贝到github中相应的位置中去。</p><p>登录GitHub，找到如下位置：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./hexo5.png" alt="hexo5" title="">                </div>                <div class="image-caption">hexo5</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./hexo6.png" alt="hexo6" title="">                </div>                <div class="image-caption">hexo6</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./hexo7.png" alt="hexo7" title="">                </div>                <div class="image-caption">hexo7</div>            </figure><p>将生成的在 id_rsa.pub 中的内容 拷贝到其中，然后添加。</p><h3 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h3><p>在初始化文件夹下找到 _config.yml 这个文件并打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure><p>打开后做如下修改， repository 就是 github 为我们生成的一个地址。这里注意一下空格。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./hexo8.png" alt="hexo8" title="">                </div>                <div class="image-caption">hexo8</div>            </figure><h3 id="生成静态网页并部署"><a href="#生成静态网页并部署" class="headerlink" title="生成静态网页并部署"></a>生成静态网页并部署</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean  # 清理缓存</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><p>至此，部署完毕。</p><p>最后在浏览器中输入地址即可（即  username.github.io ，其中username为你自己创建仓库的名字）。</p><p>当然在以上操作中如果遇到什么错误 这里也许可以帮到你 <a href="https://hexo.bootcss.com/docs/troubleshooting.html" target="_blank" rel="noopener">帮助</a> 。</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/25/hello-world/"/>
      <url>/2018/05/25/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag: [test1, test2]</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
  
  
</search>
