{"meta":{"title":"AlexYang's World","subtitle":"AlexYang的博客世界","description":"学习弯道超车的技巧！","author":"AlexYang","url":"http://alexyanglong.github.io"},"pages":[{"title":"分类","date":"2018-05-26T05:39:42.936Z","updated":"2018-05-26T05:39:42.936Z","comments":false,"path":"categories/index.html","permalink":"http://alexyanglong.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于Alex","date":"2018-05-26T05:31:34.709Z","updated":"2018-05-26T05:31:34.709Z","comments":false,"path":"about/index.html","permalink":"http://alexyanglong.github.io/about/index.html","excerpt":"","text":""},{"title":"标签云","date":"2018-05-26T05:49:45.810Z","updated":"2018-05-26T05:49:45.810Z","comments":false,"path":"tags/index.html","permalink":"http://alexyanglong.github.io/tags/index.html","excerpt":"","text":"tag: [test, test2]"}],"posts":[{"title":"","slug":"Python第一阶段（一）","date":"2018-05-26T05:55:03.798Z","updated":"2018-05-26T06:22:32.421Z","comments":true,"path":"2018/05/26/Python第一阶段（一）/","link":"","permalink":"http://alexyanglong.github.io/2018/05/26/Python第一阶段（一）/","excerpt":"","text":"1title: Python第一阶段（一） Python第一阶段（一）变量在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。 硬性规则： ​ 1、变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头； ​ 2、大小写敏感（大写的 a 和小写的 A 是两个不同的变量）； ​ 3、不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。 PEP 8要求： ​ 1、用小写字母拼写，多个单词用下划线连接； ​ 2、受保护的实例属性用单个下划线开头； ​ 3、私有的实例属性用两个下划线开头。 当然，给变量（事实上应该是所有的标识符）命名做到见名知意也是非常重要的。 数据类型计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多中类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，部分如下： 整型（int）：Python中可以处理任意大小的整数（Python 2.x中有int和long两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如0b100，换算成十进制是4）、八进制（如0o100，换算成十进制是64）、十进制（100）和十六进制（0x100，换算成十进制是256）的表示法。 浮点型（float）：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如123.456）之外还支持科学计数法（如1.23456e2）。 字符串型（str）：字符串是以单引号或双引号括起来的任意文本，比如&#39;hello&#39;和&quot;hello&quot;,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。 布尔型（bool）：布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如3 &lt; 5会产生布尔值True，而2 == 1会产生布尔值False）。 复数型（complex）：形如3+5j，跟数学上的复数表示一样，唯一不同的是虚部的 i 换成了 j 。 数据类型之间的转换： int()：将一个数值或字符串转换成整数，可以指定进制。 float()：将一个字符串转换成浮点数。 str()：将指定的对象转换成字符串形式，可以指定编码。 chr()：将整数转换成该编码对应的字符串（一个字符）。 ord()：将字符串（一个字符）转换成对应的编码（整数）。 运算符与表达式 运算符优先级 赋值表达式： 变量 = 表达式 表达式为真的情况: not 0 -1 等为真 表达式为假的情况: 0 &#39;&#39; None False [] () {} 小练习1、将华氏温度转换为摄氏温度 F = 1.8 * C + 32，F表示华氏温度，C表示摄氏温度 123f = float(input(&apos;请输入华氏温度: &apos;))c = (f - 32) / 1.8print(&apos;%.1f华氏度 = %.1f摄氏度&apos; % (f, c)) 2、输入圆的半径计算计算周长和面积 1234567import mathradius = float(input(&apos;请输入圆的半径: &apos;))perimeter = 2 * math.pi * radiusarea = math.pi * radius * radiusprint(&apos;周长: %.2f&apos; % perimeter)print(&apos;面积: %.2f&apos; % area) 3、输入年份判断是不是闰年，是则输出 True，否则输出 False 1234year = int(input(&apos;请输入年份: &apos;))# 如果代码太长写成一行不便于阅读 可以使用\\或()折行is_leap = (year % 4 == 0 and year % 100 != 0 or year % 400 == 0)print(is_leap) 列表 list列表是一个有序集合，下面是一些list的操作： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106# 创建一个空列表list1 = []print(list1)print(type(list1))# 创建带有元素的列表list2 = [1, 2, 3, 4, 5, 6, 7, 8]print(list2)# 列表元素的类型可以不同list3 = [12, &apos;qwe&apos;, 0.87, False, None]print(list3)# 访问列表中的元素 格式: 列表名[元素的下标] 注意：下标不能超出列表的范围，最大为len(list)-1list4 = [1, 2, 3, 4, 5, 6, 7, 8]print(list4[5])# 修改元素list4[3] = 10print(list4)# 列表的操作# 列表拼接list5 = [1, 2, 3, 4]list6 = [5, 6, 7]list7 = list5 + list6print(list7)# 列表的重复list8 = [4, 5, 6]print(list8 * 3)# 判断一个元素是否在列表中list9 = [1, 2, 3, 4, 5, 6]# 返回的结果是布尔值 存在为True 不存在为Falseprint(7 in list9)print(4 in list9)# 截取列表 list[start:end:step]list10 = [1, 2, 3, 4, 5, 6, 7, 8]print(list10[:6]) # 从左截取，从头开始，到下标为5的元素print(list10[5:]) # 从左截取，从下标为5的元素，到末尾print(list10[::-1]) # 将list倒序排列print(list10[::-2]) # 从右截取，末尾开始，每隔一个元素截取一个# 二维列表list11 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]# 获取元素print(list11[0][0])# 列表的方法# append(): 在列表的末尾添加一个元素list1 = [1, 2, 3, 4, 5, 6]list1.append(8)print(list1)list1.append([7, 9, 10])print(list1)# extend(): 在列表的末尾一次性追加另外一个列表中的多个值list2 = [1, 2, 3, 4, 5, 6]list2.extend([200, 300, 400])print(list2)#insert(index, val):在指定下标处添加一个元素,原来此处的元素往后移动 index：表示列表下标，val：表示下标对应的值list3 = [1, 2, 3, 4]list3.insert(1, 250)print(list3)# pop([index]):将列表中指定下标的元素删除, 如果不传递参数,则删除的是最后一个元素 index：表示列表下标，返回值：删除的该元素list4 = [1, 2, 3, 4, 5, 6]print(list4.pop())list4.pop()print(list4)list4.pop(1)print(list4)# remove(val): 移除列表中指定的元素，从左开始，移除第一个 val：表示列表中的值list5 = [3, 4, 5, 6, 3, 7]list5.remove(3)# list5.remove(3)print(list5)# clear(): 清除列表中所有的元素list6 = [1, 2, 3, 4, 5, 6]list6.clear()print(list6)# index(val): 获取列表中该元素所对应的下标 val：列表中的某一个元素 返回值：列表中元素所对应的下标list7 = [1, 2, 3, 4, 5, 6]index1 = list7.index(3)print(index1)# len(list): 获取列表的长度print(len([1, 2, 3, 4, 5, 6]))# max(list): 获取列表中的最大值print(max([1, 2, 3, 4, 5, 6]))# min(list): 获取列表中的最小值print(min([1, 2, 3, 4, 5, 6]))# count(val): 计算列表中元素出现的次数 val：列表中的某一个元素list8 = [1, 3, 4, 3, 3, 3, 3, 6, 7]print(list8.count(3))# reverse(): 将列表进行倒序排列list9 = [1, 2, 3, 4, 5, 10, 7, 8, 9]list9.reverse()print(list9)# sort(): 将列表中的元素进行升序排列list10 = [10, 90, 78, 23, 65, 43]list10.sort()print(list10)enumerate(list[, start = 0]):将列表中元素和其对应的下标一一展示出来# list: 列表# start: [start = 下标值]list16 = list(enumerate(list15))list17 = list(enumerate(list15, start = 1))print(list16)print(list17)# 循环遍历for i, v in list16: print(i, v) 元组 tuple元组：也是一种有序集合，但一旦定义好之后不能修改。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# 创建一个空元祖tuple1 = ()print(tuple1)print(type(tuple1))# tuple和list一样也可以保存任意数据类型的数据tuple2 = (231, 323.14, &apos;asddf&apos;, None, True)print(tuple2)# 注意：当创建的元组只有一个元素时，需要在元素后面加一个逗号tuple3 = (34, ) # ===&gt; tuple类型 # tuple3 = (34) # ===&gt; int类型print(tuple3)# 获取元组的元素和list一样，通过下标来获取tuple4 = (1, 2, 3, 4, 5, 6)print(tuple4[-1])# 注意：元组定义好之后是不能修改的tuple5 = (1, 2, 3, 4, [11, 22, 33])# tuple5[0] = 150 # 报错print(tuple5[-1][-2]) # ==&gt; print(tuple5[4][1])# 元组进行操作# 将两个元组合并成一个新的元组tuple7 = (1, 2, 3)tuple8 = (4, 5, 6)tuple9 = tuple7 + tuple8print(tuple9)print(tuple7, tuple8)# 将元组重复n次,最后返回一个新的元组tuple10 = (1, 2, 3)print(tuple10 * 3)# in 判断一个元素是否在一个元组中,如果在返回True,否则返回Falsetuple11 = (3, 5, 7)print(3 in tuple11)print(4 in tuple11)# 元组的截取# 格式: 元组名[start:end:step]tuple12 = (1, 2, 3, 4, 5, 6, 7, 8, 9,10)print(tuple12[2:5])print(tuple12[3:])print(tuple12[:3])# 将元组进行逆序排列print(tuple12[::-1])# 二维元组tuple13 = ((2, 3, 4), (5, 6, 7))print(tuple13)print(tuple13[1][1])# 元组的方法# len(): 求一个元组的长度tuple14 = (1, 2, 3, 4, 5)print(len(tuple14))# max(): 求一个元组的元素的最大值print(max(tuple14))# min(): 求一个元组的元素的最小值print(min(tuple14))#遍历for i in tuple14: print(i) 字典 dict在字典里边是以键值对的形式存放。key-value注意事项:1、在字典中键(key)的值必须是唯一2、在字典中可以存放多个键值对3、在字典中键(key)必须是不可变类型 字符串 、整数都可以作为键(key)4、list和tuple都是有序集合, 而dict是无序集合 12345678910111213141516171819202122232425262728293031323334# 定义字典dict1 = &#123;&apos;Alex&apos;: 88, &apos;xiaoming&apos; : 99, &apos;Ala&apos;: 96, &apos;Tom&apos;: 85, &apos;Jhon&apos;: 77&#125;print(dict1)# 元素的访问# 获取的方式: 字典名[key]print(dict1[&apos;xiaoming&apos;])print(dict1.get(&apos;Alex&apos;))# 添加元素dict1[&apos;HanMeimei&apos;] = 89print(dict1)# 修改dict1[&apos;HanMeimei&apos;] = &apos;90&apos;print(dict1)# 删除dict1.pop(&apos;HanMeimei&apos;)print(dict1)# 遍历for k in dict1: print(k, dict1[k])# 获取字典所有的value和keyprint(dict1.values())print(dict1.keys())# 遍历value值for v in dict1.values(): print(v)#遍历key值for k in dict1.keys(): print(k)#遍历key-value值for k,v in dict1.items(): print(k, v)for k,v in enumerate(dict1): print(k, v) 集合 setset(集合):类似于dict, 也是无序的,以key的形式存在,没有value作用: 是对list ，tuple中的元素进行去重的, 求交集、并集1、set是无序集合2、set集合是不可改变的 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# 获取setset1 = set([1, 2, 2, 3, 3, 3])print(set1)print(type(set1))set2 = set((1, 2, 3, 1, 2, 3, 4, 5))print(set2)print(type(set2))set3 = set(&#123;3, 4, 5, 5, 6, 3, 7&#125;)print(set3)print(type(set3))# 添加set4 = set([1, 2, 2, 3, 3, 3])set4.add(55) # add() #可以添加重复的值,但是没效果# set4.add([10, 9]) #直接报错,不能添加listset4.add((10, 9))# set4.add(&#123;&apos;a&apos;:1&#125;) #直接报错,不能添加字典# 总结:list和dict是可改变的, 而tuple是不可改变print(set4)# 修改set5 = set([1, 2, 3, 4, 5])# 将list dict tuple 等等整个插入进去set5.update([6, 7, 8])set5.update(&#123;9 : &apos;a&apos;, 10 : &apos;b&apos;&#125;) #注意：插入字典时，是将key插进去set5.update((11, 56))print(set5)# 删除set6= set([1, 2, 3, 4, 5])set6.remove(4)print(set6)# 遍历set7 = set((231, 323.14, &apos;asddf&apos;, None, True))for i in set7: print(i)# 交集 &amp; 并集 | 差集 - 对称差 ^set8 = set([1, 2, 3, 4])set9 = set([3, 4, 5, 6])set10 = set8 &amp; set9set11 = set8 | set9print(set10)print(type(set10))print(set11)print(type(set11)) list、tuple、dict、set之间的转换12345678910111213141516171819202122232425262728293031323334#list-setlist1 = [1, 2, 3, 4, 4, 5, 5]set1 = set(list1)print(set1)print(type(set1))# set-&gt;listset2 = &#123;1, 2, 3, 4, 5, 6&#125;list2 = list(set2)print(list2)print(type(list2))# tuple-&gt;settuple1 = (1, 2, 3, 4, 5, 6, 6, 6)set3 = set(tuple1)print(set3)print(type(set3))# set-&gt;tupleset4 = &#123;1, 2, 3, 4, 5, 6&#125;tuple2 = tuple(set4)print(tuple2)print(type(tuple2))# dict-&gt;setdict1 = &#123;&apos;Alex&apos;: 88, &apos;xiaoming&apos; : 99, &apos;Ala&apos;: 96, &apos;Tom&apos;: 85, &apos;Jhon&apos;: 77&#125;set5 = set(dict1)print(set5)print(type(set5))# set-dict 注意：set不能转换成dict，因为set只有key，而dict是key-value形式存储的# set6 = &#123;2, 3, 4, 5&#125;# dict2 = dict(set6)# print(dict2) 流程控制：分支与循环分支在Python中，要构造分支结构可以使用if、elif和else关键字。 结构： 1234567if 表达式1: 语句1elif 表达式2: 语句2...else: 语句n 练习：英制单位与公制单位互换 12345678value = float(input(&apos;请输入长度:&apos;))unit = input(&apos;请输入单位:&apos;)if unit == &apos;in&apos; or unit == &apos;英寸&apos;: print(&apos;%f英寸 = %f厘米&apos; % (value, value * 2.54))elif unit == &apos;cm&apos; or unit == &apos;厘米&apos;: print(&apos;%f厘米 = %f英寸&apos; % (value, value / 2.54))else: print(&apos;请输入有效的单位&apos;) 循环构造循环语句要使用 for...in... 或者 while 关键字。 1、for...in...结构： 12for 变量 in 可迭代容器: 语句... eg：求1-100的和 1234sum = 0for x in range(101): sum += xprint(sum) 2、while结构： 12while 表达式： 语句... eg：猜数字游戏 ​ 规则：计算机出一个1~100之间的随机数由人来猜​ 计算机根据人猜的数字分别给出提示大一点/小一点/猜对了 1234567891011121314151617import randomanswer = random.randint(1, 100)counter = 0while True: counter += 1 number = int(input(&apos;请输入:&apos;)) if number &lt; answer: print(&apos;大一点&apos;) elif number &gt; answer: print(&apos;小一点&apos;) else: print(&apos;恭喜你猜对了!&apos;) breakprint(&apos;你总共猜了%d次&apos; % counter)if counter &gt; 7: print(&apos;你的智商余额明显不足&apos;) 练习：打印九九乘法表，要使用双层循环 1234for i in range(1, 10): for j in range(1, i + 1): print(&apos;%d*%d=%d&apos; % (i, j, i * j), end=&apos;\\t&apos;) print()","categories":[],"tags":[]},{"title":"git install","slug":"git-install","date":"2018-05-25T12:50:09.704Z","updated":"2018-05-26T05:09:26.717Z","comments":true,"path":"2018/05/25/git-install/","link":"","permalink":"http://alexyanglong.github.io/2018/05/25/git-install/","excerpt":"","text":"git构建安装安装步骤1、下载git wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz 2、解归档 tar zxvf git-2.9.5.tar.gz 3、安装 cd git-2.9.5 ./configure make make install 安装过程中出现报错，以及解决办法错误一：usr/bin/perl Makefile.PL PREFIX=’/usr/local/git’ INSTALL_BASE=’’ –localedir=’/usr/local/git/share/locale’ Can’t locate ExtUtils/MakeMaker.pm in @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at Makefile.PL line 3. BEGIN failed–compilation aborted at Makefile.PL line 3. make[1]: *** [perl.mak] Error 2 make: *** [perl/perl.mak] Error 2 解决办法：yum install perl-ExtUtils-MakeMaker package 错误二：/bin/sh: msgfmt: command not found 解决办法：yum install gettext-devel 错误三：make时出现：Can’t locate ExtUtils/MakeMaker.pm in @INC 解决办法：yum -y install perl-devel perl-CPAN 错误四：make时出现：tclsh failed; using unoptimized loading MSGFMT po/bg.msg make[1]: *** [po/bg.msg] 错误 127 解决办法：yum install tcl build-essential tk gettext 错误五：error： zlib.h:no such file or directory 解决办法：构建安装zlib wget https://netix.dl.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gz tar -vxf lib-1.2.11.tar.gz /usr/local/src/zlib-1.2.11 构建静态库 ./configure make test make install 构建共享库 make clean ./configure –shared make test make install cp zutil.h /usr/local/include cp zutil.c /usr/local/include 错误六：configure: error: in /root/msmtp-1.4.20&#39;: **configure: error: no acceptable C compiler found in $PATH**Seeconfig.log’ for more details. 解决办法yum install gcc","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-05-25T09:00:56.088Z","updated":"2018-05-26T05:48:09.982Z","comments":true,"path":"2018/05/25/hello-world/","link":"","permalink":"http://alexyanglong.github.io/2018/05/25/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 1tag: [test1, test2]","categories":[],"tags":[]}]}